.\" Manpage for fccanalysis-script
.\" Contact FCC-PED-SoftwareAndComputing-Analysis@cern.ch to correct errors or typos.
.TH FCCANALYSIS\-SCRIPT 7 "17 Jan 2024" "0.9.0" "fccanalysis-script man page"
.SH NAME
\fBfccanalysis\-script\fR \(en analysis steering script specification
.SH SYNOPSIS
.IP
*
.SH DESCRIPTION
.PP
The analysis script is expected to be a valid Python script containing either
part of or the full analysis. There are two basic modes how to run an
analysis, one is to run in the managed mode like so:
.IP
fccanalysis run \fIanalysis_script.py\fR

.RE
or
.IP
fccanalysis final \fIanalysis_script.py\fR

.RE
.PP
where user needs to provide minimal number of variables and settings. In this
mode the RDataFrame is managed for the user and it can be controlled by defining
several global attributes in the analysis script. The other mode is to run the
analysis script as a regular python script:
.IP
python \fIanalysis_script.py\fR
.RE
.PP
here user has full control over the RDataFrame, but has to create all necessary
scaffolding\&.
.PP
It is expected that the whole analysis will be split into several stages and
it can be done in one of the two styles:
.IP
anascript_stage1.py \-> anascript_stage2.py \-> ... \-> anascript_stage_final.py \-> plots.py

.RE
or
.IP
analysis_histmaker.py \-> plots.py

.RE
In the case of the first style there are at least three stages required
(anascript_stage1.py, anascript_stage_final.py, plots.py) and there is no upper
limit on the number of stages. In the case of the second style only two stages
are required. The first style is named "staged analysis" and the second
"histmaker analysis".
.TP
\fBstaged analysis\fR
The analysis script needs to contain \fIRDFanalysis\fR class of the following
structure:
.IP
class RDFanalysis():
    def analysers(df):
        df2 = (
            df
            # define the muon collection
            .Define("muons",  "ReconstructedParticle::get(Muon0, ReconstructedParticles)")
            ...
        )
    return df2
    def output():
        return ["muons", "muon_mass"]
.TP
\fBhistmaker analysis\fR
The analysis script needs to contain \fIbuild_graph\fR function of the following
structure:
.IP
def build_graph(df, dataset):
    results = []
    df = df.Define("weight", "1.0")
    weightsum = df.Sum("weight")
    df = df.Define("muons", "FCCAnalyses::ReconstructedParticle::sel_p(20)(muons_all)")
    ...
    results.append(df.Histo1D(("muons_p_cut0", "", *bins_p_mu), "muons_p"))
    return results, weightsum
.TP
\fBplots script\fR
This stage does not require neither \fIRDFanalysis\fR class neither
\fIbuild_graph\fR function, it has it's own set of attributes, please see the
examples in the \fIexamples\fR directory.
.SH ATTRIBUTES
In case of running the FCCAnalysis in the managed mode user can use the
following global attributes to control the behavior of the analysis.
.TP
\fBprocessList\fR (mandatory)
Dictionary of process samples to be run over. Each process can have several
parameters:
\fIfraction\fR
.in +4
The analysis will run over reduced number of input files roughly corresponding
to the fraction of total events specified\&.
.br
Default value: 1 (full process sample)
.in -4
\fIoutput\fR
.in +4
Specifies the stem for the output file(s)\&. The stem will be used to create
output directory if there is more than one chunk or as a filename if there is
only one\&.
.br
Default value: output\&.root
.in -4
\fIchunks\fR
.in +4
The analysis RDataFrame can be split into several chunks\&.
.br
Default value: 1
.TP
\fBprodTag\fR (mandatory)
Provides information where to find input files. There are several way how to
find the information, one of them uses YAML file which is being searched for in
the subfolders of $FCCDICTSDIR\&.
.TP
\fBoutputDir\fR (mandatory)
User can specify the directory for the output files. The output directory can be
overwriten by specifiing absolute path with `\-\-output` commandline argument\&.
.TP
\fBanalysisName\fR (optional)
Optional name for the analysis
.br
Default value: empty string
.TP
\fBnCPUS\fR (optional)
Number of threads the RDataFrame will use\&.
.br
Default value: 4
.TP
\fBrunBatch\fR (optional)
Run the analysis on the HTCondor batch system.
.br
Default value: False
.TP
\fBbatchQueue\fR (optional)
Batch queue name when running on HTCondor.
.br
Default value: "longlunch"
.TP
\fBcompGroup\fR (optional)
Computing account when running on HTCondor.
.br
Default value: "group_u_FCC.local_gen"
.TP
\fBoutputDirEos\fR (optional)
Output directory on EOS, if specified files will be copied there once the batch
job is done.
.br
Default value: empty string
.TP
\fBeosType\fR (mandatory if \fIoutputDirEos\fR is used)
Type of the EOS proxy to be used.
.br
Default value: empty string
.TP
\fBtestFile\fR (optional)
Location of the test file.
.br
Default value: empty string
.TP
\fBgraph\fR (optional)
The computational graph of the analysis will be generated.
.br
Default value: False
.TP
\fBgraphPath\fR (optional)
Location where the computational graph of the analysis should be stored. Only
paths with \fI.dot\fR and \fI.png\fR extensions are accepted.
.br
Default value: empty string
.TP
.B procDict
This variable controls which process dictionary will be used. It can be either
simple file name, absolute path or url. In the case of simple filename, the file
is being searched for first in the working directory and then at the locations
indicated in the $FCCDICTSDIR environment variable.
.PP
This section is under construction. You are invited to help :)
.SH SEE ALSO
fccanalysis(1), fccanalysis-run(1)
.SH BUGS
Many
.SH AUTHORS
There are many contributors to the FCCAnalyses framework, but the principal
authors are:
.in +4
Clement Helsens
.br
Valentin Volk
.br
Gerardo Ganis
.SH FCCANALYSES
Part of the FCCAnalyses framework\&.
.SH LINKS
.PP
.UR https://hep-fcc\&.github\&.io/FCCAnalyses/
FCCAnalyses webpage
.UE
.PP
.UR https://github\&.com/HEP\-FCC/FCCAnalyses/
FCCAnalysises GitHub repository
.UE
.PP
.UR https://fccsw\-forum\&.web\&.cern\&.ch/
FCCSW Forum
.UE
.SH CONTACT
.pp
.MT FCC-PED-SoftwareAndComputing-Analysis@cern.ch
FCC-PED-SoftwareAndComputing-Analysis
.ME
