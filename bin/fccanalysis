#!/usr/bin/env python3
'''
Starting point (executable) for fccanalysis command
'''

import argparse
import logging
import sys

from parsers import setup_subparsers
from init_analysis import init_analysis
from build_analysis import build_analysis
from test_fccanalyses import test_fccanalyses
from pin_analysis import PinAnalysis
from submit import submit_analysis
from run_analysis import run
from run_final_analysis import run_final
from do_plots import do_plots
from do_combine import do_combine


# _____________________________________________________________________________
class MultiLineFormatter(logging.Formatter):
    '''
    Multi-line formatter.
    '''
    def get_header_length(self, record):
        '''
        Get the header length of a given record.
        '''
        return len(super().format(logging.LogRecord(
            name=record.name,
            level=record.levelno,
            pathname=record.pathname,
            lineno=record.lineno,
            msg='', args=(), exc_info=None
        )))

    def format(self, record):
        '''
        Format a record with added indentation.
        '''
        indent = ' ' * self.get_header_length(record)
        head, *trailing = super().format(record).splitlines(True)
        return head + ''.join(indent + line for line in trailing)


# _____________________________________________________________________________
class MaxLevelFilter(logging.Filter):
    '''
    Filters (lets through) all messages with level < LEVEL

    Found here:
      https://stackoverflow.com/questions/1383254/
    '''
    def __init__(self, level):
        super().__init__()
        self.level = level

    def filter(self, record):
        # "<" instead of "<=": since logger.setLevel is inclusive,
        # this should be exclusive
        return record.levelno < self.level


# _____________________________________________________________________________
def main():
    '''
    Starting point for fccanalysis command
    '''
    parser = argparse.ArgumentParser(description='FCCAnalyses v0.11.0')

    # Verbosity arguments
    verbosity_argument_group = parser.add_mutually_exclusive_group()
    verbosity_argument_group.add_argument('-v', '--verbose',
                                          action='store_true',
                                          help='make output verbose')
    verbosity_argument_group.add_argument('-vv', '--more-verbose',
                                          action='store_true',
                                          help='make output more verbose')
    verbosity_argument_group.add_argument('-vvv', '--most-verbose',
                                          action='store_true',
                                          help='make output even more verbose')

    # Sub-parsers
    subparsers = parser.add_subparsers(
        title='sub-commands',
        metavar='sub-command',
        dest='command',
        help='one of the available sub-commands')

    setup_subparsers(subparsers)

    args, _ = parser.parse_known_args()

    verbosity_level = logging.INFO
    if args.verbose or args.more_verbose or args.most_verbose:
        verbosity_level = logging.DEBUG

    logger = logging.getLogger('FCCAnalyses')
    logger.setLevel(verbosity_level)
    formatter = MultiLineFormatter(fmt='----> %(levelname)s: %(message)s')
    stdout_stream_handler = logging.StreamHandler(sys.stdout)
    stderr_stream_handler = logging.StreamHandler(sys.stderr)
    lower_than_warning_filter = MaxLevelFilter(logging.WARNING)
    stdout_stream_handler.addFilter(lower_than_warning_filter)
    stdout_stream_handler.setLevel(verbosity_level)
    stderr_stream_handler.setLevel(logging.WARNING)
    stdout_stream_handler.setFormatter(formatter)
    stderr_stream_handler.setFormatter(formatter)
    logger.addHandler(stdout_stream_handler)
    logger.addHandler(stderr_stream_handler)

    if args.command == 'init':
        init_analysis(parser)
    elif args.command == 'build':
        build_analysis(parser)
    elif args.command == 'test':
        test_fccanalyses(parser)
    elif args.command == 'pin':
        PinAnalysis(parser)
    elif args.command == 'submit':
        submit_analysis(parser)
    elif args.command == 'final':
        run_final(parser)
    elif args.command == 'plots':
        do_plots(parser)
    elif args.command == 'combine':
        do_combine(parser)
    else:
        run(parser)


# _____________________________________________________________________________
if __name__ == "__main__":
    main()
