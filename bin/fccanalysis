#!/usr/bin/env python3

import argparse
import logging


class MultiLineFormatter(logging.Formatter):
    '''
    Multi-line formatter.
    '''
    def get_header_length(self, record):
        '''
        Get the header length of a given record.
        '''
        return len(super().format(logging.LogRecord(
            name=record.name,
            level=record.levelno,
            pathname=record.pathname,
            lineno=record.lineno,
            msg='', args=(), exc_info=None
        )))

    def format(self, record):
        '''
        Format a record with added indentation.
        '''
        indent = ' ' * self.get_header_length(record)
        head, *trailing = super().format(record).splitlines(True)
        return head + ''.join(indent + line for line in trailing)


def main():
    parser = argparse.ArgumentParser(description='FCCAnalyses v0.8.0')

    # Verbosity settings
    verbosity_argument_group = parser.add_mutually_exclusive_group()
    verbosity_argument_group.add_argument('-v', '--verbose',
                                          action='store_true',
                                          help='make output verbose')
    verbosity_argument_group.add_argument('-vv', '--more-verbose',
                                          action='store_true',
                                          help='make output more verbose')
    verbosity_argument_group.add_argument('-vvv', '--most-verbose',
                                          action='store_true',
                                          help='make output most verbose')

    # Create sub-parsers
    subparsers = parser.add_subparsers(help='types of running modes',
                                       dest='command')
    parser_init = subparsers.add_parser(
        'init',
        help="generate a RDataFrame based FCC analysis")
    parser_build = subparsers.add_parser(
        'build',
        help='build and install local analysis')
    parser_test = subparsers.add_parser(
        'test',
        help='test whole or a part of the analysis framework')
    parser_pin = subparsers.add_parser(
        'pin',
        help='pin fccanalyses to the current version of Key4hep stack')
    parser_run = subparsers.add_parser(
        'run',
        help="run a RDataFrame based FCC analysis")
    parser_run_final = subparsers.add_parser(
        'final',
        help="run a RDataFrame based FCC analysis final configuration")
    parser_run_plots = subparsers.add_parser(
        'plots',
        help="run a RDataFrame based FCC analysis plot configuration")

    # Setup sub-parsers
    import Parsers as fccpars
    fccpars.setup_init_parser(parser_init)
    fccpars.setup_build_parser(parser_build)
    fccpars.setup_test_parser(parser_test)
    fccpars.setup_pin_parser(parser_pin)
    fccpars.setup_run_parser(parser_run)
    fccpars.setup_run_parser_final(parser_run_final)
    fccpars.setup_run_parser_plots(parser_run_plots)

    args = parser.parse_args()

    verbosity_level = logging.INFO
    if args.verbose or args.more_verbose or args.most_verbose:
        verbosity_level = logging.DEBUG

    logger = logging.getLogger('FCCAnalyses')
    logger.setLevel(verbosity_level)
    formatter = MultiLineFormatter(fmt='----> %(levelname)s: %(message)s')
    stream_handler = logging.StreamHandler()
    stream_handler.setLevel(verbosity_level)
    stream_handler.setFormatter(formatter)
    logger.addHandler(stream_handler)

    if args.command == 'init':
        from FCCAnalysisSetup import setup
        setup(parser)
    elif args.command == 'build':
        from build_analysis import build_analysis
        build_analysis(parser)
    elif args.command == 'test':
        from test import test_fccanalyses
        test_fccanalyses(parser)
    elif args.command == 'pin':
        from pin_analysis import PinAnalysis
        PinAnalysis(parser)
    else:
        from FCCAnalysisRun import run
        run(parser)


if __name__ == "__main__":
    main()
