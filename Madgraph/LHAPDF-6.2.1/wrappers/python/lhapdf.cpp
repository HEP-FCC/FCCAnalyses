/* Generated by Cython 0.25.2 */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03020000)
    #error Cython requires Python 2.6+ or Python 3.2+.
#else
#define CYTHON_ABI "0_25_2"
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x03030000 || (PY_MAJOR_VERSION == 2 && PY_VERSION_HEX >= 0x02070000)
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_FASTCALL
  #define METH_FASTCALL 0x80
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject **args,
                                              Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif


#define __PYX_ERR(f_index, lineno, Ln_error) \
{ \
  __pyx_filename = __pyx_f[f_index]; __pyx_lineno = lineno; __pyx_clineno = __LINE__; goto Ln_error; \
}

#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__lhapdf
#define __PYX_HAVE_API__lhapdf
#include <string.h>
#include <string>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <utility>
#include <map>
#include <vector>
#include "../../include/LHAPDF/Version.h"
#include "../../include/LHAPDF/Paths.h"
#include "../../include/LHAPDF/PDF.h"
#include "../../include/LHAPDF/Info.h"
#include "../../include/LHAPDF/Config.h"
#include "../../include/LHAPDF/PDFSet.h"
#include "../../include/LHAPDF/AlphaS.h"
#include "../../include/LHAPDF/PDFInfo.h"
#include "../../include/LHAPDF/Factories.h"
#include "../../include/LHAPDF/Reweighting.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING "utf8"
#define __Pyx_PyObject_FromString __Pyx_PyStr_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyStr_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER) && defined (_M_X64)
    #define __Pyx_sst_abs(value) _abs64(value)
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyObject_AsSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
#define __Pyx_Py_UNICODE_strlen Py_UNICODE_strlen
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */

static PyObject *__pyx_m;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "lhapdf.pyx",
  "stringsource",
};

/*--- Type declarations ---*/
struct __pyx_obj_6lhapdf_PDF;
struct __pyx_obj_6lhapdf_Info;
struct __pyx_obj_6lhapdf_PDFSet;
struct __pyx_obj_6lhapdf_PDFInfo;
struct __pyx_obj_6lhapdf_AlphaS;

/* "lhapdf.pyx":13
 * 
 * # For some reason this has to be declared again in order for everything to work...
 * ctypedef enum FlavorScheme:             # <<<<<<<<<<<<<<
 *     FIXED, VARIABLE
 * 
 */
enum __pyx_t_6lhapdf_FlavorScheme {
  __pyx_e_6lhapdf_FIXED,
  __pyx_e_6lhapdf_VARIABLE
};
typedef enum __pyx_t_6lhapdf_FlavorScheme __pyx_t_6lhapdf_FlavorScheme;

/* "lhapdf.pyx":26
 * 
 * 
 * cdef class PDF:             # <<<<<<<<<<<<<<
 *     """\
 *     A parton density function for in general several parton flavours,
 */
struct __pyx_obj_6lhapdf_PDF {
  PyObject_HEAD
  struct __pyx_vtabstruct_6lhapdf_PDF *__pyx_vtab;
  LHAPDF::PDF *_ptr;
};


/* "lhapdf.pyx":239
 * 
 * 
 * cdef class Info:             # <<<<<<<<<<<<<<
 *     """\
 *     Class that handles the parsing of PDF set metadata in the .info file.
 */
struct __pyx_obj_6lhapdf_Info {
  PyObject_HEAD
  struct __pyx_vtabstruct_6lhapdf_Info *__pyx_vtab;
  LHAPDF::Info *_ptr;
};


/* "lhapdf.pyx":292
 * 
 * 
 * cdef class PDFSet:             # <<<<<<<<<<<<<<
 *     """\
 *     A collection of PDFs with related fits, most typically a central PDF and a
 */
struct __pyx_obj_6lhapdf_PDFSet {
  PyObject_HEAD
  struct __pyx_vtabstruct_6lhapdf_PDFSet *__pyx_vtab;
  LHAPDF::PDFSet *_ptr;
};


/* "lhapdf.pyx":415
 * 
 * 
 * cdef class PDFInfo:             # <<<<<<<<<<<<<<
 *     """\
 *     A class handling the metadata that defines a given PDF.
 */
struct __pyx_obj_6lhapdf_PDFInfo {
  PyObject_HEAD
  struct __pyx_vtabstruct_6lhapdf_PDFInfo *__pyx_vtab;
  LHAPDF::PDFInfo *_ptr;
};


/* "lhapdf.pyx":447
 * 
 * 
 * cdef class AlphaS:             # <<<<<<<<<<<<<<
 *      """\
 *      Interface to alpha_s calculations using various schemes.
 */
struct __pyx_obj_6lhapdf_AlphaS {
  PyObject_HEAD
  struct __pyx_vtabstruct_6lhapdf_AlphaS *__pyx_vtab;
  LHAPDF::AlphaS *_ptr;
};



/* "lhapdf.pyx":26
 * 
 * 
 * cdef class PDF:             # <<<<<<<<<<<<<<
 *     """\
 *     A parton density function for in general several parton flavours,
 */

struct __pyx_vtabstruct_6lhapdf_PDF {
  PyObject *(*set_ptr)(struct __pyx_obj_6lhapdf_PDF *, LHAPDF::PDF *);
  PyObject *(*_set)(struct __pyx_obj_6lhapdf_PDF *);
  PyObject *(*_info)(struct __pyx_obj_6lhapdf_PDF *);
};
static struct __pyx_vtabstruct_6lhapdf_PDF *__pyx_vtabptr_6lhapdf_PDF;


/* "lhapdf.pyx":239
 * 
 * 
 * cdef class Info:             # <<<<<<<<<<<<<<
 *     """\
 *     Class that handles the parsing of PDF set metadata in the .info file.
 */

struct __pyx_vtabstruct_6lhapdf_Info {
  PyObject *(*set_ptr)(struct __pyx_obj_6lhapdf_Info *, LHAPDF::Info *);
};
static struct __pyx_vtabstruct_6lhapdf_Info *__pyx_vtabptr_6lhapdf_Info;


/* "lhapdf.pyx":292
 * 
 * 
 * cdef class PDFSet:             # <<<<<<<<<<<<<<
 *     """\
 *     A collection of PDFs with related fits, most typically a central PDF and a
 */

struct __pyx_vtabstruct_6lhapdf_PDFSet {
  PyObject *(*set_ptr)(struct __pyx_obj_6lhapdf_PDFSet *, LHAPDF::PDFSet *);
};
static struct __pyx_vtabstruct_6lhapdf_PDFSet *__pyx_vtabptr_6lhapdf_PDFSet;


/* "lhapdf.pyx":415
 * 
 * 
 * cdef class PDFInfo:             # <<<<<<<<<<<<<<
 *     """\
 *     A class handling the metadata that defines a given PDF.
 */

struct __pyx_vtabstruct_6lhapdf_PDFInfo {
  PyObject *(*set_ptr)(struct __pyx_obj_6lhapdf_PDFInfo *, LHAPDF::PDFInfo *);
};
static struct __pyx_vtabstruct_6lhapdf_PDFInfo *__pyx_vtabptr_6lhapdf_PDFInfo;


/* "lhapdf.pyx":447
 * 
 * 
 * cdef class AlphaS:             # <<<<<<<<<<<<<<
 *      """\
 *      Interface to alpha_s calculations using various schemes.
 */

struct __pyx_vtabstruct_6lhapdf_AlphaS {
  PyObject *(*set_ptr)(struct __pyx_obj_6lhapdf_AlphaS *, LHAPDF::AlphaS *);
};
static struct __pyx_vtabstruct_6lhapdf_AlphaS *__pyx_vtabptr_6lhapdf_AlphaS;

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = PyThreadState_GET();
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* KeywordStringCheck.proto */
static CYTHON_INLINE int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed);

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#endif

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* GetModuleGlobalName.proto */
static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name);

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* PyObjectSetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
#define __Pyx_PyObject_DelAttrStr(o,n) __Pyx_PyObject_SetAttrStr(o,n,NULL)
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_setattro))
        return tp->tp_setattro(obj, attr_name, value);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_setattr))
        return tp->tp_setattr(obj, PyString_AS_STRING(attr_name), value);
#endif
    return PyObject_SetAttr(obj, attr_name, value);
}
#else
#define __Pyx_PyObject_DelAttrStr(o,n)   PyObject_DelAttr(o,n)
#define __Pyx_PyObject_SetAttrStr(o,n,v) PyObject_SetAttr(o,n,v)
#endif

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* IncludeStringH.proto */
#include <string.h>

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* StrEquals.proto */
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyString_Equals __Pyx_PyUnicode_Equals
#else
#define __Pyx_PyString_Equals __Pyx_PyBytes_Equals
#endif

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, long intval, int inplace);
#else
#define __Pyx_PyInt_EqObjC(op1, op2, intval, inplace)\
    PyObject_RichCompare(op1, op2, Py_EQ)
    #endif

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* ArgTypeTest.proto */
static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact);

/* SetVTable.proto */
static int __Pyx_SetVtable(PyObject *dict, void *vtable);

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* FetchCommonType.proto */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);

/* CythonFunction.proto */
#define __Pyx_CyFunction_USED 1
#include <structmember.h>
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#define __Pyx_CyFunction_GetClassObj(f)\
    (((__pyx_CyFunctionObject *) (f))->func_classobj)
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
    PyCFunctionObject func;
#if PY_VERSION_HEX < 0x030500A0
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
    PyObject *func_classobj;
    void *defaults;
    int defaults_pyobjects;
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
} __pyx_CyFunctionObject;
static PyTypeObject *__pyx_CyFunctionType = 0;
#define __Pyx_CyFunction_NewEx(ml, flags, qualname, self, module, globals, code)\
    __Pyx_CyFunction_New(__pyx_CyFunctionType, ml, flags, qualname, self, module, globals, code)
static PyObject *__Pyx_CyFunction_New(PyTypeObject *, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *self,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(void);

/* CalculateMetaclass.proto */
static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases);

/* Py3ClassCreate.proto */
static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name, PyObject *qualname,
                                           PyObject *mkw, PyObject *modname, PyObject *doc);
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases, PyObject *dict,
                                      PyObject *mkw, int calculate_metaclass, int allow_py2_metaclass);

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* Print.proto */
static int __Pyx_Print(PyObject*, PyObject *, int);
#if CYTHON_COMPILING_IN_PYPY || PY_MAJOR_VERSION >= 3
static PyObject* __pyx_print = 0;
static PyObject* __pyx_print_kwargs = 0;
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_LHAPDF_3a__3a_AlphaS_3a__3a_FlavorScheme(LHAPDF::AlphaS::FlavorScheme value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

/* PrintOne.proto */
static int __Pyx_PrintOne(PyObject* stream, PyObject *o);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static PyObject *__pyx_f_6lhapdf_3PDF_set_ptr(struct __pyx_obj_6lhapdf_PDF *__pyx_v_self, LHAPDF::PDF *__pyx_v_ptr); /* proto*/
static PyObject *__pyx_f_6lhapdf_3PDF__set(struct __pyx_obj_6lhapdf_PDF *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_6lhapdf_3PDF__info(struct __pyx_obj_6lhapdf_PDF *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_6lhapdf_4Info_set_ptr(struct __pyx_obj_6lhapdf_Info *__pyx_v_self, LHAPDF::Info *__pyx_v_ptr); /* proto*/
static PyObject *__pyx_f_6lhapdf_6PDFSet_set_ptr(struct __pyx_obj_6lhapdf_PDFSet *__pyx_v_self, LHAPDF::PDFSet *__pyx_v_ptr); /* proto*/
static PyObject *__pyx_f_6lhapdf_7PDFInfo_set_ptr(struct __pyx_obj_6lhapdf_PDFInfo *__pyx_v_self, LHAPDF::PDFInfo *__pyx_v_ptr); /* proto*/
static PyObject *__pyx_f_6lhapdf_6AlphaS_set_ptr(struct __pyx_obj_6lhapdf_AlphaS *__pyx_v_self, LHAPDF::AlphaS *__pyx_v_ptr); /* proto*/

/* Module declarations from 'libc.string' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'libcpp.utility' */

/* Module declarations from 'libcpp.map' */

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'libcpp' */

/* Module declarations from 'clhapdf' */

/* Module declarations from 'lhapdf' */
static PyTypeObject *__pyx_ptype_6lhapdf_PDF = 0;
static PyTypeObject *__pyx_ptype_6lhapdf_Info = 0;
static PyTypeObject *__pyx_ptype_6lhapdf_PDFSet = 0;
static PyTypeObject *__pyx_ptype_6lhapdf_PDFInfo = 0;
static PyTypeObject *__pyx_ptype_6lhapdf_AlphaS = 0;
static PyObject *__pyx_f_6lhapdf_mkPDF_setmem(std::string, int); /*proto*/
static PyObject *__pyx_f_6lhapdf_mkPDF_lhaid(int); /*proto*/
static PyObject *__pyx_f_6lhapdf_mkPDF_setmemstr(std::string); /*proto*/
static PyObject *__pyx_f_6lhapdf_mkAlphaS_setmem(std::string, int); /*proto*/
static PyObject *__pyx_f_6lhapdf_mkAlphaS_lhaid(int); /*proto*/
static PyObject *__pyx_f_6lhapdf_mkAlphaS_setmemstr(std::string); /*proto*/
static PyObject *__pyx_f_6lhapdf_mkBareAlphaS_(std::string); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &); /*proto*/
static std::string __pyx_convert_string_from_py_std__in_string(PyObject *); /*proto*/
static std::vector<double>  __pyx_convert_vector_from_py_double(PyObject *); /*proto*/
static std::vector<std::string>  __pyx_convert_vector_from_py_std_3a__3a_string(PyObject *); /*proto*/
static PyObject *__pyx_convert_vector_to_py_std_3a__3a_string(const std::vector<std::string>  &); /*proto*/
#define __Pyx_MODULE_NAME "lhapdf"
int __pyx_module_is_main_lhapdf = 0;

/* Implementation of 'lhapdf' */
static PyObject *__pyx_builtin_ImportError;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_xrange;
static PyObject *__pyx_builtin_range;
static const char __pyx_k_Q[] = "Q";
static const char __pyx_k_q[] = "q";
static const char __pyx_k_x[] = "x";
static const char __pyx_k_Q2[] = "Q2";
static const char __pyx_k_cl[] = "cl";
static const char __pyx_k_id[] = "id";
static const char __pyx_k_nf[] = "nf";
static const char __pyx_k_q2[] = "q2";
static const char __pyx_k_x1[] = "x1";
static const char __pyx_k_x2[] = "x2";
static const char __pyx_k_doc[] = "__doc__";
static const char __pyx_k_end[] = "end";
static const char __pyx_k_id1[] = "id1";
static const char __pyx_k_id2[] = "id2";
static const char __pyx_k_key[] = "key";
static const char __pyx_k_obj[] = "obj";
static const char __pyx_k_ptr[] = "ptr";
static const char __pyx_k_val[] = "val";
static const char __pyx_k_zip[] = "zip";
static const char __pyx_k_args[] = "args";
static const char __pyx_k_file[] = "file";
static const char __pyx_k_init[] = "__init__";
static const char __pyx_k_izip[] = "izip";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_objs[] = "objs";
static const char __pyx_k_path[] = "path";
static const char __pyx_k_ptrs[] = "ptrs";
static const char __pyx_k_self[] = "self";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_text[] = "text";
static const char __pyx_k_utf8[] = "utf8";
static const char __pyx_k_vals[] = "vals";
static const char __pyx_k_xfxQ[] = "xfxQ";
static const char __pyx_k_FIXED[] = "FIXED";
static const char __pyx_k_aschk[] = "aschk";
static const char __pyx_k_mkPDF[] = "mkPDF";
static const char __pyx_k_paths[] = "paths";
static const char __pyx_k_print[] = "print";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_scale[] = "scale";
static const char __pyx_k_valsA[] = "valsA";
static const char __pyx_k_valsB[] = "valsB";
static const char __pyx_k_value[] = "value";
static const char __pyx_k_xfxQ2[] = "xfxQ2";
static const char __pyx_k_encode[] = "encode";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_lhapdf[] = "lhapdf";
static const char __pyx_k_mkPDFs[] = "mkPDFs";
static const char __pyx_k_module[] = "__module__";
static const char __pyx_k_newpdf[] = "newpdf";
static const char __pyx_k_scheme[] = "scheme";
static const char __pyx_k_vlevel[] = "vlevel";
static const char __pyx_k_xrange[] = "xrange";
static const char __pyx_k_as_type[] = "as_type";
static const char __pyx_k_basepdf[] = "basepdf";
static const char __pyx_k_central[] = "central";
static const char __pyx_k_err_par[] = "err_par";
static const char __pyx_k_errplus[] = "errplus";
static const char __pyx_k_errsymm[] = "errsymm";
static const char __pyx_k_flavors[] = "flavors";
static const char __pyx_k_newpath[] = "newpath";
static const char __pyx_k_prepare[] = "__prepare__";
static const char __pyx_k_randoms[] = "randoms";
static const char __pyx_k_setname[] = "setname";
static const char __pyx_k_version[] = "version";
static const char __pyx_k_VARIABLE[] = "VARIABLE";
static const char __pyx_k_errminus[] = "errminus";
static const char __pyx_k_fallback[] = "fallback";
static const char __pyx_k_mkAlphaS[] = "mkAlphaS";
static const char __pyx_k_newpaths[] = "newpaths";
static const char __pyx_k_qualname[] = "__qualname__";
static const char __pyx_k_setPaths[] = "setPaths";
static const char __pyx_k_weightxQ[] = "weightxQ";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_getConfig[] = "getConfig";
static const char __pyx_k_getPDFSet[] = "getPDFSet";
static const char __pyx_k_itertools[] = "itertools";
static const char __pyx_k_metaclass[] = "__metaclass__";
static const char __pyx_k_verbosity[] = "verbosity";
static const char __pyx_k_version_2[] = "__version__";
static const char __pyx_k_weightxQ2[] = "weightxQ2";
static const char __pyx_k_weightxxQ[] = "weightxxQ";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_symmetrise[] = "symmetrise";
static const char __pyx_k_weightxxQ2[] = "weightxxQ2";
static const char __pyx_k_ImportError[] = "ImportError";
static const char __pyx_k_alternative[] = "alternative";
static const char __pyx_k_arg0_string[] = "arg0_string";
static const char __pyx_k_errplus_pdf[] = "errplus_pdf";
static const char __pyx_k_errsymm_pdf[] = "errsymm_pdf";
static const char __pyx_k_pathsAppend[] = "pathsAppend";
static const char __pyx_k_text_encode[] = "text_encode";
static const char __pyx_k_errminus_pdf[] = "errminus_pdf";
static const char __pyx_k_mkBareAlphaS[] = "mkBareAlphaS";
static const char __pyx_k_pathsPrepend[] = "pathsPrepend";
static const char __pyx_k_setVerbosity[] = "setVerbosity";
static const char __pyx_k_PDFUncertainty[] = "PDFUncertainty";
static const char __pyx_k_availablePDFSets[] = "availablePDFSets";
static const char __pyx_k_Requires_text_input[] = "Requires text input";
static const char __pyx_k_PDFUncertainty___init[] = "PDFUncertainty.__init__";
static const char __pyx_k_Unknown_call_signature[] = "Unknown call signature";
static const char __pyx_k_A_simple_struct_containing_comp[] = "    A simple struct containing components of a value with uncertainties calculated\n    from a PDF set. Attributes are central, errplus, errminus, errsymm, and scale.\n    Extra attributes to return the separate PDF and parameter errors for combined\n    PDF+parameter sets are errplus_pdf, errminus_pdf, errsymm_pdf and err_par.\n    ";
static const char __pyx_k_Wrong_number_of_arguments_given[] = "Wrong number of arguments given to xfxQ: 2 or 3 required, %d provided";
static const char __pyx_k_home_andy_proj_hep_lhapdf6_wrap[] = "/home/andy/proj/hep/lhapdf6/wrappers/python/lhapdf.pyx";
static const char __pyx_k_You_can_only_set_the_flavor_sche[] = "You can only set the flavor scheme to FIXED or VARIABLE";
static const char __pyx_k_Wrong_number_of_arguments_given_2[] = "Wrong number of arguments given to xfxQ2: 2 or 3 required, %d provided";
static PyObject *__pyx_kp_s_A_simple_struct_containing_comp;
static PyObject *__pyx_n_s_FIXED;
static PyObject *__pyx_n_s_ImportError;
static PyObject *__pyx_n_s_PDFUncertainty;
static PyObject *__pyx_n_s_PDFUncertainty___init;
static PyObject *__pyx_n_s_Q;
static PyObject *__pyx_n_s_Q2;
static PyObject *__pyx_kp_s_Requires_text_input;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_kp_s_Unknown_call_signature;
static PyObject *__pyx_n_s_VARIABLE;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_kp_s_Wrong_number_of_arguments_given;
static PyObject *__pyx_kp_s_Wrong_number_of_arguments_given_2;
static PyObject *__pyx_kp_s_You_can_only_set_the_flavor_sche;
static PyObject *__pyx_n_s_alternative;
static PyObject *__pyx_n_s_arg0_string;
static PyObject *__pyx_n_s_args;
static PyObject *__pyx_n_s_as_type;
static PyObject *__pyx_n_s_aschk;
static PyObject *__pyx_n_s_availablePDFSets;
static PyObject *__pyx_n_s_basepdf;
static PyObject *__pyx_n_s_central;
static PyObject *__pyx_n_s_cl;
static PyObject *__pyx_n_s_doc;
static PyObject *__pyx_n_s_encode;
static PyObject *__pyx_n_s_end;
static PyObject *__pyx_n_s_err_par;
static PyObject *__pyx_n_s_errminus;
static PyObject *__pyx_n_s_errminus_pdf;
static PyObject *__pyx_n_s_errplus;
static PyObject *__pyx_n_s_errplus_pdf;
static PyObject *__pyx_n_s_errsymm;
static PyObject *__pyx_n_s_errsymm_pdf;
static PyObject *__pyx_n_s_fallback;
static PyObject *__pyx_n_s_file;
static PyObject *__pyx_n_s_flavors;
static PyObject *__pyx_n_s_getConfig;
static PyObject *__pyx_n_s_getPDFSet;
static PyObject *__pyx_kp_s_home_andy_proj_hep_lhapdf6_wrap;
static PyObject *__pyx_n_s_id;
static PyObject *__pyx_n_s_id1;
static PyObject *__pyx_n_s_id2;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_init;
static PyObject *__pyx_n_s_itertools;
static PyObject *__pyx_n_s_izip;
static PyObject *__pyx_n_s_key;
static PyObject *__pyx_n_s_lhapdf;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_metaclass;
static PyObject *__pyx_n_s_mkAlphaS;
static PyObject *__pyx_n_s_mkBareAlphaS;
static PyObject *__pyx_n_s_mkPDF;
static PyObject *__pyx_n_s_mkPDFs;
static PyObject *__pyx_n_s_module;
static PyObject *__pyx_n_s_newpath;
static PyObject *__pyx_n_s_newpaths;
static PyObject *__pyx_n_s_newpdf;
static PyObject *__pyx_n_s_nf;
static PyObject *__pyx_n_s_obj;
static PyObject *__pyx_n_s_objs;
static PyObject *__pyx_n_s_path;
static PyObject *__pyx_n_s_paths;
static PyObject *__pyx_n_s_pathsAppend;
static PyObject *__pyx_n_s_pathsPrepend;
static PyObject *__pyx_n_s_prepare;
static PyObject *__pyx_n_s_print;
static PyObject *__pyx_n_s_ptr;
static PyObject *__pyx_n_s_ptrs;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_q;
static PyObject *__pyx_n_s_q2;
static PyObject *__pyx_n_s_qualname;
static PyObject *__pyx_n_s_randoms;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_scale;
static PyObject *__pyx_n_s_scheme;
static PyObject *__pyx_n_s_self;
static PyObject *__pyx_n_s_setPaths;
static PyObject *__pyx_n_s_setVerbosity;
static PyObject *__pyx_n_s_setname;
static PyObject *__pyx_n_s_symmetrise;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_text;
static PyObject *__pyx_n_s_text_encode;
static PyObject *__pyx_n_s_utf8;
static PyObject *__pyx_n_s_val;
static PyObject *__pyx_n_s_vals;
static PyObject *__pyx_n_s_valsA;
static PyObject *__pyx_n_s_valsB;
static PyObject *__pyx_n_s_value;
static PyObject *__pyx_n_s_verbosity;
static PyObject *__pyx_n_s_version;
static PyObject *__pyx_n_s_version_2;
static PyObject *__pyx_n_s_vlevel;
static PyObject *__pyx_n_s_weightxQ;
static PyObject *__pyx_n_s_weightxQ2;
static PyObject *__pyx_n_s_weightxxQ;
static PyObject *__pyx_n_s_weightxxQ2;
static PyObject *__pyx_n_s_x;
static PyObject *__pyx_n_s_x1;
static PyObject *__pyx_n_s_x2;
static PyObject *__pyx_n_s_xfxQ;
static PyObject *__pyx_n_s_xfxQ2;
static PyObject *__pyx_n_s_xrange;
static PyObject *__pyx_n_s_zip;
static PyObject *__pyx_pf_6lhapdf_text_encode(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_text); /* proto */
static void __pyx_pf_6lhapdf_3PDF___dealloc__(struct __pyx_obj_6lhapdf_PDF *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6lhapdf_3PDF_8memberID___get__(struct __pyx_obj_6lhapdf_PDF *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6lhapdf_3PDF_8lhapdfID___get__(struct __pyx_obj_6lhapdf_PDF *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6lhapdf_3PDF_4type___get__(struct __pyx_obj_6lhapdf_PDF *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6lhapdf_3PDF_11description___get__(struct __pyx_obj_6lhapdf_PDF *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6lhapdf_3PDF_8orderQCD___get__(struct __pyx_obj_6lhapdf_PDF *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6lhapdf_3PDF_4xMin___get__(struct __pyx_obj_6lhapdf_PDF *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6lhapdf_3PDF_4xMax___get__(struct __pyx_obj_6lhapdf_PDF *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6lhapdf_3PDF_5q2Min___get__(struct __pyx_obj_6lhapdf_PDF *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6lhapdf_3PDF_5q2Max___get__(struct __pyx_obj_6lhapdf_PDF *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6lhapdf_3PDF_2alphasQ(struct __pyx_obj_6lhapdf_PDF *__pyx_v_self, PyObject *__pyx_v_q); /* proto */
static PyObject *__pyx_pf_6lhapdf_3PDF_4alphasQ2(struct __pyx_obj_6lhapdf_PDF *__pyx_v_self, PyObject *__pyx_v_q2); /* proto */
static PyObject *__pyx_pf_6lhapdf_3PDF_6xfxQ(struct __pyx_obj_6lhapdf_PDF *__pyx_v_self, PyObject *__pyx_v_args); /* proto */
static PyObject *__pyx_pf_6lhapdf_3PDF_8xfxQ2(struct __pyx_obj_6lhapdf_PDF *__pyx_v_self, PyObject *__pyx_v_args); /* proto */
static PyObject *__pyx_pf_6lhapdf_3PDF_10inRangeQ(struct __pyx_obj_6lhapdf_PDF *__pyx_v_self, PyObject *__pyx_v_q); /* proto */
static PyObject *__pyx_pf_6lhapdf_3PDF_12inRangeQ2(struct __pyx_obj_6lhapdf_PDF *__pyx_v_self, PyObject *__pyx_v_q2); /* proto */
static PyObject *__pyx_pf_6lhapdf_3PDF_14inRangeX(struct __pyx_obj_6lhapdf_PDF *__pyx_v_self, PyObject *__pyx_v_x); /* proto */
static PyObject *__pyx_pf_6lhapdf_3PDF_16inRangeXQ(struct __pyx_obj_6lhapdf_PDF *__pyx_v_self, PyObject *__pyx_v_x, PyObject *__pyx_v_q); /* proto */
static PyObject *__pyx_pf_6lhapdf_3PDF_18inRangeXQ2(struct __pyx_obj_6lhapdf_PDF *__pyx_v_self, PyObject *__pyx_v_x, PyObject *__pyx_v_q2); /* proto */
static PyObject *__pyx_pf_6lhapdf_3PDF_20flavors(struct __pyx_obj_6lhapdf_PDF *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6lhapdf_3PDF_22hasFlavor(struct __pyx_obj_6lhapdf_PDF *__pyx_v_self, PyObject *__pyx_v_pid); /* proto */
static PyObject *__pyx_pf_6lhapdf_3PDF_24quarkMass(struct __pyx_obj_6lhapdf_PDF *__pyx_v_self, int __pyx_v_id); /* proto */
static PyObject *__pyx_pf_6lhapdf_3PDF_26quarkThreshold(struct __pyx_obj_6lhapdf_PDF *__pyx_v_self, int __pyx_v_id); /* proto */
static PyObject *__pyx_pf_6lhapdf_3PDF_28set(struct __pyx_obj_6lhapdf_PDF *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6lhapdf_3PDF_30info(struct __pyx_obj_6lhapdf_PDF *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6lhapdf_3PDF_32_print(struct __pyx_obj_6lhapdf_PDF *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6lhapdf_4Info_has_key(struct __pyx_obj_6lhapdf_Info *__pyx_v_self, PyObject *__pyx_v_key); /* proto */
static PyObject *__pyx_pf_6lhapdf_4Info_2has_key_local(struct __pyx_obj_6lhapdf_Info *__pyx_v_self, PyObject *__pyx_v_key); /* proto */
static PyObject *__pyx_pf_6lhapdf_4Info_4get_entry(struct __pyx_obj_6lhapdf_Info *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_v_fallback); /* proto */
static PyObject *__pyx_pf_6lhapdf_4Info_6set_entry(struct __pyx_obj_6lhapdf_Info *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6lhapdf_14PDFUncertainty___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_central, PyObject *__pyx_v_errplus, PyObject *__pyx_v_errminus, PyObject *__pyx_v_errsymm, PyObject *__pyx_v_scale, PyObject *__pyx_v_errplus_pdf, PyObject *__pyx_v_errminus_pdf, PyObject *__pyx_v_errsymm_pdf, PyObject *__pyx_v_err_par); /* proto */
static void __pyx_pf_6lhapdf_6PDFSet___dealloc__(CYTHON_UNUSED struct __pyx_obj_6lhapdf_PDFSet *__pyx_v_self); /* proto */
static Py_ssize_t __pyx_pf_6lhapdf_6PDFSet_2__len__(struct __pyx_obj_6lhapdf_PDFSet *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6lhapdf_6PDFSet_4size___get__(struct __pyx_obj_6lhapdf_PDFSet *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6lhapdf_6PDFSet_4name___get__(struct __pyx_obj_6lhapdf_PDFSet *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6lhapdf_6PDFSet_11description___get__(struct __pyx_obj_6lhapdf_PDFSet *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6lhapdf_6PDFSet_8lhapdfID___get__(struct __pyx_obj_6lhapdf_PDFSet *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6lhapdf_6PDFSet_11dataversion___get__(struct __pyx_obj_6lhapdf_PDFSet *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6lhapdf_6PDFSet_9errorType___get__(struct __pyx_obj_6lhapdf_PDFSet *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6lhapdf_6PDFSet_14errorConfLevel___get__(struct __pyx_obj_6lhapdf_PDFSet *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6lhapdf_6PDFSet_4mkPDF(struct __pyx_obj_6lhapdf_PDFSet *__pyx_v_self, PyObject *__pyx_v_mem); /* proto */
static PyObject *__pyx_pf_6lhapdf_6PDFSet_6mkPDFs(struct __pyx_obj_6lhapdf_PDFSet *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6lhapdf_6PDFSet_8has_key(struct __pyx_obj_6lhapdf_PDFSet *__pyx_v_self, PyObject *__pyx_v_key); /* proto */
static PyObject *__pyx_pf_6lhapdf_6PDFSet_10has_key_local(struct __pyx_obj_6lhapdf_PDFSet *__pyx_v_self, PyObject *__pyx_v_key); /* proto */
static PyObject *__pyx_pf_6lhapdf_6PDFSet_12get_entry(struct __pyx_obj_6lhapdf_PDFSet *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_v_fallback); /* proto */
static PyObject *__pyx_pf_6lhapdf_6PDFSet_14_print(struct __pyx_obj_6lhapdf_PDFSet *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6lhapdf_6PDFSet_16uncertainty(struct __pyx_obj_6lhapdf_PDFSet *__pyx_v_self, PyObject *__pyx_v_vals, PyObject *__pyx_v_cl, PyObject *__pyx_v_alternative); /* proto */
static PyObject *__pyx_pf_6lhapdf_6PDFSet_18correlation(struct __pyx_obj_6lhapdf_PDFSet *__pyx_v_self, PyObject *__pyx_v_valsA, PyObject *__pyx_v_valsB); /* proto */
static PyObject *__pyx_pf_6lhapdf_6PDFSet_20randomValueFromHessian(struct __pyx_obj_6lhapdf_PDFSet *__pyx_v_self, PyObject *__pyx_v_vals, PyObject *__pyx_v_randoms, PyObject *__pyx_v_symmetrise); /* proto */
static PyObject *__pyx_pf_6lhapdf_6PDFSet_22_checkPdfType(struct __pyx_obj_6lhapdf_PDFSet *__pyx_v_self, PyObject *__pyx_v_pdftypes); /* proto */
static PyObject *__pyx_pf_6lhapdf_7PDFInfo_has_key(struct __pyx_obj_6lhapdf_PDFInfo *__pyx_v_self, PyObject *__pyx_v_key); /* proto */
static PyObject *__pyx_pf_6lhapdf_7PDFInfo_2has_key_local(struct __pyx_obj_6lhapdf_PDFInfo *__pyx_v_self, PyObject *__pyx_v_key); /* proto */
static PyObject *__pyx_pf_6lhapdf_7PDFInfo_4get_entry(struct __pyx_obj_6lhapdf_PDFInfo *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_v_fallback); /* proto */
static void __pyx_pf_6lhapdf_6AlphaS___dealloc__(struct __pyx_obj_6lhapdf_AlphaS *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6lhapdf_6AlphaS_4type___get__(struct __pyx_obj_6lhapdf_AlphaS *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6lhapdf_6AlphaS_2alphasQ(struct __pyx_obj_6lhapdf_AlphaS *__pyx_v_self, double __pyx_v_q); /* proto */
static PyObject *__pyx_pf_6lhapdf_6AlphaS_4alphasQ2(struct __pyx_obj_6lhapdf_AlphaS *__pyx_v_self, double __pyx_v_q2); /* proto */
static PyObject *__pyx_pf_6lhapdf_6AlphaS_6numFlavorsQ(struct __pyx_obj_6lhapdf_AlphaS *__pyx_v_self, double __pyx_v_q); /* proto */
static PyObject *__pyx_pf_6lhapdf_6AlphaS_8numFlavorsQ2(struct __pyx_obj_6lhapdf_AlphaS *__pyx_v_self, double __pyx_v_q2); /* proto */
static PyObject *__pyx_pf_6lhapdf_6AlphaS_10quarkMass(struct __pyx_obj_6lhapdf_AlphaS *__pyx_v_self, int __pyx_v_id); /* proto */
static PyObject *__pyx_pf_6lhapdf_6AlphaS_12setQuarkMass(struct __pyx_obj_6lhapdf_AlphaS *__pyx_v_self, int __pyx_v_id, double __pyx_v_value); /* proto */
static PyObject *__pyx_pf_6lhapdf_6AlphaS_14quarkThreshold(struct __pyx_obj_6lhapdf_AlphaS *__pyx_v_self, int __pyx_v_id); /* proto */
static PyObject *__pyx_pf_6lhapdf_6AlphaS_16setQuarkThreshold(struct __pyx_obj_6lhapdf_AlphaS *__pyx_v_self, int __pyx_v_id, double __pyx_v_value); /* proto */
static PyObject *__pyx_pf_6lhapdf_6AlphaS_18orderQCD(struct __pyx_obj_6lhapdf_AlphaS *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6lhapdf_6AlphaS_20setOrderQCD(struct __pyx_obj_6lhapdf_AlphaS *__pyx_v_self, int __pyx_v_order); /* proto */
static PyObject *__pyx_pf_6lhapdf_6AlphaS_22setMZ(struct __pyx_obj_6lhapdf_AlphaS *__pyx_v_self, double __pyx_v_mz); /* proto */
static PyObject *__pyx_pf_6lhapdf_6AlphaS_24setAlphaSMZ(struct __pyx_obj_6lhapdf_AlphaS *__pyx_v_self, double __pyx_v_alphas); /* proto */
static PyObject *__pyx_pf_6lhapdf_6AlphaS_26setLambda(struct __pyx_obj_6lhapdf_AlphaS *__pyx_v_self, int __pyx_v_id, double __pyx_v_val); /* proto */
static PyObject *__pyx_pf_6lhapdf_6AlphaS_28setFlavorScheme(struct __pyx_obj_6lhapdf_AlphaS *__pyx_v_self, PyObject *__pyx_v_scheme, int __pyx_v_nf); /* proto */
static PyObject *__pyx_pf_6lhapdf_6AlphaS_30flavorScheme(struct __pyx_obj_6lhapdf_AlphaS *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6lhapdf_2getConfig(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_6lhapdf_4getPDFSet(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_setname); /* proto */
static PyObject *__pyx_pf_6lhapdf_6mkPDFs(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_setname); /* proto */
static PyObject *__pyx_pf_6lhapdf_8mkPDF(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_args); /* proto */
static PyObject *__pyx_pf_6lhapdf_10mkAlphaS(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_args); /* proto */
static PyObject *__pyx_pf_6lhapdf_12mkBareAlphaS(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_as_type); /* proto */
static PyObject *__pyx_pf_6lhapdf_14weightxQ(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_id, double __pyx_v_x, double __pyx_v_Q, struct __pyx_obj_6lhapdf_PDF *__pyx_v_basepdf, struct __pyx_obj_6lhapdf_PDF *__pyx_v_newpdf, PyObject *__pyx_v_aschk); /* proto */
static PyObject *__pyx_pf_6lhapdf_16weightxQ2(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_id, double __pyx_v_x, double __pyx_v_Q2, struct __pyx_obj_6lhapdf_PDF *__pyx_v_basepdf, struct __pyx_obj_6lhapdf_PDF *__pyx_v_newpdf, PyObject *__pyx_v_aschk); /* proto */
static PyObject *__pyx_pf_6lhapdf_18weightxxQ(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_id1, int __pyx_v_id2, double __pyx_v_x1, double __pyx_v_x2, double __pyx_v_Q, struct __pyx_obj_6lhapdf_PDF *__pyx_v_basepdf, struct __pyx_obj_6lhapdf_PDF *__pyx_v_newpdf, PyObject *__pyx_v_aschk); /* proto */
static PyObject *__pyx_pf_6lhapdf_20weightxxQ2(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_id1, int __pyx_v_id2, double __pyx_v_x1, double __pyx_v_x2, double __pyx_v_Q2, struct __pyx_obj_6lhapdf_PDF *__pyx_v_basepdf, struct __pyx_obj_6lhapdf_PDF *__pyx_v_newpdf, PyObject *__pyx_v_aschk); /* proto */
static PyObject *__pyx_pf_6lhapdf_22version(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_6lhapdf_24verbosity(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_6lhapdf_26setVerbosity(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_vlevel); /* proto */
static PyObject *__pyx_pf_6lhapdf_28availablePDFSets(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_6lhapdf_30paths(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_6lhapdf_32setPaths(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_newpaths); /* proto */
static PyObject *__pyx_pf_6lhapdf_34pathsPrepend(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_newpath); /* proto */
static PyObject *__pyx_pf_6lhapdf_36pathsAppend(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_newpath); /* proto */
static PyObject *__pyx_tp_new_6lhapdf_PDF(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6lhapdf_Info(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6lhapdf_PDFSet(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6lhapdf_PDFInfo(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6lhapdf_AlphaS(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_float_0_0;
static PyObject *__pyx_float_5eneg_2;
static PyObject *__pyx_float_68_268949;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_tuple__18;
static PyObject *__pyx_tuple__20;
static PyObject *__pyx_tuple__22;
static PyObject *__pyx_tuple__24;
static PyObject *__pyx_tuple__26;
static PyObject *__pyx_tuple__28;
static PyObject *__pyx_tuple__32;
static PyObject *__pyx_tuple__36;
static PyObject *__pyx_tuple__38;
static PyObject *__pyx_tuple__40;
static PyObject *__pyx_codeobj__6;
static PyObject *__pyx_codeobj__8;
static PyObject *__pyx_codeobj__11;
static PyObject *__pyx_codeobj__13;
static PyObject *__pyx_codeobj__15;
static PyObject *__pyx_codeobj__17;
static PyObject *__pyx_codeobj__19;
static PyObject *__pyx_codeobj__21;
static PyObject *__pyx_codeobj__23;
static PyObject *__pyx_codeobj__25;
static PyObject *__pyx_codeobj__27;
static PyObject *__pyx_codeobj__29;
static PyObject *__pyx_codeobj__30;
static PyObject *__pyx_codeobj__31;
static PyObject *__pyx_codeobj__33;
static PyObject *__pyx_codeobj__34;
static PyObject *__pyx_codeobj__35;
static PyObject *__pyx_codeobj__37;
static PyObject *__pyx_codeobj__39;
static PyObject *__pyx_codeobj__41;

/* "lhapdf.pyx":16
 *     FIXED, VARIABLE
 * 
 * def text_encode(text):             # <<<<<<<<<<<<<<
 *     if isinstance(text, unicode):
 *         return text.encode('utf8')
 */

/* Python wrapper */
static PyObject *__pyx_pw_6lhapdf_1text_encode(PyObject *__pyx_self, PyObject *__pyx_v_text); /*proto*/
static char __pyx_doc_6lhapdf_text_encode[] = "text_encode(text)";
static PyMethodDef __pyx_mdef_6lhapdf_1text_encode = {"text_encode", (PyCFunction)__pyx_pw_6lhapdf_1text_encode, METH_O, __pyx_doc_6lhapdf_text_encode};
static PyObject *__pyx_pw_6lhapdf_1text_encode(PyObject *__pyx_self, PyObject *__pyx_v_text) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("text_encode (wrapper)", 0);
  __pyx_r = __pyx_pf_6lhapdf_text_encode(__pyx_self, ((PyObject *)__pyx_v_text));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6lhapdf_text_encode(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_text) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("text_encode", 0);

  /* "lhapdf.pyx":17
 * 
 * def text_encode(text):
 *     if isinstance(text, unicode):             # <<<<<<<<<<<<<<
 *         return text.encode('utf8')
 *     elif isinstance(text, bytes):
 */
  __pyx_t_1 = PyUnicode_Check(__pyx_v_text); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "lhapdf.pyx":18
 * def text_encode(text):
 *     if isinstance(text, unicode):
 *         return text.encode('utf8')             # <<<<<<<<<<<<<<
 *     elif isinstance(text, bytes):
 *         return text
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_text, __pyx_n_s_encode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 18, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 18, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "lhapdf.pyx":17
 * 
 * def text_encode(text):
 *     if isinstance(text, unicode):             # <<<<<<<<<<<<<<
 *         return text.encode('utf8')
 *     elif isinstance(text, bytes):
 */
  }

  /* "lhapdf.pyx":19
 *     if isinstance(text, unicode):
 *         return text.encode('utf8')
 *     elif isinstance(text, bytes):             # <<<<<<<<<<<<<<
 *         return text
 *     else:
 */
  __pyx_t_2 = PyBytes_Check(__pyx_v_text); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "lhapdf.pyx":20
 *         return text.encode('utf8')
 *     elif isinstance(text, bytes):
 *         return text             # <<<<<<<<<<<<<<
 *     else:
 *         raise ValueError("Requires text input")
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_text);
    __pyx_r = __pyx_v_text;
    goto __pyx_L0;

    /* "lhapdf.pyx":19
 *     if isinstance(text, unicode):
 *         return text.encode('utf8')
 *     elif isinstance(text, bytes):             # <<<<<<<<<<<<<<
 *         return text
 *     else:
 */
  }

  /* "lhapdf.pyx":22
 *         return text
 *     else:
 *         raise ValueError("Requires text input")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 22, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 22, __pyx_L1_error)
  }

  /* "lhapdf.pyx":16
 *     FIXED, VARIABLE
 * 
 * def text_encode(text):             # <<<<<<<<<<<<<<
 *     if isinstance(text, unicode):
 *         return text.encode('utf8')
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("lhapdf.text_encode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lhapdf.pyx":32
 *     """
 *     cdef c.PDF* _ptr
 *     cdef set_ptr(self, c.PDF* ptr):             # <<<<<<<<<<<<<<
 *         self._ptr = ptr
 * 
 */

static PyObject *__pyx_f_6lhapdf_3PDF_set_ptr(struct __pyx_obj_6lhapdf_PDF *__pyx_v_self, LHAPDF::PDF *__pyx_v_ptr) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_ptr", 0);

  /* "lhapdf.pyx":33
 *     cdef c.PDF* _ptr
 *     cdef set_ptr(self, c.PDF* ptr):
 *         self._ptr = ptr             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_v_self->_ptr = __pyx_v_ptr;

  /* "lhapdf.pyx":32
 *     """
 *     cdef c.PDF* _ptr
 *     cdef set_ptr(self, c.PDF* ptr):             # <<<<<<<<<<<<<<
 *         self._ptr = ptr
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lhapdf.pyx":35
 *         self._ptr = ptr
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self._ptr
 * 
 */

/* Python wrapper */
static void __pyx_pw_6lhapdf_3PDF_1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_6lhapdf_3PDF_1__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_6lhapdf_3PDF___dealloc__(((struct __pyx_obj_6lhapdf_PDF *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_6lhapdf_3PDF___dealloc__(struct __pyx_obj_6lhapdf_PDF *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "lhapdf.pyx":36
 * 
 *     def __dealloc__(self):
 *         del self._ptr             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  delete __pyx_v_self->_ptr;

  /* "lhapdf.pyx":35
 *         self._ptr = ptr
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self._ptr
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "lhapdf.pyx":39
 * 
 *     @property
 *     def memberID(self):             # <<<<<<<<<<<<<<
 *         "The PDF set member number of this PDF."
 *         return self._ptr.memberID()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6lhapdf_3PDF_8memberID_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6lhapdf_3PDF_8memberID_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6lhapdf_3PDF_8memberID___get__(((struct __pyx_obj_6lhapdf_PDF *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6lhapdf_3PDF_8memberID___get__(struct __pyx_obj_6lhapdf_PDF *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "lhapdf.pyx":41
 *     def memberID(self):
 *         "The PDF set member number of this PDF."
 *         return self._ptr.memberID()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->_ptr->memberID();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 41, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 41, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "lhapdf.pyx":39
 * 
 *     @property
 *     def memberID(self):             # <<<<<<<<<<<<<<
 *         "The PDF set member number of this PDF."
 *         return self._ptr.memberID()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("lhapdf.PDF.memberID.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lhapdf.pyx":44
 * 
 *     @property
 *     def lhapdfID(self):             # <<<<<<<<<<<<<<
 *         "The LHAPDF ID number of this PDF member."
 *         return self._ptr.lhapdfID()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6lhapdf_3PDF_8lhapdfID_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6lhapdf_3PDF_8lhapdfID_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6lhapdf_3PDF_8lhapdfID___get__(((struct __pyx_obj_6lhapdf_PDF *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6lhapdf_3PDF_8lhapdfID___get__(struct __pyx_obj_6lhapdf_PDF *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "lhapdf.pyx":46
 *     def lhapdfID(self):
 *         "The LHAPDF ID number of this PDF member."
 *         return self._ptr.lhapdfID()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->_ptr->lhapdfID();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 46, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 46, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "lhapdf.pyx":44
 * 
 *     @property
 *     def lhapdfID(self):             # <<<<<<<<<<<<<<
 *         "The LHAPDF ID number of this PDF member."
 *         return self._ptr.lhapdfID()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("lhapdf.PDF.lhapdfID.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lhapdf.pyx":49
 * 
 *     @property
 *     def type(self):             # <<<<<<<<<<<<<<
 *         "The type of PDF member, e.g. central, error."
 *         return self._ptr.type()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6lhapdf_3PDF_4type_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6lhapdf_3PDF_4type_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6lhapdf_3PDF_4type___get__(((struct __pyx_obj_6lhapdf_PDF *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6lhapdf_3PDF_4type___get__(struct __pyx_obj_6lhapdf_PDF *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "lhapdf.pyx":51
 *     def type(self):
 *         "The type of PDF member, e.g. central, error."
 *         return self._ptr.type()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->_ptr->type();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 51, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_convert_PyStr_string_to_py_std__in_string(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 51, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "lhapdf.pyx":49
 * 
 *     @property
 *     def type(self):             # <<<<<<<<<<<<<<
 *         "The type of PDF member, e.g. central, error."
 *         return self._ptr.type()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("lhapdf.PDF.type.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lhapdf.pyx":54
 * 
 *     @property
 *     def description(self):             # <<<<<<<<<<<<<<
 *         "Description of this PDF member."
 *         return self._ptr.description()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6lhapdf_3PDF_11description_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6lhapdf_3PDF_11description_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6lhapdf_3PDF_11description___get__(((struct __pyx_obj_6lhapdf_PDF *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6lhapdf_3PDF_11description___get__(struct __pyx_obj_6lhapdf_PDF *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "lhapdf.pyx":56
 *     def description(self):
 *         "Description of this PDF member."
 *         return self._ptr.description()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->_ptr->description();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 56, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_convert_PyStr_string_to_py_std__in_string(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "lhapdf.pyx":54
 * 
 *     @property
 *     def description(self):             # <<<<<<<<<<<<<<
 *         "Description of this PDF member."
 *         return self._ptr.description()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("lhapdf.PDF.description.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lhapdf.pyx":59
 * 
 *     @property
 *     def orderQCD(self):             # <<<<<<<<<<<<<<
 *         "Max number of loops involved in this PDF's evolution."
 *         return self._ptr.orderQCD()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6lhapdf_3PDF_8orderQCD_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6lhapdf_3PDF_8orderQCD_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6lhapdf_3PDF_8orderQCD___get__(((struct __pyx_obj_6lhapdf_PDF *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6lhapdf_3PDF_8orderQCD___get__(struct __pyx_obj_6lhapdf_PDF *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "lhapdf.pyx":61
 *     def orderQCD(self):
 *         "Max number of loops involved in this PDF's evolution."
 *         return self._ptr.orderQCD()             # <<<<<<<<<<<<<<
 *     # Alias
 *     #qcdOrder = orderQCD
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->_ptr->orderQCD();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 61, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "lhapdf.pyx":59
 * 
 *     @property
 *     def orderQCD(self):             # <<<<<<<<<<<<<<
 *         "Max number of loops involved in this PDF's evolution."
 *         return self._ptr.orderQCD()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("lhapdf.PDF.orderQCD.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lhapdf.pyx":66
 * 
 *     @property
 *     def xMin(self):             # <<<<<<<<<<<<<<
 *         "Minimum valid value of x to be used with this PDF"
 *         return self._ptr.xMin()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6lhapdf_3PDF_4xMin_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6lhapdf_3PDF_4xMin_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6lhapdf_3PDF_4xMin___get__(((struct __pyx_obj_6lhapdf_PDF *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6lhapdf_3PDF_4xMin___get__(struct __pyx_obj_6lhapdf_PDF *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "lhapdf.pyx":68
 *     def xMin(self):
 *         "Minimum valid value of x to be used with this PDF"
 *         return self._ptr.xMin()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_ptr->xMin()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 68, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "lhapdf.pyx":66
 * 
 *     @property
 *     def xMin(self):             # <<<<<<<<<<<<<<
 *         "Minimum valid value of x to be used with this PDF"
 *         return self._ptr.xMin()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("lhapdf.PDF.xMin.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lhapdf.pyx":71
 * 
 *     @property
 *     def xMax(self):             # <<<<<<<<<<<<<<
 *         "Maximum valid value of x to be used with this PDF"
 *         return self._ptr.xMax()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6lhapdf_3PDF_4xMax_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6lhapdf_3PDF_4xMax_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6lhapdf_3PDF_4xMax___get__(((struct __pyx_obj_6lhapdf_PDF *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6lhapdf_3PDF_4xMax___get__(struct __pyx_obj_6lhapdf_PDF *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "lhapdf.pyx":73
 *     def xMax(self):
 *         "Maximum valid value of x to be used with this PDF"
 *         return self._ptr.xMax()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_ptr->xMax()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 73, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "lhapdf.pyx":71
 * 
 *     @property
 *     def xMax(self):             # <<<<<<<<<<<<<<
 *         "Maximum valid value of x to be used with this PDF"
 *         return self._ptr.xMax()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("lhapdf.PDF.xMax.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lhapdf.pyx":76
 * 
 *     @property
 *     def q2Min(self):             # <<<<<<<<<<<<<<
 *         "Minimum valid value of x to be used with this PDF"
 *         return self._ptr.q2Min()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6lhapdf_3PDF_5q2Min_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6lhapdf_3PDF_5q2Min_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6lhapdf_3PDF_5q2Min___get__(((struct __pyx_obj_6lhapdf_PDF *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6lhapdf_3PDF_5q2Min___get__(struct __pyx_obj_6lhapdf_PDF *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "lhapdf.pyx":78
 *     def q2Min(self):
 *         "Minimum valid value of x to be used with this PDF"
 *         return self._ptr.q2Min()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_ptr->q2Min()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 78, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "lhapdf.pyx":76
 * 
 *     @property
 *     def q2Min(self):             # <<<<<<<<<<<<<<
 *         "Minimum valid value of x to be used with this PDF"
 *         return self._ptr.q2Min()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("lhapdf.PDF.q2Min.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lhapdf.pyx":81
 * 
 *     @property
 *     def q2Max(self):             # <<<<<<<<<<<<<<
 *         "Maximum valid value of x to be used with this PDF"
 *         return self._ptr.q2Max()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6lhapdf_3PDF_5q2Max_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6lhapdf_3PDF_5q2Max_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6lhapdf_3PDF_5q2Max___get__(((struct __pyx_obj_6lhapdf_PDF *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6lhapdf_3PDF_5q2Max___get__(struct __pyx_obj_6lhapdf_PDF *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "lhapdf.pyx":83
 *     def q2Max(self):
 *         "Maximum valid value of x to be used with this PDF"
 *         return self._ptr.q2Max()             # <<<<<<<<<<<<<<
 * 
 *     # def alphaS(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_ptr->q2Max()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 83, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "lhapdf.pyx":81
 * 
 *     @property
 *     def q2Max(self):             # <<<<<<<<<<<<<<
 *         "Maximum valid value of x to be used with this PDF"
 *         return self._ptr.q2Max()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("lhapdf.PDF.q2Max.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lhapdf.pyx":92
 *     #     return obj
 * 
 *     def alphasQ(self, q):             # <<<<<<<<<<<<<<
 *         "Return alpha_s at q"
 *         return self._ptr.alphasQ(q)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6lhapdf_3PDF_3alphasQ(PyObject *__pyx_v_self, PyObject *__pyx_v_q); /*proto*/
static char __pyx_doc_6lhapdf_3PDF_2alphasQ[] = "PDF.alphasQ(self, q)\nReturn alpha_s at q";
static PyObject *__pyx_pw_6lhapdf_3PDF_3alphasQ(PyObject *__pyx_v_self, PyObject *__pyx_v_q) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("alphasQ (wrapper)", 0);
  __pyx_r = __pyx_pf_6lhapdf_3PDF_2alphasQ(((struct __pyx_obj_6lhapdf_PDF *)__pyx_v_self), ((PyObject *)__pyx_v_q));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6lhapdf_3PDF_2alphasQ(struct __pyx_obj_6lhapdf_PDF *__pyx_v_self, PyObject *__pyx_v_q) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  double __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("alphasQ", 0);

  /* "lhapdf.pyx":94
 *     def alphasQ(self, q):
 *         "Return alpha_s at q"
 *         return self._ptr.alphasQ(q)             # <<<<<<<<<<<<<<
 * 
 *     def alphasQ2(self, q2):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_q); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 94, __pyx_L1_error)
  try {
    __pyx_t_2 = __pyx_v_self->_ptr->alphasQ(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 94, __pyx_L1_error)
  }
  __pyx_t_3 = PyFloat_FromDouble(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 94, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "lhapdf.pyx":92
 *     #     return obj
 * 
 *     def alphasQ(self, q):             # <<<<<<<<<<<<<<
 *         "Return alpha_s at q"
 *         return self._ptr.alphasQ(q)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("lhapdf.PDF.alphasQ", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lhapdf.pyx":96
 *         return self._ptr.alphasQ(q)
 * 
 *     def alphasQ2(self, q2):             # <<<<<<<<<<<<<<
 *         "Return alpha_s at q2"
 *         return self._ptr.alphasQ2(q2)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6lhapdf_3PDF_5alphasQ2(PyObject *__pyx_v_self, PyObject *__pyx_v_q2); /*proto*/
static char __pyx_doc_6lhapdf_3PDF_4alphasQ2[] = "PDF.alphasQ2(self, q2)\nReturn alpha_s at q2";
static PyObject *__pyx_pw_6lhapdf_3PDF_5alphasQ2(PyObject *__pyx_v_self, PyObject *__pyx_v_q2) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("alphasQ2 (wrapper)", 0);
  __pyx_r = __pyx_pf_6lhapdf_3PDF_4alphasQ2(((struct __pyx_obj_6lhapdf_PDF *)__pyx_v_self), ((PyObject *)__pyx_v_q2));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6lhapdf_3PDF_4alphasQ2(struct __pyx_obj_6lhapdf_PDF *__pyx_v_self, PyObject *__pyx_v_q2) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  double __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("alphasQ2", 0);

  /* "lhapdf.pyx":98
 *     def alphasQ2(self, q2):
 *         "Return alpha_s at q2"
 *         return self._ptr.alphasQ2(q2)             # <<<<<<<<<<<<<<
 * 
 *     def xfxQ(self, *args):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_q2); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 98, __pyx_L1_error)
  try {
    __pyx_t_2 = __pyx_v_self->_ptr->alphasQ2(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 98, __pyx_L1_error)
  }
  __pyx_t_3 = PyFloat_FromDouble(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 98, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "lhapdf.pyx":96
 *         return self._ptr.alphasQ(q)
 * 
 *     def alphasQ2(self, q2):             # <<<<<<<<<<<<<<
 *         "Return alpha_s at q2"
 *         return self._ptr.alphasQ2(q2)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("lhapdf.PDF.alphasQ2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lhapdf.pyx":100
 *         return self._ptr.alphasQ2(q2)
 * 
 *     def xfxQ(self, *args):             # <<<<<<<<<<<<<<
 *         """Return the PDF xf(x,Q2) value for the given parton ID, x, and Q values.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6lhapdf_3PDF_7xfxQ(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6lhapdf_3PDF_6xfxQ[] = "PDF.xfxQ(self, *args)\nReturn the PDF xf(x,Q2) value for the given parton ID, x, and Q values.\n\n        Two forms of arguments are allowed:\n        3-args: (pid, x, q)\n          If all are scalars, a scalar is returned; if pid is a sequence, a list is\n          returned; if x and q are sequences of the same length, they will be zipped\n          and a (maybe nested) list of the return values as for scalar x/q will be returned.\n          If pid is None, behave like the 2-arg version.\n        2-args: (x, q)\n          As for 3 args, but always returning results for all PIDs, as a dict. The return\n          will be many such dicts in a zipped list if x/q are sequences.\n        ";
static PyObject *__pyx_pw_6lhapdf_3PDF_7xfxQ(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("xfxQ (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "xfxQ", 0))) return NULL;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_6lhapdf_3PDF_6xfxQ(((struct __pyx_obj_6lhapdf_PDF *)__pyx_v_self), __pyx_v_args);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6lhapdf_3PDF_6xfxQ(struct __pyx_obj_6lhapdf_PDF *__pyx_v_self, PyObject *__pyx_v_args) {
  PyObject *__pyx_v_pid = NULL;
  PyObject *__pyx_v_x = NULL;
  PyObject *__pyx_v_q = NULL;
  PyObject *__pyx_v_eachx = NULL;
  PyObject *__pyx_v_eachq = NULL;
  PyObject *__pyx_v_eachpid = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *(*__pyx_t_16)(PyObject *);
  PyObject *__pyx_t_17 = NULL;
  PyObject *(*__pyx_t_18)(PyObject *);
  Py_ssize_t __pyx_t_19;
  PyObject *(*__pyx_t_20)(PyObject *);
  double __pyx_t_21;
  double __pyx_t_22;
  double __pyx_t_23;
  PyObject *__pyx_t_24 = NULL;
  PyObject *__pyx_t_25 = NULL;
  PyObject *__pyx_t_26 = NULL;
  __Pyx_RefNannySetupContext("xfxQ", 0);

  /* "lhapdf.pyx":116
 *         # TODO: Reduce duplication between Q and Q2 variants?
 *         # If only we'd used PID as the final arg rather than the first, then we could have made it optional/default None...
 *         if len(args) == 3:             # <<<<<<<<<<<<<<
 *             pid, x, q = args
 *             if pid is None:
 */
  __pyx_t_1 = PyTuple_GET_SIZE(__pyx_v_args); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(0, 116, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_1 == 3) != 0);
  if (__pyx_t_2) {

    /* "lhapdf.pyx":117
 *         # If only we'd used PID as the final arg rather than the first, then we could have made it optional/default None...
 *         if len(args) == 3:
 *             pid, x, q = args             # <<<<<<<<<<<<<<
 *             if pid is None:
 *                 return self.xfxQ(x, q)
 */
    if (1) {
      PyObject* sequence = __pyx_v_args;
      #if !CYTHON_COMPILING_IN_PYPY
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 3)) {
        if (size > 3) __Pyx_RaiseTooManyValuesError(3);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 117, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_5 = PyTuple_GET_ITEM(sequence, 2); 
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      #else
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 117, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 117, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 117, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      #endif
    }
    __pyx_v_pid = __pyx_t_3;
    __pyx_t_3 = 0;
    __pyx_v_x = __pyx_t_4;
    __pyx_t_4 = 0;
    __pyx_v_q = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "lhapdf.pyx":118
 *         if len(args) == 3:
 *             pid, x, q = args
 *             if pid is None:             # <<<<<<<<<<<<<<
 *                 return self.xfxQ(x, q)
 *             try:
 */
    __pyx_t_2 = (__pyx_v_pid == Py_None);
    __pyx_t_6 = (__pyx_t_2 != 0);
    if (__pyx_t_6) {

      /* "lhapdf.pyx":119
 *             pid, x, q = args
 *             if pid is None:
 *                 return self.xfxQ(x, q)             # <<<<<<<<<<<<<<
 *             try:
 *                 try:
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_xfxQ); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 119, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = NULL;
      __pyx_t_7 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
          __pyx_t_7 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_x, __pyx_v_q};
        __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 119, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_GOTREF(__pyx_t_5);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_x, __pyx_v_q};
        __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 119, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_GOTREF(__pyx_t_5);
      } else
      #endif
      {
        __pyx_t_8 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 119, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        if (__pyx_t_3) {
          __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_3); __pyx_t_3 = NULL;
        }
        __Pyx_INCREF(__pyx_v_x);
        __Pyx_GIVEREF(__pyx_v_x);
        PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_v_x);
        __Pyx_INCREF(__pyx_v_q);
        __Pyx_GIVEREF(__pyx_v_q);
        PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_v_q);
        __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_8, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 119, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_r = __pyx_t_5;
      __pyx_t_5 = 0;
      goto __pyx_L0;

      /* "lhapdf.pyx":118
 *         if len(args) == 3:
 *             pid, x, q = args
 *             if pid is None:             # <<<<<<<<<<<<<<
 *                 return self.xfxQ(x, q)
 *             try:
 */
    }

    /* "lhapdf.pyx":120
 *             if pid is None:
 *                 return self.xfxQ(x, q)
 *             try:             # <<<<<<<<<<<<<<
 *                 try:
 *                     return [[self._ptr.xfxQ(eachpid, eachx, eachq) for eachpid in pid] for eachx, eachq in zip(x, q)]
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_9, &__pyx_t_10, &__pyx_t_11);
      __Pyx_XGOTREF(__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_11);
      /*try:*/ {

        /* "lhapdf.pyx":121
 *                 return self.xfxQ(x, q)
 *             try:
 *                 try:             # <<<<<<<<<<<<<<
 *                     return [[self._ptr.xfxQ(eachpid, eachx, eachq) for eachpid in pid] for eachx, eachq in zip(x, q)]
 *                 except TypeError:
 */
        {
          __Pyx_PyThreadState_declare
          __Pyx_PyThreadState_assign
          __Pyx_ExceptionSave(&__pyx_t_12, &__pyx_t_13, &__pyx_t_14);
          __Pyx_XGOTREF(__pyx_t_12);
          __Pyx_XGOTREF(__pyx_t_13);
          __Pyx_XGOTREF(__pyx_t_14);
          /*try:*/ {

            /* "lhapdf.pyx":122
 *             try:
 *                 try:
 *                     return [[self._ptr.xfxQ(eachpid, eachx, eachq) for eachpid in pid] for eachx, eachq in zip(x, q)]             # <<<<<<<<<<<<<<
 *                 except TypeError:
 *                     return [self._ptr.xfxQ(pid, eachx, eachq) for eachx, eachq in zip(x, q)]
 */
            __Pyx_XDECREF(__pyx_r);
            __pyx_t_5 = PyList_New(0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 122, __pyx_L13_error)
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_zip); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 122, __pyx_L13_error)
            __Pyx_GOTREF(__pyx_t_8);
            __pyx_t_3 = NULL;
            __pyx_t_7 = 0;
            if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
              __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_8);
              if (likely(__pyx_t_3)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
                __Pyx_INCREF(__pyx_t_3);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_8, function);
                __pyx_t_7 = 1;
              }
            }
            #if CYTHON_FAST_PYCALL
            if (PyFunction_Check(__pyx_t_8)) {
              PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_x, __pyx_v_q};
              __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_8, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 122, __pyx_L13_error)
              __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
              __Pyx_GOTREF(__pyx_t_4);
            } else
            #endif
            #if CYTHON_FAST_PYCCALL
            if (__Pyx_PyFastCFunction_Check(__pyx_t_8)) {
              PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_x, __pyx_v_q};
              __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_8, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 122, __pyx_L13_error)
              __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
              __Pyx_GOTREF(__pyx_t_4);
            } else
            #endif
            {
              __pyx_t_15 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 122, __pyx_L13_error)
              __Pyx_GOTREF(__pyx_t_15);
              if (__pyx_t_3) {
                __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_15, 0, __pyx_t_3); __pyx_t_3 = NULL;
              }
              __Pyx_INCREF(__pyx_v_x);
              __Pyx_GIVEREF(__pyx_v_x);
              PyTuple_SET_ITEM(__pyx_t_15, 0+__pyx_t_7, __pyx_v_x);
              __Pyx_INCREF(__pyx_v_q);
              __Pyx_GIVEREF(__pyx_v_q);
              PyTuple_SET_ITEM(__pyx_t_15, 1+__pyx_t_7, __pyx_v_q);
              __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_15, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 122, __pyx_L13_error)
              __Pyx_GOTREF(__pyx_t_4);
              __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
            }
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
              __pyx_t_8 = __pyx_t_4; __Pyx_INCREF(__pyx_t_8); __pyx_t_1 = 0;
              __pyx_t_16 = NULL;
            } else {
              __pyx_t_1 = -1; __pyx_t_8 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 122, __pyx_L13_error)
              __Pyx_GOTREF(__pyx_t_8);
              __pyx_t_16 = Py_TYPE(__pyx_t_8)->tp_iternext; if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 122, __pyx_L13_error)
            }
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            for (;;) {
              if (likely(!__pyx_t_16)) {
                if (likely(PyList_CheckExact(__pyx_t_8))) {
                  if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_8)) break;
                  #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                  __pyx_t_4 = PyList_GET_ITEM(__pyx_t_8, __pyx_t_1); __Pyx_INCREF(__pyx_t_4); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 122, __pyx_L13_error)
                  #else
                  __pyx_t_4 = PySequence_ITEM(__pyx_t_8, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 122, __pyx_L13_error)
                  __Pyx_GOTREF(__pyx_t_4);
                  #endif
                } else {
                  if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_8)) break;
                  #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                  __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_8, __pyx_t_1); __Pyx_INCREF(__pyx_t_4); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 122, __pyx_L13_error)
                  #else
                  __pyx_t_4 = PySequence_ITEM(__pyx_t_8, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 122, __pyx_L13_error)
                  __Pyx_GOTREF(__pyx_t_4);
                  #endif
                }
              } else {
                __pyx_t_4 = __pyx_t_16(__pyx_t_8);
                if (unlikely(!__pyx_t_4)) {
                  PyObject* exc_type = PyErr_Occurred();
                  if (exc_type) {
                    if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                    else __PYX_ERR(0, 122, __pyx_L13_error)
                  }
                  break;
                }
                __Pyx_GOTREF(__pyx_t_4);
              }
              if ((likely(PyTuple_CheckExact(__pyx_t_4))) || (PyList_CheckExact(__pyx_t_4))) {
                PyObject* sequence = __pyx_t_4;
                #if !CYTHON_COMPILING_IN_PYPY
                Py_ssize_t size = Py_SIZE(sequence);
                #else
                Py_ssize_t size = PySequence_Size(sequence);
                #endif
                if (unlikely(size != 2)) {
                  if (size > 2) __Pyx_RaiseTooManyValuesError(2);
                  else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
                  __PYX_ERR(0, 122, __pyx_L13_error)
                }
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                if (likely(PyTuple_CheckExact(sequence))) {
                  __pyx_t_15 = PyTuple_GET_ITEM(sequence, 0); 
                  __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
                } else {
                  __pyx_t_15 = PyList_GET_ITEM(sequence, 0); 
                  __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
                }
                __Pyx_INCREF(__pyx_t_15);
                __Pyx_INCREF(__pyx_t_3);
                #else
                __pyx_t_15 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 122, __pyx_L13_error)
                __Pyx_GOTREF(__pyx_t_15);
                __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 122, __pyx_L13_error)
                __Pyx_GOTREF(__pyx_t_3);
                #endif
                __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
              } else {
                Py_ssize_t index = -1;
                __pyx_t_17 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 122, __pyx_L13_error)
                __Pyx_GOTREF(__pyx_t_17);
                __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
                __pyx_t_18 = Py_TYPE(__pyx_t_17)->tp_iternext;
                index = 0; __pyx_t_15 = __pyx_t_18(__pyx_t_17); if (unlikely(!__pyx_t_15)) goto __pyx_L23_unpacking_failed;
                __Pyx_GOTREF(__pyx_t_15);
                index = 1; __pyx_t_3 = __pyx_t_18(__pyx_t_17); if (unlikely(!__pyx_t_3)) goto __pyx_L23_unpacking_failed;
                __Pyx_GOTREF(__pyx_t_3);
                if (__Pyx_IternextUnpackEndCheck(__pyx_t_18(__pyx_t_17), 2) < 0) __PYX_ERR(0, 122, __pyx_L13_error)
                __pyx_t_18 = NULL;
                __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
                goto __pyx_L24_unpacking_done;
                __pyx_L23_unpacking_failed:;
                __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
                __pyx_t_18 = NULL;
                if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
                __PYX_ERR(0, 122, __pyx_L13_error)
                __pyx_L24_unpacking_done:;
              }
              __Pyx_XDECREF_SET(__pyx_v_eachx, __pyx_t_15);
              __pyx_t_15 = 0;
              __Pyx_XDECREF_SET(__pyx_v_eachq, __pyx_t_3);
              __pyx_t_3 = 0;
              __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 122, __pyx_L13_error)
              __Pyx_GOTREF(__pyx_t_4);
              if (likely(PyList_CheckExact(__pyx_v_pid)) || PyTuple_CheckExact(__pyx_v_pid)) {
                __pyx_t_3 = __pyx_v_pid; __Pyx_INCREF(__pyx_t_3); __pyx_t_19 = 0;
                __pyx_t_20 = NULL;
              } else {
                __pyx_t_19 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_pid); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 122, __pyx_L13_error)
                __Pyx_GOTREF(__pyx_t_3);
                __pyx_t_20 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 122, __pyx_L13_error)
              }
              for (;;) {
                if (likely(!__pyx_t_20)) {
                  if (likely(PyList_CheckExact(__pyx_t_3))) {
                    if (__pyx_t_19 >= PyList_GET_SIZE(__pyx_t_3)) break;
                    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                    __pyx_t_15 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_19); __Pyx_INCREF(__pyx_t_15); __pyx_t_19++; if (unlikely(0 < 0)) __PYX_ERR(0, 122, __pyx_L13_error)
                    #else
                    __pyx_t_15 = PySequence_ITEM(__pyx_t_3, __pyx_t_19); __pyx_t_19++; if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 122, __pyx_L13_error)
                    __Pyx_GOTREF(__pyx_t_15);
                    #endif
                  } else {
                    if (__pyx_t_19 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
                    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                    __pyx_t_15 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_19); __Pyx_INCREF(__pyx_t_15); __pyx_t_19++; if (unlikely(0 < 0)) __PYX_ERR(0, 122, __pyx_L13_error)
                    #else
                    __pyx_t_15 = PySequence_ITEM(__pyx_t_3, __pyx_t_19); __pyx_t_19++; if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 122, __pyx_L13_error)
                    __Pyx_GOTREF(__pyx_t_15);
                    #endif
                  }
                } else {
                  __pyx_t_15 = __pyx_t_20(__pyx_t_3);
                  if (unlikely(!__pyx_t_15)) {
                    PyObject* exc_type = PyErr_Occurred();
                    if (exc_type) {
                      if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                      else __PYX_ERR(0, 122, __pyx_L13_error)
                    }
                    break;
                  }
                  __Pyx_GOTREF(__pyx_t_15);
                }
                __Pyx_XDECREF_SET(__pyx_v_eachpid, __pyx_t_15);
                __pyx_t_15 = 0;
                __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_v_eachpid); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 122, __pyx_L13_error)
                __pyx_t_21 = __pyx_PyFloat_AsDouble(__pyx_v_eachx); if (unlikely((__pyx_t_21 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 122, __pyx_L13_error)
                __pyx_t_22 = __pyx_PyFloat_AsDouble(__pyx_v_eachq); if (unlikely((__pyx_t_22 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 122, __pyx_L13_error)
                try {
                  __pyx_t_23 = __pyx_v_self->_ptr->xfxQ(__pyx_t_7, __pyx_t_21, __pyx_t_22);
                } catch(...) {
                  __Pyx_CppExn2PyErr();
                  __PYX_ERR(0, 122, __pyx_L13_error)
                }
                __pyx_t_15 = PyFloat_FromDouble(__pyx_t_23); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 122, __pyx_L13_error)
                __Pyx_GOTREF(__pyx_t_15);
                if (unlikely(__Pyx_ListComp_Append(__pyx_t_4, (PyObject*)__pyx_t_15))) __PYX_ERR(0, 122, __pyx_L13_error)
                __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
              }
              __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
              if (unlikely(__Pyx_ListComp_Append(__pyx_t_5, (PyObject*)__pyx_t_4))) __PYX_ERR(0, 122, __pyx_L13_error)
              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            }
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            __pyx_r = __pyx_t_5;
            __pyx_t_5 = 0;
            goto __pyx_L17_try_return;

            /* "lhapdf.pyx":121
 *                 return self.xfxQ(x, q)
 *             try:
 *                 try:             # <<<<<<<<<<<<<<
 *                     return [[self._ptr.xfxQ(eachpid, eachx, eachq) for eachpid in pid] for eachx, eachq in zip(x, q)]
 *                 except TypeError:
 */
          }
          __pyx_L13_error:;
          __Pyx_PyThreadState_assign
          __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
          __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

          /* "lhapdf.pyx":123
 *                 try:
 *                     return [[self._ptr.xfxQ(eachpid, eachx, eachq) for eachpid in pid] for eachx, eachq in zip(x, q)]
 *                 except TypeError:             # <<<<<<<<<<<<<<
 *                     return [self._ptr.xfxQ(pid, eachx, eachq) for eachx, eachq in zip(x, q)]
 *             except TypeError:
 */
          __pyx_t_7 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_TypeError);
          if (__pyx_t_7) {
            __Pyx_AddTraceback("lhapdf.PDF.xfxQ", __pyx_clineno, __pyx_lineno, __pyx_filename);
            if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_8, &__pyx_t_4) < 0) __PYX_ERR(0, 123, __pyx_L15_except_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_GOTREF(__pyx_t_8);
            __Pyx_GOTREF(__pyx_t_4);

            /* "lhapdf.pyx":124
 *                     return [[self._ptr.xfxQ(eachpid, eachx, eachq) for eachpid in pid] for eachx, eachq in zip(x, q)]
 *                 except TypeError:
 *                     return [self._ptr.xfxQ(pid, eachx, eachq) for eachx, eachq in zip(x, q)]             # <<<<<<<<<<<<<<
 *             except TypeError:
 *                 try:
 */
            __Pyx_XDECREF(__pyx_r);
            __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 124, __pyx_L15_except_error)
            __Pyx_GOTREF(__pyx_t_3);
            __pyx_t_17 = __Pyx_GetModuleGlobalName(__pyx_n_s_zip); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 124, __pyx_L15_except_error)
            __Pyx_GOTREF(__pyx_t_17);
            __pyx_t_24 = NULL;
            __pyx_t_7 = 0;
            if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_17))) {
              __pyx_t_24 = PyMethod_GET_SELF(__pyx_t_17);
              if (likely(__pyx_t_24)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_17);
                __Pyx_INCREF(__pyx_t_24);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_17, function);
                __pyx_t_7 = 1;
              }
            }
            #if CYTHON_FAST_PYCALL
            if (PyFunction_Check(__pyx_t_17)) {
              PyObject *__pyx_temp[3] = {__pyx_t_24, __pyx_v_x, __pyx_v_q};
              __pyx_t_15 = __Pyx_PyFunction_FastCall(__pyx_t_17, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 124, __pyx_L15_except_error)
              __Pyx_XDECREF(__pyx_t_24); __pyx_t_24 = 0;
              __Pyx_GOTREF(__pyx_t_15);
            } else
            #endif
            #if CYTHON_FAST_PYCCALL
            if (__Pyx_PyFastCFunction_Check(__pyx_t_17)) {
              PyObject *__pyx_temp[3] = {__pyx_t_24, __pyx_v_x, __pyx_v_q};
              __pyx_t_15 = __Pyx_PyCFunction_FastCall(__pyx_t_17, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 124, __pyx_L15_except_error)
              __Pyx_XDECREF(__pyx_t_24); __pyx_t_24 = 0;
              __Pyx_GOTREF(__pyx_t_15);
            } else
            #endif
            {
              __pyx_t_25 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_25)) __PYX_ERR(0, 124, __pyx_L15_except_error)
              __Pyx_GOTREF(__pyx_t_25);
              if (__pyx_t_24) {
                __Pyx_GIVEREF(__pyx_t_24); PyTuple_SET_ITEM(__pyx_t_25, 0, __pyx_t_24); __pyx_t_24 = NULL;
              }
              __Pyx_INCREF(__pyx_v_x);
              __Pyx_GIVEREF(__pyx_v_x);
              PyTuple_SET_ITEM(__pyx_t_25, 0+__pyx_t_7, __pyx_v_x);
              __Pyx_INCREF(__pyx_v_q);
              __Pyx_GIVEREF(__pyx_v_q);
              PyTuple_SET_ITEM(__pyx_t_25, 1+__pyx_t_7, __pyx_v_q);
              __pyx_t_15 = __Pyx_PyObject_Call(__pyx_t_17, __pyx_t_25, NULL); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 124, __pyx_L15_except_error)
              __Pyx_GOTREF(__pyx_t_15);
              __Pyx_DECREF(__pyx_t_25); __pyx_t_25 = 0;
            }
            __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
            if (likely(PyList_CheckExact(__pyx_t_15)) || PyTuple_CheckExact(__pyx_t_15)) {
              __pyx_t_17 = __pyx_t_15; __Pyx_INCREF(__pyx_t_17); __pyx_t_1 = 0;
              __pyx_t_16 = NULL;
            } else {
              __pyx_t_1 = -1; __pyx_t_17 = PyObject_GetIter(__pyx_t_15); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 124, __pyx_L15_except_error)
              __Pyx_GOTREF(__pyx_t_17);
              __pyx_t_16 = Py_TYPE(__pyx_t_17)->tp_iternext; if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 124, __pyx_L15_except_error)
            }
            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
            for (;;) {
              if (likely(!__pyx_t_16)) {
                if (likely(PyList_CheckExact(__pyx_t_17))) {
                  if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_17)) break;
                  #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                  __pyx_t_15 = PyList_GET_ITEM(__pyx_t_17, __pyx_t_1); __Pyx_INCREF(__pyx_t_15); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 124, __pyx_L15_except_error)
                  #else
                  __pyx_t_15 = PySequence_ITEM(__pyx_t_17, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 124, __pyx_L15_except_error)
                  __Pyx_GOTREF(__pyx_t_15);
                  #endif
                } else {
                  if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_17)) break;
                  #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                  __pyx_t_15 = PyTuple_GET_ITEM(__pyx_t_17, __pyx_t_1); __Pyx_INCREF(__pyx_t_15); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 124, __pyx_L15_except_error)
                  #else
                  __pyx_t_15 = PySequence_ITEM(__pyx_t_17, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 124, __pyx_L15_except_error)
                  __Pyx_GOTREF(__pyx_t_15);
                  #endif
                }
              } else {
                __pyx_t_15 = __pyx_t_16(__pyx_t_17);
                if (unlikely(!__pyx_t_15)) {
                  PyObject* exc_type = PyErr_Occurred();
                  if (exc_type) {
                    if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                    else __PYX_ERR(0, 124, __pyx_L15_except_error)
                  }
                  break;
                }
                __Pyx_GOTREF(__pyx_t_15);
              }
              if ((likely(PyTuple_CheckExact(__pyx_t_15))) || (PyList_CheckExact(__pyx_t_15))) {
                PyObject* sequence = __pyx_t_15;
                #if !CYTHON_COMPILING_IN_PYPY
                Py_ssize_t size = Py_SIZE(sequence);
                #else
                Py_ssize_t size = PySequence_Size(sequence);
                #endif
                if (unlikely(size != 2)) {
                  if (size > 2) __Pyx_RaiseTooManyValuesError(2);
                  else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
                  __PYX_ERR(0, 124, __pyx_L15_except_error)
                }
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                if (likely(PyTuple_CheckExact(sequence))) {
                  __pyx_t_25 = PyTuple_GET_ITEM(sequence, 0); 
                  __pyx_t_24 = PyTuple_GET_ITEM(sequence, 1); 
                } else {
                  __pyx_t_25 = PyList_GET_ITEM(sequence, 0); 
                  __pyx_t_24 = PyList_GET_ITEM(sequence, 1); 
                }
                __Pyx_INCREF(__pyx_t_25);
                __Pyx_INCREF(__pyx_t_24);
                #else
                __pyx_t_25 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_25)) __PYX_ERR(0, 124, __pyx_L15_except_error)
                __Pyx_GOTREF(__pyx_t_25);
                __pyx_t_24 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 124, __pyx_L15_except_error)
                __Pyx_GOTREF(__pyx_t_24);
                #endif
                __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
              } else {
                Py_ssize_t index = -1;
                __pyx_t_26 = PyObject_GetIter(__pyx_t_15); if (unlikely(!__pyx_t_26)) __PYX_ERR(0, 124, __pyx_L15_except_error)
                __Pyx_GOTREF(__pyx_t_26);
                __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
                __pyx_t_18 = Py_TYPE(__pyx_t_26)->tp_iternext;
                index = 0; __pyx_t_25 = __pyx_t_18(__pyx_t_26); if (unlikely(!__pyx_t_25)) goto __pyx_L31_unpacking_failed;
                __Pyx_GOTREF(__pyx_t_25);
                index = 1; __pyx_t_24 = __pyx_t_18(__pyx_t_26); if (unlikely(!__pyx_t_24)) goto __pyx_L31_unpacking_failed;
                __Pyx_GOTREF(__pyx_t_24);
                if (__Pyx_IternextUnpackEndCheck(__pyx_t_18(__pyx_t_26), 2) < 0) __PYX_ERR(0, 124, __pyx_L15_except_error)
                __pyx_t_18 = NULL;
                __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;
                goto __pyx_L32_unpacking_done;
                __pyx_L31_unpacking_failed:;
                __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;
                __pyx_t_18 = NULL;
                if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
                __PYX_ERR(0, 124, __pyx_L15_except_error)
                __pyx_L32_unpacking_done:;
              }
              __Pyx_XDECREF_SET(__pyx_v_eachx, __pyx_t_25);
              __pyx_t_25 = 0;
              __Pyx_XDECREF_SET(__pyx_v_eachq, __pyx_t_24);
              __pyx_t_24 = 0;
              __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_v_pid); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 124, __pyx_L15_except_error)
              __pyx_t_23 = __pyx_PyFloat_AsDouble(__pyx_v_eachx); if (unlikely((__pyx_t_23 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 124, __pyx_L15_except_error)
              __pyx_t_22 = __pyx_PyFloat_AsDouble(__pyx_v_eachq); if (unlikely((__pyx_t_22 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 124, __pyx_L15_except_error)
              try {
                __pyx_t_21 = __pyx_v_self->_ptr->xfxQ(__pyx_t_7, __pyx_t_23, __pyx_t_22);
              } catch(...) {
                __Pyx_CppExn2PyErr();
                __PYX_ERR(0, 124, __pyx_L15_except_error)
              }
              __pyx_t_15 = PyFloat_FromDouble(__pyx_t_21); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 124, __pyx_L15_except_error)
              __Pyx_GOTREF(__pyx_t_15);
              if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_15))) __PYX_ERR(0, 124, __pyx_L15_except_error)
              __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
            }
            __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
            __pyx_r = __pyx_t_3;
            __pyx_t_3 = 0;
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            goto __pyx_L16_except_return;
          }
          goto __pyx_L15_except_error;
          __pyx_L15_except_error:;

          /* "lhapdf.pyx":121
 *                 return self.xfxQ(x, q)
 *             try:
 *                 try:             # <<<<<<<<<<<<<<
 *                     return [[self._ptr.xfxQ(eachpid, eachx, eachq) for eachpid in pid] for eachx, eachq in zip(x, q)]
 *                 except TypeError:
 */
          __Pyx_PyThreadState_assign
          __Pyx_XGIVEREF(__pyx_t_12);
          __Pyx_XGIVEREF(__pyx_t_13);
          __Pyx_XGIVEREF(__pyx_t_14);
          __Pyx_ExceptionReset(__pyx_t_12, __pyx_t_13, __pyx_t_14);
          goto __pyx_L5_error;
          __pyx_L17_try_return:;
          __Pyx_PyThreadState_assign
          __Pyx_XGIVEREF(__pyx_t_12);
          __Pyx_XGIVEREF(__pyx_t_13);
          __Pyx_XGIVEREF(__pyx_t_14);
          __Pyx_ExceptionReset(__pyx_t_12, __pyx_t_13, __pyx_t_14);
          goto __pyx_L9_try_return;
          __pyx_L16_except_return:;
          __Pyx_PyThreadState_assign
          __Pyx_XGIVEREF(__pyx_t_12);
          __Pyx_XGIVEREF(__pyx_t_13);
          __Pyx_XGIVEREF(__pyx_t_14);
          __Pyx_ExceptionReset(__pyx_t_12, __pyx_t_13, __pyx_t_14);
          goto __pyx_L9_try_return;
        }

        /* "lhapdf.pyx":120
 *             if pid is None:
 *                 return self.xfxQ(x, q)
 *             try:             # <<<<<<<<<<<<<<
 *                 try:
 *                     return [[self._ptr.xfxQ(eachpid, eachx, eachq) for eachpid in pid] for eachx, eachq in zip(x, q)]
 */
      }
      __pyx_L5_error:;
      __Pyx_PyThreadState_assign
      __Pyx_XDECREF(__pyx_t_26); __pyx_t_26 = 0;
      __Pyx_XDECREF(__pyx_t_25); __pyx_t_25 = 0;
      __Pyx_XDECREF(__pyx_t_24); __pyx_t_24 = 0;
      __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
      __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "lhapdf.pyx":125
 *                 except TypeError:
 *                     return [self._ptr.xfxQ(pid, eachx, eachq) for eachx, eachq in zip(x, q)]
 *             except TypeError:             # <<<<<<<<<<<<<<
 *                 try:
 *                     return [self._ptr.xfxQ(eachpid, x, q) for eachpid in pid]
 */
      __pyx_t_7 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_TypeError);
      if (__pyx_t_7) {
        __Pyx_AddTraceback("lhapdf.PDF.xfxQ", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_4, &__pyx_t_8, &__pyx_t_5) < 0) __PYX_ERR(0, 125, __pyx_L7_except_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GOTREF(__pyx_t_5);

        /* "lhapdf.pyx":126
 *                     return [self._ptr.xfxQ(pid, eachx, eachq) for eachx, eachq in zip(x, q)]
 *             except TypeError:
 *                 try:             # <<<<<<<<<<<<<<
 *                     return [self._ptr.xfxQ(eachpid, x, q) for eachpid in pid]
 *                 except TypeError:
 */
        {
          __Pyx_PyThreadState_declare
          __Pyx_PyThreadState_assign
          __Pyx_ExceptionSave(&__pyx_t_14, &__pyx_t_13, &__pyx_t_12);
          __Pyx_XGOTREF(__pyx_t_14);
          __Pyx_XGOTREF(__pyx_t_13);
          __Pyx_XGOTREF(__pyx_t_12);
          /*try:*/ {

            /* "lhapdf.pyx":127
 *             except TypeError:
 *                 try:
 *                     return [self._ptr.xfxQ(eachpid, x, q) for eachpid in pid]             # <<<<<<<<<<<<<<
 *                 except TypeError:
 *                     return self._ptr.xfxQ(pid, x, q)
 */
            __Pyx_XDECREF(__pyx_r);
            __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 127, __pyx_L35_error)
            __Pyx_GOTREF(__pyx_t_3);
            if (likely(PyList_CheckExact(__pyx_v_pid)) || PyTuple_CheckExact(__pyx_v_pid)) {
              __pyx_t_17 = __pyx_v_pid; __Pyx_INCREF(__pyx_t_17); __pyx_t_1 = 0;
              __pyx_t_16 = NULL;
            } else {
              __pyx_t_1 = -1; __pyx_t_17 = PyObject_GetIter(__pyx_v_pid); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 127, __pyx_L35_error)
              __Pyx_GOTREF(__pyx_t_17);
              __pyx_t_16 = Py_TYPE(__pyx_t_17)->tp_iternext; if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 127, __pyx_L35_error)
            }
            for (;;) {
              if (likely(!__pyx_t_16)) {
                if (likely(PyList_CheckExact(__pyx_t_17))) {
                  if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_17)) break;
                  #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                  __pyx_t_15 = PyList_GET_ITEM(__pyx_t_17, __pyx_t_1); __Pyx_INCREF(__pyx_t_15); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 127, __pyx_L35_error)
                  #else
                  __pyx_t_15 = PySequence_ITEM(__pyx_t_17, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 127, __pyx_L35_error)
                  __Pyx_GOTREF(__pyx_t_15);
                  #endif
                } else {
                  if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_17)) break;
                  #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                  __pyx_t_15 = PyTuple_GET_ITEM(__pyx_t_17, __pyx_t_1); __Pyx_INCREF(__pyx_t_15); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 127, __pyx_L35_error)
                  #else
                  __pyx_t_15 = PySequence_ITEM(__pyx_t_17, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 127, __pyx_L35_error)
                  __Pyx_GOTREF(__pyx_t_15);
                  #endif
                }
              } else {
                __pyx_t_15 = __pyx_t_16(__pyx_t_17);
                if (unlikely(!__pyx_t_15)) {
                  PyObject* exc_type = PyErr_Occurred();
                  if (exc_type) {
                    if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                    else __PYX_ERR(0, 127, __pyx_L35_error)
                  }
                  break;
                }
                __Pyx_GOTREF(__pyx_t_15);
              }
              __Pyx_XDECREF_SET(__pyx_v_eachpid, __pyx_t_15);
              __pyx_t_15 = 0;
              __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_v_eachpid); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 127, __pyx_L35_error)
              __pyx_t_21 = __pyx_PyFloat_AsDouble(__pyx_v_x); if (unlikely((__pyx_t_21 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 127, __pyx_L35_error)
              __pyx_t_22 = __pyx_PyFloat_AsDouble(__pyx_v_q); if (unlikely((__pyx_t_22 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 127, __pyx_L35_error)
              try {
                __pyx_t_23 = __pyx_v_self->_ptr->xfxQ(__pyx_t_7, __pyx_t_21, __pyx_t_22);
              } catch(...) {
                __Pyx_CppExn2PyErr();
                __PYX_ERR(0, 127, __pyx_L35_error)
              }
              __pyx_t_15 = PyFloat_FromDouble(__pyx_t_23); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 127, __pyx_L35_error)
              __Pyx_GOTREF(__pyx_t_15);
              if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_15))) __PYX_ERR(0, 127, __pyx_L35_error)
              __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
            }
            __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
            __pyx_r = __pyx_t_3;
            __pyx_t_3 = 0;
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            goto __pyx_L39_try_return;

            /* "lhapdf.pyx":126
 *                     return [self._ptr.xfxQ(pid, eachx, eachq) for eachx, eachq in zip(x, q)]
 *             except TypeError:
 *                 try:             # <<<<<<<<<<<<<<
 *                     return [self._ptr.xfxQ(eachpid, x, q) for eachpid in pid]
 *                 except TypeError:
 */
          }
          __pyx_L35_error:;
          __Pyx_PyThreadState_assign
          __Pyx_XDECREF(__pyx_t_26); __pyx_t_26 = 0;
          __Pyx_XDECREF(__pyx_t_25); __pyx_t_25 = 0;
          __Pyx_XDECREF(__pyx_t_24); __pyx_t_24 = 0;
          __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
          __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;

          /* "lhapdf.pyx":128
 *                 try:
 *                     return [self._ptr.xfxQ(eachpid, x, q) for eachpid in pid]
 *                 except TypeError:             # <<<<<<<<<<<<<<
 *                     return self._ptr.xfxQ(pid, x, q)
 *         elif len(args) == 2:
 */
          __pyx_t_7 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_TypeError);
          if (__pyx_t_7) {
            __Pyx_AddTraceback("lhapdf.PDF.xfxQ", __pyx_clineno, __pyx_lineno, __pyx_filename);
            if (__Pyx_GetException(&__pyx_t_3, &__pyx_t_17, &__pyx_t_15) < 0) __PYX_ERR(0, 128, __pyx_L37_except_error)
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_GOTREF(__pyx_t_17);
            __Pyx_GOTREF(__pyx_t_15);

            /* "lhapdf.pyx":129
 *                     return [self._ptr.xfxQ(eachpid, x, q) for eachpid in pid]
 *                 except TypeError:
 *                     return self._ptr.xfxQ(pid, x, q)             # <<<<<<<<<<<<<<
 *         elif len(args) == 2:
 *             x, q = args
 */
            __Pyx_XDECREF(__pyx_r);
            __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_v_pid); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 129, __pyx_L37_except_error)
            __pyx_t_23 = __pyx_PyFloat_AsDouble(__pyx_v_x); if (unlikely((__pyx_t_23 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 129, __pyx_L37_except_error)
            __pyx_t_22 = __pyx_PyFloat_AsDouble(__pyx_v_q); if (unlikely((__pyx_t_22 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 129, __pyx_L37_except_error)
            try {
              __pyx_t_21 = __pyx_v_self->_ptr->xfxQ(__pyx_t_7, __pyx_t_23, __pyx_t_22);
            } catch(...) {
              __Pyx_CppExn2PyErr();
              __PYX_ERR(0, 129, __pyx_L37_except_error)
            }
            __pyx_t_24 = PyFloat_FromDouble(__pyx_t_21); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 129, __pyx_L37_except_error)
            __Pyx_GOTREF(__pyx_t_24);
            __pyx_r = __pyx_t_24;
            __pyx_t_24 = 0;
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
            __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
            goto __pyx_L38_except_return;
          }
          goto __pyx_L37_except_error;
          __pyx_L37_except_error:;

          /* "lhapdf.pyx":126
 *                     return [self._ptr.xfxQ(pid, eachx, eachq) for eachx, eachq in zip(x, q)]
 *             except TypeError:
 *                 try:             # <<<<<<<<<<<<<<
 *                     return [self._ptr.xfxQ(eachpid, x, q) for eachpid in pid]
 *                 except TypeError:
 */
          __Pyx_PyThreadState_assign
          __Pyx_XGIVEREF(__pyx_t_14);
          __Pyx_XGIVEREF(__pyx_t_13);
          __Pyx_XGIVEREF(__pyx_t_12);
          __Pyx_ExceptionReset(__pyx_t_14, __pyx_t_13, __pyx_t_12);
          goto __pyx_L7_except_error;
          __pyx_L39_try_return:;
          __Pyx_PyThreadState_assign
          __Pyx_XGIVEREF(__pyx_t_14);
          __Pyx_XGIVEREF(__pyx_t_13);
          __Pyx_XGIVEREF(__pyx_t_12);
          __Pyx_ExceptionReset(__pyx_t_14, __pyx_t_13, __pyx_t_12);
          goto __pyx_L8_except_return;
          __pyx_L38_except_return:;
          __Pyx_PyThreadState_assign
          __Pyx_XGIVEREF(__pyx_t_14);
          __Pyx_XGIVEREF(__pyx_t_13);
          __Pyx_XGIVEREF(__pyx_t_12);
          __Pyx_ExceptionReset(__pyx_t_14, __pyx_t_13, __pyx_t_12);
          goto __pyx_L8_except_return;
        }
      }
      goto __pyx_L7_except_error;
      __pyx_L7_except_error:;

      /* "lhapdf.pyx":120
 *             if pid is None:
 *                 return self.xfxQ(x, q)
 *             try:             # <<<<<<<<<<<<<<
 *                 try:
 *                     return [[self._ptr.xfxQ(eachpid, eachx, eachq) for eachpid in pid] for eachx, eachq in zip(x, q)]
 */
      __Pyx_PyThreadState_assign
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_XGIVEREF(__pyx_t_10);
      __Pyx_XGIVEREF(__pyx_t_11);
      __Pyx_ExceptionReset(__pyx_t_9, __pyx_t_10, __pyx_t_11);
      goto __pyx_L1_error;
      __pyx_L9_try_return:;
      __Pyx_PyThreadState_assign
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_XGIVEREF(__pyx_t_10);
      __Pyx_XGIVEREF(__pyx_t_11);
      __Pyx_ExceptionReset(__pyx_t_9, __pyx_t_10, __pyx_t_11);
      goto __pyx_L0;
      __pyx_L8_except_return:;
      __Pyx_PyThreadState_assign
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_XGIVEREF(__pyx_t_10);
      __Pyx_XGIVEREF(__pyx_t_11);
      __Pyx_ExceptionReset(__pyx_t_9, __pyx_t_10, __pyx_t_11);
      goto __pyx_L0;
    }

    /* "lhapdf.pyx":116
 *         # TODO: Reduce duplication between Q and Q2 variants?
 *         # If only we'd used PID as the final arg rather than the first, then we could have made it optional/default None...
 *         if len(args) == 3:             # <<<<<<<<<<<<<<
 *             pid, x, q = args
 *             if pid is None:
 */
  }

  /* "lhapdf.pyx":130
 *                 except TypeError:
 *                     return self._ptr.xfxQ(pid, x, q)
 *         elif len(args) == 2:             # <<<<<<<<<<<<<<
 *             x, q = args
 *             try:
 */
  __pyx_t_1 = PyTuple_GET_SIZE(__pyx_v_args); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(0, 130, __pyx_L1_error)
  __pyx_t_6 = ((__pyx_t_1 == 2) != 0);
  if (__pyx_t_6) {

    /* "lhapdf.pyx":131
 *                     return self._ptr.xfxQ(pid, x, q)
 *         elif len(args) == 2:
 *             x, q = args             # <<<<<<<<<<<<<<
 *             try:
 *                 return [{pid : self._ptr.xfxQ(pid, eachx, eachq) for pid in self.flavors()} for eachx, eachq in zip(x, q)]
 */
    if (1) {
      PyObject* sequence = __pyx_v_args;
      #if !CYTHON_COMPILING_IN_PYPY
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 131, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_8 = PyTuple_GET_ITEM(sequence, 1); 
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_8);
      #else
      __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 131, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_8 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 131, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      #endif
    }
    __pyx_v_x = __pyx_t_5;
    __pyx_t_5 = 0;
    __pyx_v_q = __pyx_t_8;
    __pyx_t_8 = 0;

    /* "lhapdf.pyx":132
 *         elif len(args) == 2:
 *             x, q = args
 *             try:             # <<<<<<<<<<<<<<
 *                 return [{pid : self._ptr.xfxQ(pid, eachx, eachq) for pid in self.flavors()} for eachx, eachq in zip(x, q)]
 *             except TypeError:
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_11, &__pyx_t_10, &__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_11);
      __Pyx_XGOTREF(__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_9);
      /*try:*/ {

        /* "lhapdf.pyx":133
 *             x, q = args
 *             try:
 *                 return [{pid : self._ptr.xfxQ(pid, eachx, eachq) for pid in self.flavors()} for eachx, eachq in zip(x, q)]             # <<<<<<<<<<<<<<
 *             except TypeError:
 *                 return {pid : self._ptr.xfxQ(pid, x, q) for pid in self.flavors()}
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_8 = PyList_New(0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 133, __pyx_L47_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_zip); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 133, __pyx_L47_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_15 = NULL;
        __pyx_t_7 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_4);
          if (likely(__pyx_t_15)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
            __Pyx_INCREF(__pyx_t_15);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_4, function);
            __pyx_t_7 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_4)) {
          PyObject *__pyx_temp[3] = {__pyx_t_15, __pyx_v_x, __pyx_v_q};
          __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 133, __pyx_L47_error)
          __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
          __Pyx_GOTREF(__pyx_t_5);
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
          PyObject *__pyx_temp[3] = {__pyx_t_15, __pyx_v_x, __pyx_v_q};
          __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 133, __pyx_L47_error)
          __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
          __Pyx_GOTREF(__pyx_t_5);
        } else
        #endif
        {
          __pyx_t_17 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 133, __pyx_L47_error)
          __Pyx_GOTREF(__pyx_t_17);
          if (__pyx_t_15) {
            __Pyx_GIVEREF(__pyx_t_15); PyTuple_SET_ITEM(__pyx_t_17, 0, __pyx_t_15); __pyx_t_15 = NULL;
          }
          __Pyx_INCREF(__pyx_v_x);
          __Pyx_GIVEREF(__pyx_v_x);
          PyTuple_SET_ITEM(__pyx_t_17, 0+__pyx_t_7, __pyx_v_x);
          __Pyx_INCREF(__pyx_v_q);
          __Pyx_GIVEREF(__pyx_v_q);
          PyTuple_SET_ITEM(__pyx_t_17, 1+__pyx_t_7, __pyx_v_q);
          __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_17, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 133, __pyx_L47_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
        }
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (likely(PyList_CheckExact(__pyx_t_5)) || PyTuple_CheckExact(__pyx_t_5)) {
          __pyx_t_4 = __pyx_t_5; __Pyx_INCREF(__pyx_t_4); __pyx_t_1 = 0;
          __pyx_t_16 = NULL;
        } else {
          __pyx_t_1 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 133, __pyx_L47_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_16 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 133, __pyx_L47_error)
        }
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        for (;;) {
          if (likely(!__pyx_t_16)) {
            if (likely(PyList_CheckExact(__pyx_t_4))) {
              if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_4)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_5 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_1); __Pyx_INCREF(__pyx_t_5); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 133, __pyx_L47_error)
              #else
              __pyx_t_5 = PySequence_ITEM(__pyx_t_4, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 133, __pyx_L47_error)
              __Pyx_GOTREF(__pyx_t_5);
              #endif
            } else {
              if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_1); __Pyx_INCREF(__pyx_t_5); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 133, __pyx_L47_error)
              #else
              __pyx_t_5 = PySequence_ITEM(__pyx_t_4, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 133, __pyx_L47_error)
              __Pyx_GOTREF(__pyx_t_5);
              #endif
            }
          } else {
            __pyx_t_5 = __pyx_t_16(__pyx_t_4);
            if (unlikely(!__pyx_t_5)) {
              PyObject* exc_type = PyErr_Occurred();
              if (exc_type) {
                if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                else __PYX_ERR(0, 133, __pyx_L47_error)
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_5);
          }
          if ((likely(PyTuple_CheckExact(__pyx_t_5))) || (PyList_CheckExact(__pyx_t_5))) {
            PyObject* sequence = __pyx_t_5;
            #if !CYTHON_COMPILING_IN_PYPY
            Py_ssize_t size = Py_SIZE(sequence);
            #else
            Py_ssize_t size = PySequence_Size(sequence);
            #endif
            if (unlikely(size != 2)) {
              if (size > 2) __Pyx_RaiseTooManyValuesError(2);
              else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
              __PYX_ERR(0, 133, __pyx_L47_error)
            }
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            if (likely(PyTuple_CheckExact(sequence))) {
              __pyx_t_17 = PyTuple_GET_ITEM(sequence, 0); 
              __pyx_t_15 = PyTuple_GET_ITEM(sequence, 1); 
            } else {
              __pyx_t_17 = PyList_GET_ITEM(sequence, 0); 
              __pyx_t_15 = PyList_GET_ITEM(sequence, 1); 
            }
            __Pyx_INCREF(__pyx_t_17);
            __Pyx_INCREF(__pyx_t_15);
            #else
            __pyx_t_17 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 133, __pyx_L47_error)
            __Pyx_GOTREF(__pyx_t_17);
            __pyx_t_15 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 133, __pyx_L47_error)
            __Pyx_GOTREF(__pyx_t_15);
            #endif
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          } else {
            Py_ssize_t index = -1;
            __pyx_t_3 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 133, __pyx_L47_error)
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __pyx_t_18 = Py_TYPE(__pyx_t_3)->tp_iternext;
            index = 0; __pyx_t_17 = __pyx_t_18(__pyx_t_3); if (unlikely(!__pyx_t_17)) goto __pyx_L57_unpacking_failed;
            __Pyx_GOTREF(__pyx_t_17);
            index = 1; __pyx_t_15 = __pyx_t_18(__pyx_t_3); if (unlikely(!__pyx_t_15)) goto __pyx_L57_unpacking_failed;
            __Pyx_GOTREF(__pyx_t_15);
            if (__Pyx_IternextUnpackEndCheck(__pyx_t_18(__pyx_t_3), 2) < 0) __PYX_ERR(0, 133, __pyx_L47_error)
            __pyx_t_18 = NULL;
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            goto __pyx_L58_unpacking_done;
            __pyx_L57_unpacking_failed:;
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __pyx_t_18 = NULL;
            if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
            __PYX_ERR(0, 133, __pyx_L47_error)
            __pyx_L58_unpacking_done:;
          }
          __Pyx_XDECREF_SET(__pyx_v_eachx, __pyx_t_17);
          __pyx_t_17 = 0;
          __Pyx_XDECREF_SET(__pyx_v_eachq, __pyx_t_15);
          __pyx_t_15 = 0;
          { /* enter inner scope */
            PyObject *__pyx_7genexpr__pyx_v_pid = NULL;
            __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 133, __pyx_L61_error)
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_17 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_flavors); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 133, __pyx_L61_error)
            __Pyx_GOTREF(__pyx_t_17);
            __pyx_t_3 = NULL;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_17))) {
              __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_17);
              if (likely(__pyx_t_3)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_17);
                __Pyx_INCREF(__pyx_t_3);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_17, function);
              }
            }
            if (__pyx_t_3) {
              __pyx_t_15 = __Pyx_PyObject_CallOneArg(__pyx_t_17, __pyx_t_3); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 133, __pyx_L61_error)
              __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            } else {
              __pyx_t_15 = __Pyx_PyObject_CallNoArg(__pyx_t_17); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 133, __pyx_L61_error)
            }
            __Pyx_GOTREF(__pyx_t_15);
            __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
            if (likely(PyList_CheckExact(__pyx_t_15)) || PyTuple_CheckExact(__pyx_t_15)) {
              __pyx_t_17 = __pyx_t_15; __Pyx_INCREF(__pyx_t_17); __pyx_t_19 = 0;
              __pyx_t_20 = NULL;
            } else {
              __pyx_t_19 = -1; __pyx_t_17 = PyObject_GetIter(__pyx_t_15); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 133, __pyx_L61_error)
              __Pyx_GOTREF(__pyx_t_17);
              __pyx_t_20 = Py_TYPE(__pyx_t_17)->tp_iternext; if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 133, __pyx_L61_error)
            }
            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
            for (;;) {
              if (likely(!__pyx_t_20)) {
                if (likely(PyList_CheckExact(__pyx_t_17))) {
                  if (__pyx_t_19 >= PyList_GET_SIZE(__pyx_t_17)) break;
                  #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                  __pyx_t_15 = PyList_GET_ITEM(__pyx_t_17, __pyx_t_19); __Pyx_INCREF(__pyx_t_15); __pyx_t_19++; if (unlikely(0 < 0)) __PYX_ERR(0, 133, __pyx_L61_error)
                  #else
                  __pyx_t_15 = PySequence_ITEM(__pyx_t_17, __pyx_t_19); __pyx_t_19++; if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 133, __pyx_L61_error)
                  __Pyx_GOTREF(__pyx_t_15);
                  #endif
                } else {
                  if (__pyx_t_19 >= PyTuple_GET_SIZE(__pyx_t_17)) break;
                  #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                  __pyx_t_15 = PyTuple_GET_ITEM(__pyx_t_17, __pyx_t_19); __Pyx_INCREF(__pyx_t_15); __pyx_t_19++; if (unlikely(0 < 0)) __PYX_ERR(0, 133, __pyx_L61_error)
                  #else
                  __pyx_t_15 = PySequence_ITEM(__pyx_t_17, __pyx_t_19); __pyx_t_19++; if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 133, __pyx_L61_error)
                  __Pyx_GOTREF(__pyx_t_15);
                  #endif
                }
              } else {
                __pyx_t_15 = __pyx_t_20(__pyx_t_17);
                if (unlikely(!__pyx_t_15)) {
                  PyObject* exc_type = PyErr_Occurred();
                  if (exc_type) {
                    if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                    else __PYX_ERR(0, 133, __pyx_L61_error)
                  }
                  break;
                }
                __Pyx_GOTREF(__pyx_t_15);
              }
              __Pyx_XDECREF_SET(__pyx_7genexpr__pyx_v_pid, __pyx_t_15);
              __pyx_t_15 = 0;
              __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_7genexpr__pyx_v_pid); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 133, __pyx_L61_error)
              __pyx_t_21 = __pyx_PyFloat_AsDouble(__pyx_v_eachx); if (unlikely((__pyx_t_21 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 133, __pyx_L61_error)
              __pyx_t_22 = __pyx_PyFloat_AsDouble(__pyx_v_eachq); if (unlikely((__pyx_t_22 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 133, __pyx_L61_error)
              try {
                __pyx_t_23 = __pyx_v_self->_ptr->xfxQ(__pyx_t_7, __pyx_t_21, __pyx_t_22);
              } catch(...) {
                __Pyx_CppExn2PyErr();
                __PYX_ERR(0, 133, __pyx_L61_error)
              }
              __pyx_t_15 = PyFloat_FromDouble(__pyx_t_23); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 133, __pyx_L61_error)
              __Pyx_GOTREF(__pyx_t_15);
              if (unlikely(PyDict_SetItem(__pyx_t_5, (PyObject*)__pyx_7genexpr__pyx_v_pid, (PyObject*)__pyx_t_15))) __PYX_ERR(0, 133, __pyx_L61_error)
              __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
            }
            __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
            __Pyx_XDECREF(__pyx_7genexpr__pyx_v_pid);
            goto __pyx_L64_exit_scope;
            __pyx_L61_error:;
            __Pyx_XDECREF(__pyx_7genexpr__pyx_v_pid);
            goto __pyx_L47_error;
            __pyx_L64_exit_scope:;
          } /* exit inner scope */
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_8, (PyObject*)__pyx_t_5))) __PYX_ERR(0, 133, __pyx_L47_error)
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        }
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_r = __pyx_t_8;
        __pyx_t_8 = 0;
        goto __pyx_L51_try_return;

        /* "lhapdf.pyx":132
 *         elif len(args) == 2:
 *             x, q = args
 *             try:             # <<<<<<<<<<<<<<
 *                 return [{pid : self._ptr.xfxQ(pid, eachx, eachq) for pid in self.flavors()} for eachx, eachq in zip(x, q)]
 *             except TypeError:
 */
      }
      __pyx_L47_error:;
      __Pyx_PyThreadState_assign
      __Pyx_XDECREF(__pyx_t_26); __pyx_t_26 = 0;
      __Pyx_XDECREF(__pyx_t_25); __pyx_t_25 = 0;
      __Pyx_XDECREF(__pyx_t_24); __pyx_t_24 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
      __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "lhapdf.pyx":134
 *             try:
 *                 return [{pid : self._ptr.xfxQ(pid, eachx, eachq) for pid in self.flavors()} for eachx, eachq in zip(x, q)]
 *             except TypeError:             # <<<<<<<<<<<<<<
 *                 return {pid : self._ptr.xfxQ(pid, x, q) for pid in self.flavors()}
 *         else:
 */
      __pyx_t_7 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_TypeError);
      if (__pyx_t_7) {
        __Pyx_AddTraceback("lhapdf.PDF.xfxQ", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_8, &__pyx_t_4, &__pyx_t_5) < 0) __PYX_ERR(0, 134, __pyx_L49_except_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_GOTREF(__pyx_t_5);

        /* "lhapdf.pyx":135
 *                 return [{pid : self._ptr.xfxQ(pid, eachx, eachq) for pid in self.flavors()} for eachx, eachq in zip(x, q)]
 *             except TypeError:
 *                 return {pid : self._ptr.xfxQ(pid, x, q) for pid in self.flavors()}             # <<<<<<<<<<<<<<
 *         else:
 *             raise Exception("Wrong number of arguments given to xfxQ: 2 or 3 required, %d provided" % len(args))
 */
        __Pyx_XDECREF(__pyx_r);
        { /* enter inner scope */
          PyObject *__pyx_8genexpr1__pyx_v_pid = NULL;
          __pyx_t_17 = PyDict_New(); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 135, __pyx_L69_error)
          __Pyx_GOTREF(__pyx_t_17);
          __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_flavors); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 135, __pyx_L69_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_24 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
            __pyx_t_24 = PyMethod_GET_SELF(__pyx_t_3);
            if (likely(__pyx_t_24)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
              __Pyx_INCREF(__pyx_t_24);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_3, function);
            }
          }
          if (__pyx_t_24) {
            __pyx_t_15 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_24); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 135, __pyx_L69_error)
            __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;
          } else {
            __pyx_t_15 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 135, __pyx_L69_error)
          }
          __Pyx_GOTREF(__pyx_t_15);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          if (likely(PyList_CheckExact(__pyx_t_15)) || PyTuple_CheckExact(__pyx_t_15)) {
            __pyx_t_3 = __pyx_t_15; __Pyx_INCREF(__pyx_t_3); __pyx_t_1 = 0;
            __pyx_t_16 = NULL;
          } else {
            __pyx_t_1 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_15); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 135, __pyx_L69_error)
            __Pyx_GOTREF(__pyx_t_3);
            __pyx_t_16 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 135, __pyx_L69_error)
          }
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          for (;;) {
            if (likely(!__pyx_t_16)) {
              if (likely(PyList_CheckExact(__pyx_t_3))) {
                if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_3)) break;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                __pyx_t_15 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_1); __Pyx_INCREF(__pyx_t_15); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 135, __pyx_L69_error)
                #else
                __pyx_t_15 = PySequence_ITEM(__pyx_t_3, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 135, __pyx_L69_error)
                __Pyx_GOTREF(__pyx_t_15);
                #endif
              } else {
                if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                __pyx_t_15 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_1); __Pyx_INCREF(__pyx_t_15); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 135, __pyx_L69_error)
                #else
                __pyx_t_15 = PySequence_ITEM(__pyx_t_3, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 135, __pyx_L69_error)
                __Pyx_GOTREF(__pyx_t_15);
                #endif
              }
            } else {
              __pyx_t_15 = __pyx_t_16(__pyx_t_3);
              if (unlikely(!__pyx_t_15)) {
                PyObject* exc_type = PyErr_Occurred();
                if (exc_type) {
                  if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                  else __PYX_ERR(0, 135, __pyx_L69_error)
                }
                break;
              }
              __Pyx_GOTREF(__pyx_t_15);
            }
            __Pyx_XDECREF_SET(__pyx_8genexpr1__pyx_v_pid, __pyx_t_15);
            __pyx_t_15 = 0;
            __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_8genexpr1__pyx_v_pid); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 135, __pyx_L69_error)
            __pyx_t_23 = __pyx_PyFloat_AsDouble(__pyx_v_x); if (unlikely((__pyx_t_23 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 135, __pyx_L69_error)
            __pyx_t_22 = __pyx_PyFloat_AsDouble(__pyx_v_q); if (unlikely((__pyx_t_22 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 135, __pyx_L69_error)
            try {
              __pyx_t_21 = __pyx_v_self->_ptr->xfxQ(__pyx_t_7, __pyx_t_23, __pyx_t_22);
            } catch(...) {
              __Pyx_CppExn2PyErr();
              __PYX_ERR(0, 135, __pyx_L69_error)
            }
            __pyx_t_15 = PyFloat_FromDouble(__pyx_t_21); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 135, __pyx_L69_error)
            __Pyx_GOTREF(__pyx_t_15);
            if (unlikely(PyDict_SetItem(__pyx_t_17, (PyObject*)__pyx_8genexpr1__pyx_v_pid, (PyObject*)__pyx_t_15))) __PYX_ERR(0, 135, __pyx_L69_error)
            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          }
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_pid);
          goto __pyx_L72_exit_scope;
          __pyx_L69_error:;
          __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_pid);
          goto __pyx_L49_except_error;
          __pyx_L72_exit_scope:;
        } /* exit inner scope */
        __pyx_r = __pyx_t_17;
        __pyx_t_17 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        goto __pyx_L50_except_return;
      }
      goto __pyx_L49_except_error;
      __pyx_L49_except_error:;

      /* "lhapdf.pyx":132
 *         elif len(args) == 2:
 *             x, q = args
 *             try:             # <<<<<<<<<<<<<<
 *                 return [{pid : self._ptr.xfxQ(pid, eachx, eachq) for pid in self.flavors()} for eachx, eachq in zip(x, q)]
 *             except TypeError:
 */
      __Pyx_PyThreadState_assign
      __Pyx_XGIVEREF(__pyx_t_11);
      __Pyx_XGIVEREF(__pyx_t_10);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_ExceptionReset(__pyx_t_11, __pyx_t_10, __pyx_t_9);
      goto __pyx_L1_error;
      __pyx_L51_try_return:;
      __Pyx_PyThreadState_assign
      __Pyx_XGIVEREF(__pyx_t_11);
      __Pyx_XGIVEREF(__pyx_t_10);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_ExceptionReset(__pyx_t_11, __pyx_t_10, __pyx_t_9);
      goto __pyx_L0;
      __pyx_L50_except_return:;
      __Pyx_PyThreadState_assign
      __Pyx_XGIVEREF(__pyx_t_11);
      __Pyx_XGIVEREF(__pyx_t_10);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_ExceptionReset(__pyx_t_11, __pyx_t_10, __pyx_t_9);
      goto __pyx_L0;
    }

    /* "lhapdf.pyx":130
 *                 except TypeError:
 *                     return self._ptr.xfxQ(pid, x, q)
 *         elif len(args) == 2:             # <<<<<<<<<<<<<<
 *             x, q = args
 *             try:
 */
  }

  /* "lhapdf.pyx":137
 *                 return {pid : self._ptr.xfxQ(pid, x, q) for pid in self.flavors()}
 *         else:
 *             raise Exception("Wrong number of arguments given to xfxQ: 2 or 3 required, %d provided" % len(args))             # <<<<<<<<<<<<<<
 * 
 *     def xfxQ2(self, *args):
 */
  /*else*/ {
    __pyx_t_1 = PyTuple_GET_SIZE(__pyx_v_args); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(0, 137, __pyx_L1_error)
    __pyx_t_5 = PyInt_FromSsize_t(__pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 137, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Wrong_number_of_arguments_given, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 137, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 137, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 137, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 137, __pyx_L1_error)
  }

  /* "lhapdf.pyx":100
 *         return self._ptr.alphasQ2(q2)
 * 
 *     def xfxQ(self, *args):             # <<<<<<<<<<<<<<
 *         """Return the PDF xf(x,Q2) value for the given parton ID, x, and Q values.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_XDECREF(__pyx_t_24);
  __Pyx_XDECREF(__pyx_t_25);
  __Pyx_XDECREF(__pyx_t_26);
  __Pyx_AddTraceback("lhapdf.PDF.xfxQ", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_pid);
  __Pyx_XDECREF(__pyx_v_x);
  __Pyx_XDECREF(__pyx_v_q);
  __Pyx_XDECREF(__pyx_v_eachx);
  __Pyx_XDECREF(__pyx_v_eachq);
  __Pyx_XDECREF(__pyx_v_eachpid);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lhapdf.pyx":139
 *             raise Exception("Wrong number of arguments given to xfxQ: 2 or 3 required, %d provided" % len(args))
 * 
 *     def xfxQ2(self, *args):             # <<<<<<<<<<<<<<
 *         """Return the PDF xf(x,Q2) value for the given parton ID, x, and Q2 values.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6lhapdf_3PDF_9xfxQ2(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6lhapdf_3PDF_8xfxQ2[] = "PDF.xfxQ2(self, *args)\nReturn the PDF xf(x,Q2) value for the given parton ID, x, and Q2 values.\n\n        Two forms of arguments are allowed:\n        3-args: (pid, x, q2)\n          If all are scalars, a scalar is returned; if pid is a sequence, a list is\n          returned; if x and q2 are sequences of the same length, they will be zipped\n          and a (maybe nested) list of the return values as for scalar x/q2 will be returned.\n          If pid is None, behave like the 2-arg version.\n        2-args: (x, q2)\n          As for 3 args, but always returning results for all PIDs, as a dict. The return\n          will be many such dicts in a zipped list if x/q2 are sequences.\n        ";
static PyObject *__pyx_pw_6lhapdf_3PDF_9xfxQ2(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("xfxQ2 (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "xfxQ2", 0))) return NULL;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_6lhapdf_3PDF_8xfxQ2(((struct __pyx_obj_6lhapdf_PDF *)__pyx_v_self), __pyx_v_args);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6lhapdf_3PDF_8xfxQ2(struct __pyx_obj_6lhapdf_PDF *__pyx_v_self, PyObject *__pyx_v_args) {
  PyObject *__pyx_v_pid = NULL;
  PyObject *__pyx_v_x = NULL;
  PyObject *__pyx_v_q2 = NULL;
  PyObject *__pyx_v_eachx = NULL;
  PyObject *__pyx_v_eachq2 = NULL;
  PyObject *__pyx_v_eachpid = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *(*__pyx_t_16)(PyObject *);
  PyObject *__pyx_t_17 = NULL;
  PyObject *(*__pyx_t_18)(PyObject *);
  Py_ssize_t __pyx_t_19;
  PyObject *(*__pyx_t_20)(PyObject *);
  double __pyx_t_21;
  double __pyx_t_22;
  double __pyx_t_23;
  PyObject *__pyx_t_24 = NULL;
  PyObject *__pyx_t_25 = NULL;
  PyObject *__pyx_t_26 = NULL;
  __Pyx_RefNannySetupContext("xfxQ2", 0);

  /* "lhapdf.pyx":155
 *         # TODO: Reduce duplication between Q and Q2 variants?
 *         # If only we'd used PID as the final arg rather than the first, then we could have made it optional/default None...
 *         if len(args) == 3:             # <<<<<<<<<<<<<<
 *             pid, x, q2 = args
 *             if pid is None:
 */
  __pyx_t_1 = PyTuple_GET_SIZE(__pyx_v_args); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(0, 155, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_1 == 3) != 0);
  if (__pyx_t_2) {

    /* "lhapdf.pyx":156
 *         # If only we'd used PID as the final arg rather than the first, then we could have made it optional/default None...
 *         if len(args) == 3:
 *             pid, x, q2 = args             # <<<<<<<<<<<<<<
 *             if pid is None:
 *                 return self.xfxQ2(x, q2)
 */
    if (1) {
      PyObject* sequence = __pyx_v_args;
      #if !CYTHON_COMPILING_IN_PYPY
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 3)) {
        if (size > 3) __Pyx_RaiseTooManyValuesError(3);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 156, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_5 = PyTuple_GET_ITEM(sequence, 2); 
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      #else
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 156, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 156, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 156, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      #endif
    }
    __pyx_v_pid = __pyx_t_3;
    __pyx_t_3 = 0;
    __pyx_v_x = __pyx_t_4;
    __pyx_t_4 = 0;
    __pyx_v_q2 = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "lhapdf.pyx":157
 *         if len(args) == 3:
 *             pid, x, q2 = args
 *             if pid is None:             # <<<<<<<<<<<<<<
 *                 return self.xfxQ2(x, q2)
 *             try:
 */
    __pyx_t_2 = (__pyx_v_pid == Py_None);
    __pyx_t_6 = (__pyx_t_2 != 0);
    if (__pyx_t_6) {

      /* "lhapdf.pyx":158
 *             pid, x, q2 = args
 *             if pid is None:
 *                 return self.xfxQ2(x, q2)             # <<<<<<<<<<<<<<
 *             try:
 *                 try:
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_xfxQ2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 158, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = NULL;
      __pyx_t_7 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
          __pyx_t_7 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_x, __pyx_v_q2};
        __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 158, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_GOTREF(__pyx_t_5);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_x, __pyx_v_q2};
        __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 158, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_GOTREF(__pyx_t_5);
      } else
      #endif
      {
        __pyx_t_8 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 158, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        if (__pyx_t_3) {
          __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_3); __pyx_t_3 = NULL;
        }
        __Pyx_INCREF(__pyx_v_x);
        __Pyx_GIVEREF(__pyx_v_x);
        PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_v_x);
        __Pyx_INCREF(__pyx_v_q2);
        __Pyx_GIVEREF(__pyx_v_q2);
        PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_v_q2);
        __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_8, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 158, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_r = __pyx_t_5;
      __pyx_t_5 = 0;
      goto __pyx_L0;

      /* "lhapdf.pyx":157
 *         if len(args) == 3:
 *             pid, x, q2 = args
 *             if pid is None:             # <<<<<<<<<<<<<<
 *                 return self.xfxQ2(x, q2)
 *             try:
 */
    }

    /* "lhapdf.pyx":159
 *             if pid is None:
 *                 return self.xfxQ2(x, q2)
 *             try:             # <<<<<<<<<<<<<<
 *                 try:
 *                     return [[self._ptr.xfxQ2(eachpid, eachx, eachq2) for eachpid in pid] for eachx, eachq2 in zip(x, q2)]
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_9, &__pyx_t_10, &__pyx_t_11);
      __Pyx_XGOTREF(__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_11);
      /*try:*/ {

        /* "lhapdf.pyx":160
 *                 return self.xfxQ2(x, q2)
 *             try:
 *                 try:             # <<<<<<<<<<<<<<
 *                     return [[self._ptr.xfxQ2(eachpid, eachx, eachq2) for eachpid in pid] for eachx, eachq2 in zip(x, q2)]
 *                 except TypeError:
 */
        {
          __Pyx_PyThreadState_declare
          __Pyx_PyThreadState_assign
          __Pyx_ExceptionSave(&__pyx_t_12, &__pyx_t_13, &__pyx_t_14);
          __Pyx_XGOTREF(__pyx_t_12);
          __Pyx_XGOTREF(__pyx_t_13);
          __Pyx_XGOTREF(__pyx_t_14);
          /*try:*/ {

            /* "lhapdf.pyx":161
 *             try:
 *                 try:
 *                     return [[self._ptr.xfxQ2(eachpid, eachx, eachq2) for eachpid in pid] for eachx, eachq2 in zip(x, q2)]             # <<<<<<<<<<<<<<
 *                 except TypeError:
 *                     return [self._ptr.xfxQ2(pid, eachx, eachq2) for eachx, eachq2 in zip(x, q2)]
 */
            __Pyx_XDECREF(__pyx_r);
            __pyx_t_5 = PyList_New(0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 161, __pyx_L13_error)
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_zip); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 161, __pyx_L13_error)
            __Pyx_GOTREF(__pyx_t_8);
            __pyx_t_3 = NULL;
            __pyx_t_7 = 0;
            if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
              __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_8);
              if (likely(__pyx_t_3)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
                __Pyx_INCREF(__pyx_t_3);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_8, function);
                __pyx_t_7 = 1;
              }
            }
            #if CYTHON_FAST_PYCALL
            if (PyFunction_Check(__pyx_t_8)) {
              PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_x, __pyx_v_q2};
              __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_8, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 161, __pyx_L13_error)
              __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
              __Pyx_GOTREF(__pyx_t_4);
            } else
            #endif
            #if CYTHON_FAST_PYCCALL
            if (__Pyx_PyFastCFunction_Check(__pyx_t_8)) {
              PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_x, __pyx_v_q2};
              __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_8, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 161, __pyx_L13_error)
              __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
              __Pyx_GOTREF(__pyx_t_4);
            } else
            #endif
            {
              __pyx_t_15 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 161, __pyx_L13_error)
              __Pyx_GOTREF(__pyx_t_15);
              if (__pyx_t_3) {
                __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_15, 0, __pyx_t_3); __pyx_t_3 = NULL;
              }
              __Pyx_INCREF(__pyx_v_x);
              __Pyx_GIVEREF(__pyx_v_x);
              PyTuple_SET_ITEM(__pyx_t_15, 0+__pyx_t_7, __pyx_v_x);
              __Pyx_INCREF(__pyx_v_q2);
              __Pyx_GIVEREF(__pyx_v_q2);
              PyTuple_SET_ITEM(__pyx_t_15, 1+__pyx_t_7, __pyx_v_q2);
              __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_15, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 161, __pyx_L13_error)
              __Pyx_GOTREF(__pyx_t_4);
              __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
            }
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
              __pyx_t_8 = __pyx_t_4; __Pyx_INCREF(__pyx_t_8); __pyx_t_1 = 0;
              __pyx_t_16 = NULL;
            } else {
              __pyx_t_1 = -1; __pyx_t_8 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 161, __pyx_L13_error)
              __Pyx_GOTREF(__pyx_t_8);
              __pyx_t_16 = Py_TYPE(__pyx_t_8)->tp_iternext; if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 161, __pyx_L13_error)
            }
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            for (;;) {
              if (likely(!__pyx_t_16)) {
                if (likely(PyList_CheckExact(__pyx_t_8))) {
                  if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_8)) break;
                  #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                  __pyx_t_4 = PyList_GET_ITEM(__pyx_t_8, __pyx_t_1); __Pyx_INCREF(__pyx_t_4); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 161, __pyx_L13_error)
                  #else
                  __pyx_t_4 = PySequence_ITEM(__pyx_t_8, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 161, __pyx_L13_error)
                  __Pyx_GOTREF(__pyx_t_4);
                  #endif
                } else {
                  if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_8)) break;
                  #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                  __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_8, __pyx_t_1); __Pyx_INCREF(__pyx_t_4); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 161, __pyx_L13_error)
                  #else
                  __pyx_t_4 = PySequence_ITEM(__pyx_t_8, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 161, __pyx_L13_error)
                  __Pyx_GOTREF(__pyx_t_4);
                  #endif
                }
              } else {
                __pyx_t_4 = __pyx_t_16(__pyx_t_8);
                if (unlikely(!__pyx_t_4)) {
                  PyObject* exc_type = PyErr_Occurred();
                  if (exc_type) {
                    if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                    else __PYX_ERR(0, 161, __pyx_L13_error)
                  }
                  break;
                }
                __Pyx_GOTREF(__pyx_t_4);
              }
              if ((likely(PyTuple_CheckExact(__pyx_t_4))) || (PyList_CheckExact(__pyx_t_4))) {
                PyObject* sequence = __pyx_t_4;
                #if !CYTHON_COMPILING_IN_PYPY
                Py_ssize_t size = Py_SIZE(sequence);
                #else
                Py_ssize_t size = PySequence_Size(sequence);
                #endif
                if (unlikely(size != 2)) {
                  if (size > 2) __Pyx_RaiseTooManyValuesError(2);
                  else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
                  __PYX_ERR(0, 161, __pyx_L13_error)
                }
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                if (likely(PyTuple_CheckExact(sequence))) {
                  __pyx_t_15 = PyTuple_GET_ITEM(sequence, 0); 
                  __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
                } else {
                  __pyx_t_15 = PyList_GET_ITEM(sequence, 0); 
                  __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
                }
                __Pyx_INCREF(__pyx_t_15);
                __Pyx_INCREF(__pyx_t_3);
                #else
                __pyx_t_15 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 161, __pyx_L13_error)
                __Pyx_GOTREF(__pyx_t_15);
                __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 161, __pyx_L13_error)
                __Pyx_GOTREF(__pyx_t_3);
                #endif
                __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
              } else {
                Py_ssize_t index = -1;
                __pyx_t_17 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 161, __pyx_L13_error)
                __Pyx_GOTREF(__pyx_t_17);
                __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
                __pyx_t_18 = Py_TYPE(__pyx_t_17)->tp_iternext;
                index = 0; __pyx_t_15 = __pyx_t_18(__pyx_t_17); if (unlikely(!__pyx_t_15)) goto __pyx_L23_unpacking_failed;
                __Pyx_GOTREF(__pyx_t_15);
                index = 1; __pyx_t_3 = __pyx_t_18(__pyx_t_17); if (unlikely(!__pyx_t_3)) goto __pyx_L23_unpacking_failed;
                __Pyx_GOTREF(__pyx_t_3);
                if (__Pyx_IternextUnpackEndCheck(__pyx_t_18(__pyx_t_17), 2) < 0) __PYX_ERR(0, 161, __pyx_L13_error)
                __pyx_t_18 = NULL;
                __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
                goto __pyx_L24_unpacking_done;
                __pyx_L23_unpacking_failed:;
                __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
                __pyx_t_18 = NULL;
                if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
                __PYX_ERR(0, 161, __pyx_L13_error)
                __pyx_L24_unpacking_done:;
              }
              __Pyx_XDECREF_SET(__pyx_v_eachx, __pyx_t_15);
              __pyx_t_15 = 0;
              __Pyx_XDECREF_SET(__pyx_v_eachq2, __pyx_t_3);
              __pyx_t_3 = 0;
              __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 161, __pyx_L13_error)
              __Pyx_GOTREF(__pyx_t_4);
              if (likely(PyList_CheckExact(__pyx_v_pid)) || PyTuple_CheckExact(__pyx_v_pid)) {
                __pyx_t_3 = __pyx_v_pid; __Pyx_INCREF(__pyx_t_3); __pyx_t_19 = 0;
                __pyx_t_20 = NULL;
              } else {
                __pyx_t_19 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_pid); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 161, __pyx_L13_error)
                __Pyx_GOTREF(__pyx_t_3);
                __pyx_t_20 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 161, __pyx_L13_error)
              }
              for (;;) {
                if (likely(!__pyx_t_20)) {
                  if (likely(PyList_CheckExact(__pyx_t_3))) {
                    if (__pyx_t_19 >= PyList_GET_SIZE(__pyx_t_3)) break;
                    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                    __pyx_t_15 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_19); __Pyx_INCREF(__pyx_t_15); __pyx_t_19++; if (unlikely(0 < 0)) __PYX_ERR(0, 161, __pyx_L13_error)
                    #else
                    __pyx_t_15 = PySequence_ITEM(__pyx_t_3, __pyx_t_19); __pyx_t_19++; if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 161, __pyx_L13_error)
                    __Pyx_GOTREF(__pyx_t_15);
                    #endif
                  } else {
                    if (__pyx_t_19 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
                    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                    __pyx_t_15 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_19); __Pyx_INCREF(__pyx_t_15); __pyx_t_19++; if (unlikely(0 < 0)) __PYX_ERR(0, 161, __pyx_L13_error)
                    #else
                    __pyx_t_15 = PySequence_ITEM(__pyx_t_3, __pyx_t_19); __pyx_t_19++; if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 161, __pyx_L13_error)
                    __Pyx_GOTREF(__pyx_t_15);
                    #endif
                  }
                } else {
                  __pyx_t_15 = __pyx_t_20(__pyx_t_3);
                  if (unlikely(!__pyx_t_15)) {
                    PyObject* exc_type = PyErr_Occurred();
                    if (exc_type) {
                      if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                      else __PYX_ERR(0, 161, __pyx_L13_error)
                    }
                    break;
                  }
                  __Pyx_GOTREF(__pyx_t_15);
                }
                __Pyx_XDECREF_SET(__pyx_v_eachpid, __pyx_t_15);
                __pyx_t_15 = 0;
                __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_v_eachpid); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 161, __pyx_L13_error)
                __pyx_t_21 = __pyx_PyFloat_AsDouble(__pyx_v_eachx); if (unlikely((__pyx_t_21 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 161, __pyx_L13_error)
                __pyx_t_22 = __pyx_PyFloat_AsDouble(__pyx_v_eachq2); if (unlikely((__pyx_t_22 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 161, __pyx_L13_error)
                try {
                  __pyx_t_23 = __pyx_v_self->_ptr->xfxQ2(__pyx_t_7, __pyx_t_21, __pyx_t_22);
                } catch(...) {
                  __Pyx_CppExn2PyErr();
                  __PYX_ERR(0, 161, __pyx_L13_error)
                }
                __pyx_t_15 = PyFloat_FromDouble(__pyx_t_23); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 161, __pyx_L13_error)
                __Pyx_GOTREF(__pyx_t_15);
                if (unlikely(__Pyx_ListComp_Append(__pyx_t_4, (PyObject*)__pyx_t_15))) __PYX_ERR(0, 161, __pyx_L13_error)
                __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
              }
              __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
              if (unlikely(__Pyx_ListComp_Append(__pyx_t_5, (PyObject*)__pyx_t_4))) __PYX_ERR(0, 161, __pyx_L13_error)
              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            }
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            __pyx_r = __pyx_t_5;
            __pyx_t_5 = 0;
            goto __pyx_L17_try_return;

            /* "lhapdf.pyx":160
 *                 return self.xfxQ2(x, q2)
 *             try:
 *                 try:             # <<<<<<<<<<<<<<
 *                     return [[self._ptr.xfxQ2(eachpid, eachx, eachq2) for eachpid in pid] for eachx, eachq2 in zip(x, q2)]
 *                 except TypeError:
 */
          }
          __pyx_L13_error:;
          __Pyx_PyThreadState_assign
          __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
          __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

          /* "lhapdf.pyx":162
 *                 try:
 *                     return [[self._ptr.xfxQ2(eachpid, eachx, eachq2) for eachpid in pid] for eachx, eachq2 in zip(x, q2)]
 *                 except TypeError:             # <<<<<<<<<<<<<<
 *                     return [self._ptr.xfxQ2(pid, eachx, eachq2) for eachx, eachq2 in zip(x, q2)]
 *             except TypeError:
 */
          __pyx_t_7 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_TypeError);
          if (__pyx_t_7) {
            __Pyx_AddTraceback("lhapdf.PDF.xfxQ2", __pyx_clineno, __pyx_lineno, __pyx_filename);
            if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_8, &__pyx_t_4) < 0) __PYX_ERR(0, 162, __pyx_L15_except_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_GOTREF(__pyx_t_8);
            __Pyx_GOTREF(__pyx_t_4);

            /* "lhapdf.pyx":163
 *                     return [[self._ptr.xfxQ2(eachpid, eachx, eachq2) for eachpid in pid] for eachx, eachq2 in zip(x, q2)]
 *                 except TypeError:
 *                     return [self._ptr.xfxQ2(pid, eachx, eachq2) for eachx, eachq2 in zip(x, q2)]             # <<<<<<<<<<<<<<
 *             except TypeError:
 *                 try:
 */
            __Pyx_XDECREF(__pyx_r);
            __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 163, __pyx_L15_except_error)
            __Pyx_GOTREF(__pyx_t_3);
            __pyx_t_17 = __Pyx_GetModuleGlobalName(__pyx_n_s_zip); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 163, __pyx_L15_except_error)
            __Pyx_GOTREF(__pyx_t_17);
            __pyx_t_24 = NULL;
            __pyx_t_7 = 0;
            if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_17))) {
              __pyx_t_24 = PyMethod_GET_SELF(__pyx_t_17);
              if (likely(__pyx_t_24)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_17);
                __Pyx_INCREF(__pyx_t_24);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_17, function);
                __pyx_t_7 = 1;
              }
            }
            #if CYTHON_FAST_PYCALL
            if (PyFunction_Check(__pyx_t_17)) {
              PyObject *__pyx_temp[3] = {__pyx_t_24, __pyx_v_x, __pyx_v_q2};
              __pyx_t_15 = __Pyx_PyFunction_FastCall(__pyx_t_17, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 163, __pyx_L15_except_error)
              __Pyx_XDECREF(__pyx_t_24); __pyx_t_24 = 0;
              __Pyx_GOTREF(__pyx_t_15);
            } else
            #endif
            #if CYTHON_FAST_PYCCALL
            if (__Pyx_PyFastCFunction_Check(__pyx_t_17)) {
              PyObject *__pyx_temp[3] = {__pyx_t_24, __pyx_v_x, __pyx_v_q2};
              __pyx_t_15 = __Pyx_PyCFunction_FastCall(__pyx_t_17, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 163, __pyx_L15_except_error)
              __Pyx_XDECREF(__pyx_t_24); __pyx_t_24 = 0;
              __Pyx_GOTREF(__pyx_t_15);
            } else
            #endif
            {
              __pyx_t_25 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_25)) __PYX_ERR(0, 163, __pyx_L15_except_error)
              __Pyx_GOTREF(__pyx_t_25);
              if (__pyx_t_24) {
                __Pyx_GIVEREF(__pyx_t_24); PyTuple_SET_ITEM(__pyx_t_25, 0, __pyx_t_24); __pyx_t_24 = NULL;
              }
              __Pyx_INCREF(__pyx_v_x);
              __Pyx_GIVEREF(__pyx_v_x);
              PyTuple_SET_ITEM(__pyx_t_25, 0+__pyx_t_7, __pyx_v_x);
              __Pyx_INCREF(__pyx_v_q2);
              __Pyx_GIVEREF(__pyx_v_q2);
              PyTuple_SET_ITEM(__pyx_t_25, 1+__pyx_t_7, __pyx_v_q2);
              __pyx_t_15 = __Pyx_PyObject_Call(__pyx_t_17, __pyx_t_25, NULL); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 163, __pyx_L15_except_error)
              __Pyx_GOTREF(__pyx_t_15);
              __Pyx_DECREF(__pyx_t_25); __pyx_t_25 = 0;
            }
            __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
            if (likely(PyList_CheckExact(__pyx_t_15)) || PyTuple_CheckExact(__pyx_t_15)) {
              __pyx_t_17 = __pyx_t_15; __Pyx_INCREF(__pyx_t_17); __pyx_t_1 = 0;
              __pyx_t_16 = NULL;
            } else {
              __pyx_t_1 = -1; __pyx_t_17 = PyObject_GetIter(__pyx_t_15); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 163, __pyx_L15_except_error)
              __Pyx_GOTREF(__pyx_t_17);
              __pyx_t_16 = Py_TYPE(__pyx_t_17)->tp_iternext; if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 163, __pyx_L15_except_error)
            }
            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
            for (;;) {
              if (likely(!__pyx_t_16)) {
                if (likely(PyList_CheckExact(__pyx_t_17))) {
                  if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_17)) break;
                  #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                  __pyx_t_15 = PyList_GET_ITEM(__pyx_t_17, __pyx_t_1); __Pyx_INCREF(__pyx_t_15); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 163, __pyx_L15_except_error)
                  #else
                  __pyx_t_15 = PySequence_ITEM(__pyx_t_17, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 163, __pyx_L15_except_error)
                  __Pyx_GOTREF(__pyx_t_15);
                  #endif
                } else {
                  if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_17)) break;
                  #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                  __pyx_t_15 = PyTuple_GET_ITEM(__pyx_t_17, __pyx_t_1); __Pyx_INCREF(__pyx_t_15); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 163, __pyx_L15_except_error)
                  #else
                  __pyx_t_15 = PySequence_ITEM(__pyx_t_17, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 163, __pyx_L15_except_error)
                  __Pyx_GOTREF(__pyx_t_15);
                  #endif
                }
              } else {
                __pyx_t_15 = __pyx_t_16(__pyx_t_17);
                if (unlikely(!__pyx_t_15)) {
                  PyObject* exc_type = PyErr_Occurred();
                  if (exc_type) {
                    if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                    else __PYX_ERR(0, 163, __pyx_L15_except_error)
                  }
                  break;
                }
                __Pyx_GOTREF(__pyx_t_15);
              }
              if ((likely(PyTuple_CheckExact(__pyx_t_15))) || (PyList_CheckExact(__pyx_t_15))) {
                PyObject* sequence = __pyx_t_15;
                #if !CYTHON_COMPILING_IN_PYPY
                Py_ssize_t size = Py_SIZE(sequence);
                #else
                Py_ssize_t size = PySequence_Size(sequence);
                #endif
                if (unlikely(size != 2)) {
                  if (size > 2) __Pyx_RaiseTooManyValuesError(2);
                  else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
                  __PYX_ERR(0, 163, __pyx_L15_except_error)
                }
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                if (likely(PyTuple_CheckExact(sequence))) {
                  __pyx_t_25 = PyTuple_GET_ITEM(sequence, 0); 
                  __pyx_t_24 = PyTuple_GET_ITEM(sequence, 1); 
                } else {
                  __pyx_t_25 = PyList_GET_ITEM(sequence, 0); 
                  __pyx_t_24 = PyList_GET_ITEM(sequence, 1); 
                }
                __Pyx_INCREF(__pyx_t_25);
                __Pyx_INCREF(__pyx_t_24);
                #else
                __pyx_t_25 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_25)) __PYX_ERR(0, 163, __pyx_L15_except_error)
                __Pyx_GOTREF(__pyx_t_25);
                __pyx_t_24 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 163, __pyx_L15_except_error)
                __Pyx_GOTREF(__pyx_t_24);
                #endif
                __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
              } else {
                Py_ssize_t index = -1;
                __pyx_t_26 = PyObject_GetIter(__pyx_t_15); if (unlikely(!__pyx_t_26)) __PYX_ERR(0, 163, __pyx_L15_except_error)
                __Pyx_GOTREF(__pyx_t_26);
                __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
                __pyx_t_18 = Py_TYPE(__pyx_t_26)->tp_iternext;
                index = 0; __pyx_t_25 = __pyx_t_18(__pyx_t_26); if (unlikely(!__pyx_t_25)) goto __pyx_L31_unpacking_failed;
                __Pyx_GOTREF(__pyx_t_25);
                index = 1; __pyx_t_24 = __pyx_t_18(__pyx_t_26); if (unlikely(!__pyx_t_24)) goto __pyx_L31_unpacking_failed;
                __Pyx_GOTREF(__pyx_t_24);
                if (__Pyx_IternextUnpackEndCheck(__pyx_t_18(__pyx_t_26), 2) < 0) __PYX_ERR(0, 163, __pyx_L15_except_error)
                __pyx_t_18 = NULL;
                __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;
                goto __pyx_L32_unpacking_done;
                __pyx_L31_unpacking_failed:;
                __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;
                __pyx_t_18 = NULL;
                if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
                __PYX_ERR(0, 163, __pyx_L15_except_error)
                __pyx_L32_unpacking_done:;
              }
              __Pyx_XDECREF_SET(__pyx_v_eachx, __pyx_t_25);
              __pyx_t_25 = 0;
              __Pyx_XDECREF_SET(__pyx_v_eachq2, __pyx_t_24);
              __pyx_t_24 = 0;
              __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_v_pid); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 163, __pyx_L15_except_error)
              __pyx_t_23 = __pyx_PyFloat_AsDouble(__pyx_v_eachx); if (unlikely((__pyx_t_23 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 163, __pyx_L15_except_error)
              __pyx_t_22 = __pyx_PyFloat_AsDouble(__pyx_v_eachq2); if (unlikely((__pyx_t_22 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 163, __pyx_L15_except_error)
              try {
                __pyx_t_21 = __pyx_v_self->_ptr->xfxQ2(__pyx_t_7, __pyx_t_23, __pyx_t_22);
              } catch(...) {
                __Pyx_CppExn2PyErr();
                __PYX_ERR(0, 163, __pyx_L15_except_error)
              }
              __pyx_t_15 = PyFloat_FromDouble(__pyx_t_21); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 163, __pyx_L15_except_error)
              __Pyx_GOTREF(__pyx_t_15);
              if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_15))) __PYX_ERR(0, 163, __pyx_L15_except_error)
              __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
            }
            __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
            __pyx_r = __pyx_t_3;
            __pyx_t_3 = 0;
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            goto __pyx_L16_except_return;
          }
          goto __pyx_L15_except_error;
          __pyx_L15_except_error:;

          /* "lhapdf.pyx":160
 *                 return self.xfxQ2(x, q2)
 *             try:
 *                 try:             # <<<<<<<<<<<<<<
 *                     return [[self._ptr.xfxQ2(eachpid, eachx, eachq2) for eachpid in pid] for eachx, eachq2 in zip(x, q2)]
 *                 except TypeError:
 */
          __Pyx_PyThreadState_assign
          __Pyx_XGIVEREF(__pyx_t_12);
          __Pyx_XGIVEREF(__pyx_t_13);
          __Pyx_XGIVEREF(__pyx_t_14);
          __Pyx_ExceptionReset(__pyx_t_12, __pyx_t_13, __pyx_t_14);
          goto __pyx_L5_error;
          __pyx_L17_try_return:;
          __Pyx_PyThreadState_assign
          __Pyx_XGIVEREF(__pyx_t_12);
          __Pyx_XGIVEREF(__pyx_t_13);
          __Pyx_XGIVEREF(__pyx_t_14);
          __Pyx_ExceptionReset(__pyx_t_12, __pyx_t_13, __pyx_t_14);
          goto __pyx_L9_try_return;
          __pyx_L16_except_return:;
          __Pyx_PyThreadState_assign
          __Pyx_XGIVEREF(__pyx_t_12);
          __Pyx_XGIVEREF(__pyx_t_13);
          __Pyx_XGIVEREF(__pyx_t_14);
          __Pyx_ExceptionReset(__pyx_t_12, __pyx_t_13, __pyx_t_14);
          goto __pyx_L9_try_return;
        }

        /* "lhapdf.pyx":159
 *             if pid is None:
 *                 return self.xfxQ2(x, q2)
 *             try:             # <<<<<<<<<<<<<<
 *                 try:
 *                     return [[self._ptr.xfxQ2(eachpid, eachx, eachq2) for eachpid in pid] for eachx, eachq2 in zip(x, q2)]
 */
      }
      __pyx_L5_error:;
      __Pyx_PyThreadState_assign
      __Pyx_XDECREF(__pyx_t_26); __pyx_t_26 = 0;
      __Pyx_XDECREF(__pyx_t_25); __pyx_t_25 = 0;
      __Pyx_XDECREF(__pyx_t_24); __pyx_t_24 = 0;
      __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
      __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "lhapdf.pyx":164
 *                 except TypeError:
 *                     return [self._ptr.xfxQ2(pid, eachx, eachq2) for eachx, eachq2 in zip(x, q2)]
 *             except TypeError:             # <<<<<<<<<<<<<<
 *                 try:
 *                     return [self._ptr.xfxQ2(eachpid, x, q2) for eachpid in pid]
 */
      __pyx_t_7 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_TypeError);
      if (__pyx_t_7) {
        __Pyx_AddTraceback("lhapdf.PDF.xfxQ2", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_4, &__pyx_t_8, &__pyx_t_5) < 0) __PYX_ERR(0, 164, __pyx_L7_except_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GOTREF(__pyx_t_5);

        /* "lhapdf.pyx":165
 *                     return [self._ptr.xfxQ2(pid, eachx, eachq2) for eachx, eachq2 in zip(x, q2)]
 *             except TypeError:
 *                 try:             # <<<<<<<<<<<<<<
 *                     return [self._ptr.xfxQ2(eachpid, x, q2) for eachpid in pid]
 *                 except TypeError:
 */
        {
          __Pyx_PyThreadState_declare
          __Pyx_PyThreadState_assign
          __Pyx_ExceptionSave(&__pyx_t_14, &__pyx_t_13, &__pyx_t_12);
          __Pyx_XGOTREF(__pyx_t_14);
          __Pyx_XGOTREF(__pyx_t_13);
          __Pyx_XGOTREF(__pyx_t_12);
          /*try:*/ {

            /* "lhapdf.pyx":166
 *             except TypeError:
 *                 try:
 *                     return [self._ptr.xfxQ2(eachpid, x, q2) for eachpid in pid]             # <<<<<<<<<<<<<<
 *                 except TypeError:
 *                     return self._ptr.xfxQ2(pid, x, q2)
 */
            __Pyx_XDECREF(__pyx_r);
            __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 166, __pyx_L35_error)
            __Pyx_GOTREF(__pyx_t_3);
            if (likely(PyList_CheckExact(__pyx_v_pid)) || PyTuple_CheckExact(__pyx_v_pid)) {
              __pyx_t_17 = __pyx_v_pid; __Pyx_INCREF(__pyx_t_17); __pyx_t_1 = 0;
              __pyx_t_16 = NULL;
            } else {
              __pyx_t_1 = -1; __pyx_t_17 = PyObject_GetIter(__pyx_v_pid); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 166, __pyx_L35_error)
              __Pyx_GOTREF(__pyx_t_17);
              __pyx_t_16 = Py_TYPE(__pyx_t_17)->tp_iternext; if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 166, __pyx_L35_error)
            }
            for (;;) {
              if (likely(!__pyx_t_16)) {
                if (likely(PyList_CheckExact(__pyx_t_17))) {
                  if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_17)) break;
                  #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                  __pyx_t_15 = PyList_GET_ITEM(__pyx_t_17, __pyx_t_1); __Pyx_INCREF(__pyx_t_15); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 166, __pyx_L35_error)
                  #else
                  __pyx_t_15 = PySequence_ITEM(__pyx_t_17, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 166, __pyx_L35_error)
                  __Pyx_GOTREF(__pyx_t_15);
                  #endif
                } else {
                  if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_17)) break;
                  #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                  __pyx_t_15 = PyTuple_GET_ITEM(__pyx_t_17, __pyx_t_1); __Pyx_INCREF(__pyx_t_15); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 166, __pyx_L35_error)
                  #else
                  __pyx_t_15 = PySequence_ITEM(__pyx_t_17, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 166, __pyx_L35_error)
                  __Pyx_GOTREF(__pyx_t_15);
                  #endif
                }
              } else {
                __pyx_t_15 = __pyx_t_16(__pyx_t_17);
                if (unlikely(!__pyx_t_15)) {
                  PyObject* exc_type = PyErr_Occurred();
                  if (exc_type) {
                    if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                    else __PYX_ERR(0, 166, __pyx_L35_error)
                  }
                  break;
                }
                __Pyx_GOTREF(__pyx_t_15);
              }
              __Pyx_XDECREF_SET(__pyx_v_eachpid, __pyx_t_15);
              __pyx_t_15 = 0;
              __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_v_eachpid); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 166, __pyx_L35_error)
              __pyx_t_21 = __pyx_PyFloat_AsDouble(__pyx_v_x); if (unlikely((__pyx_t_21 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 166, __pyx_L35_error)
              __pyx_t_22 = __pyx_PyFloat_AsDouble(__pyx_v_q2); if (unlikely((__pyx_t_22 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 166, __pyx_L35_error)
              try {
                __pyx_t_23 = __pyx_v_self->_ptr->xfxQ2(__pyx_t_7, __pyx_t_21, __pyx_t_22);
              } catch(...) {
                __Pyx_CppExn2PyErr();
                __PYX_ERR(0, 166, __pyx_L35_error)
              }
              __pyx_t_15 = PyFloat_FromDouble(__pyx_t_23); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 166, __pyx_L35_error)
              __Pyx_GOTREF(__pyx_t_15);
              if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_15))) __PYX_ERR(0, 166, __pyx_L35_error)
              __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
            }
            __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
            __pyx_r = __pyx_t_3;
            __pyx_t_3 = 0;
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            goto __pyx_L39_try_return;

            /* "lhapdf.pyx":165
 *                     return [self._ptr.xfxQ2(pid, eachx, eachq2) for eachx, eachq2 in zip(x, q2)]
 *             except TypeError:
 *                 try:             # <<<<<<<<<<<<<<
 *                     return [self._ptr.xfxQ2(eachpid, x, q2) for eachpid in pid]
 *                 except TypeError:
 */
          }
          __pyx_L35_error:;
          __Pyx_PyThreadState_assign
          __Pyx_XDECREF(__pyx_t_26); __pyx_t_26 = 0;
          __Pyx_XDECREF(__pyx_t_25); __pyx_t_25 = 0;
          __Pyx_XDECREF(__pyx_t_24); __pyx_t_24 = 0;
          __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
          __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;

          /* "lhapdf.pyx":167
 *                 try:
 *                     return [self._ptr.xfxQ2(eachpid, x, q2) for eachpid in pid]
 *                 except TypeError:             # <<<<<<<<<<<<<<
 *                     return self._ptr.xfxQ2(pid, x, q2)
 *         elif len(args) == 2:
 */
          __pyx_t_7 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_TypeError);
          if (__pyx_t_7) {
            __Pyx_AddTraceback("lhapdf.PDF.xfxQ2", __pyx_clineno, __pyx_lineno, __pyx_filename);
            if (__Pyx_GetException(&__pyx_t_3, &__pyx_t_17, &__pyx_t_15) < 0) __PYX_ERR(0, 167, __pyx_L37_except_error)
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_GOTREF(__pyx_t_17);
            __Pyx_GOTREF(__pyx_t_15);

            /* "lhapdf.pyx":168
 *                     return [self._ptr.xfxQ2(eachpid, x, q2) for eachpid in pid]
 *                 except TypeError:
 *                     return self._ptr.xfxQ2(pid, x, q2)             # <<<<<<<<<<<<<<
 *         elif len(args) == 2:
 *             x, q2 = args
 */
            __Pyx_XDECREF(__pyx_r);
            __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_v_pid); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 168, __pyx_L37_except_error)
            __pyx_t_23 = __pyx_PyFloat_AsDouble(__pyx_v_x); if (unlikely((__pyx_t_23 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 168, __pyx_L37_except_error)
            __pyx_t_22 = __pyx_PyFloat_AsDouble(__pyx_v_q2); if (unlikely((__pyx_t_22 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 168, __pyx_L37_except_error)
            try {
              __pyx_t_21 = __pyx_v_self->_ptr->xfxQ2(__pyx_t_7, __pyx_t_23, __pyx_t_22);
            } catch(...) {
              __Pyx_CppExn2PyErr();
              __PYX_ERR(0, 168, __pyx_L37_except_error)
            }
            __pyx_t_24 = PyFloat_FromDouble(__pyx_t_21); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 168, __pyx_L37_except_error)
            __Pyx_GOTREF(__pyx_t_24);
            __pyx_r = __pyx_t_24;
            __pyx_t_24 = 0;
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
            __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
            goto __pyx_L38_except_return;
          }
          goto __pyx_L37_except_error;
          __pyx_L37_except_error:;

          /* "lhapdf.pyx":165
 *                     return [self._ptr.xfxQ2(pid, eachx, eachq2) for eachx, eachq2 in zip(x, q2)]
 *             except TypeError:
 *                 try:             # <<<<<<<<<<<<<<
 *                     return [self._ptr.xfxQ2(eachpid, x, q2) for eachpid in pid]
 *                 except TypeError:
 */
          __Pyx_PyThreadState_assign
          __Pyx_XGIVEREF(__pyx_t_14);
          __Pyx_XGIVEREF(__pyx_t_13);
          __Pyx_XGIVEREF(__pyx_t_12);
          __Pyx_ExceptionReset(__pyx_t_14, __pyx_t_13, __pyx_t_12);
          goto __pyx_L7_except_error;
          __pyx_L39_try_return:;
          __Pyx_PyThreadState_assign
          __Pyx_XGIVEREF(__pyx_t_14);
          __Pyx_XGIVEREF(__pyx_t_13);
          __Pyx_XGIVEREF(__pyx_t_12);
          __Pyx_ExceptionReset(__pyx_t_14, __pyx_t_13, __pyx_t_12);
          goto __pyx_L8_except_return;
          __pyx_L38_except_return:;
          __Pyx_PyThreadState_assign
          __Pyx_XGIVEREF(__pyx_t_14);
          __Pyx_XGIVEREF(__pyx_t_13);
          __Pyx_XGIVEREF(__pyx_t_12);
          __Pyx_ExceptionReset(__pyx_t_14, __pyx_t_13, __pyx_t_12);
          goto __pyx_L8_except_return;
        }
      }
      goto __pyx_L7_except_error;
      __pyx_L7_except_error:;

      /* "lhapdf.pyx":159
 *             if pid is None:
 *                 return self.xfxQ2(x, q2)
 *             try:             # <<<<<<<<<<<<<<
 *                 try:
 *                     return [[self._ptr.xfxQ2(eachpid, eachx, eachq2) for eachpid in pid] for eachx, eachq2 in zip(x, q2)]
 */
      __Pyx_PyThreadState_assign
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_XGIVEREF(__pyx_t_10);
      __Pyx_XGIVEREF(__pyx_t_11);
      __Pyx_ExceptionReset(__pyx_t_9, __pyx_t_10, __pyx_t_11);
      goto __pyx_L1_error;
      __pyx_L9_try_return:;
      __Pyx_PyThreadState_assign
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_XGIVEREF(__pyx_t_10);
      __Pyx_XGIVEREF(__pyx_t_11);
      __Pyx_ExceptionReset(__pyx_t_9, __pyx_t_10, __pyx_t_11);
      goto __pyx_L0;
      __pyx_L8_except_return:;
      __Pyx_PyThreadState_assign
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_XGIVEREF(__pyx_t_10);
      __Pyx_XGIVEREF(__pyx_t_11);
      __Pyx_ExceptionReset(__pyx_t_9, __pyx_t_10, __pyx_t_11);
      goto __pyx_L0;
    }

    /* "lhapdf.pyx":155
 *         # TODO: Reduce duplication between Q and Q2 variants?
 *         # If only we'd used PID as the final arg rather than the first, then we could have made it optional/default None...
 *         if len(args) == 3:             # <<<<<<<<<<<<<<
 *             pid, x, q2 = args
 *             if pid is None:
 */
  }

  /* "lhapdf.pyx":169
 *                 except TypeError:
 *                     return self._ptr.xfxQ2(pid, x, q2)
 *         elif len(args) == 2:             # <<<<<<<<<<<<<<
 *             x, q2 = args
 *             try:
 */
  __pyx_t_1 = PyTuple_GET_SIZE(__pyx_v_args); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(0, 169, __pyx_L1_error)
  __pyx_t_6 = ((__pyx_t_1 == 2) != 0);
  if (__pyx_t_6) {

    /* "lhapdf.pyx":170
 *                     return self._ptr.xfxQ2(pid, x, q2)
 *         elif len(args) == 2:
 *             x, q2 = args             # <<<<<<<<<<<<<<
 *             try:
 *                 return [{pid : self._ptr.xfxQ2(pid, eachx, eachq2) for pid in self.flavors()} for eachx, eachq2 in zip(x, q2)]
 */
    if (1) {
      PyObject* sequence = __pyx_v_args;
      #if !CYTHON_COMPILING_IN_PYPY
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 170, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_8 = PyTuple_GET_ITEM(sequence, 1); 
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_8);
      #else
      __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 170, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_8 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 170, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      #endif
    }
    __pyx_v_x = __pyx_t_5;
    __pyx_t_5 = 0;
    __pyx_v_q2 = __pyx_t_8;
    __pyx_t_8 = 0;

    /* "lhapdf.pyx":171
 *         elif len(args) == 2:
 *             x, q2 = args
 *             try:             # <<<<<<<<<<<<<<
 *                 return [{pid : self._ptr.xfxQ2(pid, eachx, eachq2) for pid in self.flavors()} for eachx, eachq2 in zip(x, q2)]
 *             except TypeError:
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_11, &__pyx_t_10, &__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_11);
      __Pyx_XGOTREF(__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_9);
      /*try:*/ {

        /* "lhapdf.pyx":172
 *             x, q2 = args
 *             try:
 *                 return [{pid : self._ptr.xfxQ2(pid, eachx, eachq2) for pid in self.flavors()} for eachx, eachq2 in zip(x, q2)]             # <<<<<<<<<<<<<<
 *             except TypeError:
 *                 return {pid : self._ptr.xfxQ2(pid, x, q2) for pid in self.flavors()}
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_8 = PyList_New(0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 172, __pyx_L47_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_zip); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 172, __pyx_L47_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_15 = NULL;
        __pyx_t_7 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_4);
          if (likely(__pyx_t_15)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
            __Pyx_INCREF(__pyx_t_15);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_4, function);
            __pyx_t_7 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_4)) {
          PyObject *__pyx_temp[3] = {__pyx_t_15, __pyx_v_x, __pyx_v_q2};
          __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 172, __pyx_L47_error)
          __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
          __Pyx_GOTREF(__pyx_t_5);
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
          PyObject *__pyx_temp[3] = {__pyx_t_15, __pyx_v_x, __pyx_v_q2};
          __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 172, __pyx_L47_error)
          __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
          __Pyx_GOTREF(__pyx_t_5);
        } else
        #endif
        {
          __pyx_t_17 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 172, __pyx_L47_error)
          __Pyx_GOTREF(__pyx_t_17);
          if (__pyx_t_15) {
            __Pyx_GIVEREF(__pyx_t_15); PyTuple_SET_ITEM(__pyx_t_17, 0, __pyx_t_15); __pyx_t_15 = NULL;
          }
          __Pyx_INCREF(__pyx_v_x);
          __Pyx_GIVEREF(__pyx_v_x);
          PyTuple_SET_ITEM(__pyx_t_17, 0+__pyx_t_7, __pyx_v_x);
          __Pyx_INCREF(__pyx_v_q2);
          __Pyx_GIVEREF(__pyx_v_q2);
          PyTuple_SET_ITEM(__pyx_t_17, 1+__pyx_t_7, __pyx_v_q2);
          __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_17, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 172, __pyx_L47_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
        }
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (likely(PyList_CheckExact(__pyx_t_5)) || PyTuple_CheckExact(__pyx_t_5)) {
          __pyx_t_4 = __pyx_t_5; __Pyx_INCREF(__pyx_t_4); __pyx_t_1 = 0;
          __pyx_t_16 = NULL;
        } else {
          __pyx_t_1 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 172, __pyx_L47_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_16 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 172, __pyx_L47_error)
        }
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        for (;;) {
          if (likely(!__pyx_t_16)) {
            if (likely(PyList_CheckExact(__pyx_t_4))) {
              if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_4)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_5 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_1); __Pyx_INCREF(__pyx_t_5); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 172, __pyx_L47_error)
              #else
              __pyx_t_5 = PySequence_ITEM(__pyx_t_4, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 172, __pyx_L47_error)
              __Pyx_GOTREF(__pyx_t_5);
              #endif
            } else {
              if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_1); __Pyx_INCREF(__pyx_t_5); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 172, __pyx_L47_error)
              #else
              __pyx_t_5 = PySequence_ITEM(__pyx_t_4, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 172, __pyx_L47_error)
              __Pyx_GOTREF(__pyx_t_5);
              #endif
            }
          } else {
            __pyx_t_5 = __pyx_t_16(__pyx_t_4);
            if (unlikely(!__pyx_t_5)) {
              PyObject* exc_type = PyErr_Occurred();
              if (exc_type) {
                if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                else __PYX_ERR(0, 172, __pyx_L47_error)
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_5);
          }
          if ((likely(PyTuple_CheckExact(__pyx_t_5))) || (PyList_CheckExact(__pyx_t_5))) {
            PyObject* sequence = __pyx_t_5;
            #if !CYTHON_COMPILING_IN_PYPY
            Py_ssize_t size = Py_SIZE(sequence);
            #else
            Py_ssize_t size = PySequence_Size(sequence);
            #endif
            if (unlikely(size != 2)) {
              if (size > 2) __Pyx_RaiseTooManyValuesError(2);
              else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
              __PYX_ERR(0, 172, __pyx_L47_error)
            }
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            if (likely(PyTuple_CheckExact(sequence))) {
              __pyx_t_17 = PyTuple_GET_ITEM(sequence, 0); 
              __pyx_t_15 = PyTuple_GET_ITEM(sequence, 1); 
            } else {
              __pyx_t_17 = PyList_GET_ITEM(sequence, 0); 
              __pyx_t_15 = PyList_GET_ITEM(sequence, 1); 
            }
            __Pyx_INCREF(__pyx_t_17);
            __Pyx_INCREF(__pyx_t_15);
            #else
            __pyx_t_17 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 172, __pyx_L47_error)
            __Pyx_GOTREF(__pyx_t_17);
            __pyx_t_15 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 172, __pyx_L47_error)
            __Pyx_GOTREF(__pyx_t_15);
            #endif
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          } else {
            Py_ssize_t index = -1;
            __pyx_t_3 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 172, __pyx_L47_error)
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __pyx_t_18 = Py_TYPE(__pyx_t_3)->tp_iternext;
            index = 0; __pyx_t_17 = __pyx_t_18(__pyx_t_3); if (unlikely(!__pyx_t_17)) goto __pyx_L57_unpacking_failed;
            __Pyx_GOTREF(__pyx_t_17);
            index = 1; __pyx_t_15 = __pyx_t_18(__pyx_t_3); if (unlikely(!__pyx_t_15)) goto __pyx_L57_unpacking_failed;
            __Pyx_GOTREF(__pyx_t_15);
            if (__Pyx_IternextUnpackEndCheck(__pyx_t_18(__pyx_t_3), 2) < 0) __PYX_ERR(0, 172, __pyx_L47_error)
            __pyx_t_18 = NULL;
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            goto __pyx_L58_unpacking_done;
            __pyx_L57_unpacking_failed:;
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __pyx_t_18 = NULL;
            if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
            __PYX_ERR(0, 172, __pyx_L47_error)
            __pyx_L58_unpacking_done:;
          }
          __Pyx_XDECREF_SET(__pyx_v_eachx, __pyx_t_17);
          __pyx_t_17 = 0;
          __Pyx_XDECREF_SET(__pyx_v_eachq2, __pyx_t_15);
          __pyx_t_15 = 0;
          { /* enter inner scope */
            PyObject *__pyx_8genexpr2__pyx_v_pid = NULL;
            __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 172, __pyx_L61_error)
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_17 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_flavors); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 172, __pyx_L61_error)
            __Pyx_GOTREF(__pyx_t_17);
            __pyx_t_3 = NULL;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_17))) {
              __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_17);
              if (likely(__pyx_t_3)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_17);
                __Pyx_INCREF(__pyx_t_3);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_17, function);
              }
            }
            if (__pyx_t_3) {
              __pyx_t_15 = __Pyx_PyObject_CallOneArg(__pyx_t_17, __pyx_t_3); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 172, __pyx_L61_error)
              __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            } else {
              __pyx_t_15 = __Pyx_PyObject_CallNoArg(__pyx_t_17); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 172, __pyx_L61_error)
            }
            __Pyx_GOTREF(__pyx_t_15);
            __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
            if (likely(PyList_CheckExact(__pyx_t_15)) || PyTuple_CheckExact(__pyx_t_15)) {
              __pyx_t_17 = __pyx_t_15; __Pyx_INCREF(__pyx_t_17); __pyx_t_19 = 0;
              __pyx_t_20 = NULL;
            } else {
              __pyx_t_19 = -1; __pyx_t_17 = PyObject_GetIter(__pyx_t_15); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 172, __pyx_L61_error)
              __Pyx_GOTREF(__pyx_t_17);
              __pyx_t_20 = Py_TYPE(__pyx_t_17)->tp_iternext; if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 172, __pyx_L61_error)
            }
            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
            for (;;) {
              if (likely(!__pyx_t_20)) {
                if (likely(PyList_CheckExact(__pyx_t_17))) {
                  if (__pyx_t_19 >= PyList_GET_SIZE(__pyx_t_17)) break;
                  #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                  __pyx_t_15 = PyList_GET_ITEM(__pyx_t_17, __pyx_t_19); __Pyx_INCREF(__pyx_t_15); __pyx_t_19++; if (unlikely(0 < 0)) __PYX_ERR(0, 172, __pyx_L61_error)
                  #else
                  __pyx_t_15 = PySequence_ITEM(__pyx_t_17, __pyx_t_19); __pyx_t_19++; if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 172, __pyx_L61_error)
                  __Pyx_GOTREF(__pyx_t_15);
                  #endif
                } else {
                  if (__pyx_t_19 >= PyTuple_GET_SIZE(__pyx_t_17)) break;
                  #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                  __pyx_t_15 = PyTuple_GET_ITEM(__pyx_t_17, __pyx_t_19); __Pyx_INCREF(__pyx_t_15); __pyx_t_19++; if (unlikely(0 < 0)) __PYX_ERR(0, 172, __pyx_L61_error)
                  #else
                  __pyx_t_15 = PySequence_ITEM(__pyx_t_17, __pyx_t_19); __pyx_t_19++; if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 172, __pyx_L61_error)
                  __Pyx_GOTREF(__pyx_t_15);
                  #endif
                }
              } else {
                __pyx_t_15 = __pyx_t_20(__pyx_t_17);
                if (unlikely(!__pyx_t_15)) {
                  PyObject* exc_type = PyErr_Occurred();
                  if (exc_type) {
                    if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                    else __PYX_ERR(0, 172, __pyx_L61_error)
                  }
                  break;
                }
                __Pyx_GOTREF(__pyx_t_15);
              }
              __Pyx_XDECREF_SET(__pyx_8genexpr2__pyx_v_pid, __pyx_t_15);
              __pyx_t_15 = 0;
              __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_8genexpr2__pyx_v_pid); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 172, __pyx_L61_error)
              __pyx_t_21 = __pyx_PyFloat_AsDouble(__pyx_v_eachx); if (unlikely((__pyx_t_21 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 172, __pyx_L61_error)
              __pyx_t_22 = __pyx_PyFloat_AsDouble(__pyx_v_eachq2); if (unlikely((__pyx_t_22 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 172, __pyx_L61_error)
              try {
                __pyx_t_23 = __pyx_v_self->_ptr->xfxQ2(__pyx_t_7, __pyx_t_21, __pyx_t_22);
              } catch(...) {
                __Pyx_CppExn2PyErr();
                __PYX_ERR(0, 172, __pyx_L61_error)
              }
              __pyx_t_15 = PyFloat_FromDouble(__pyx_t_23); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 172, __pyx_L61_error)
              __Pyx_GOTREF(__pyx_t_15);
              if (unlikely(PyDict_SetItem(__pyx_t_5, (PyObject*)__pyx_8genexpr2__pyx_v_pid, (PyObject*)__pyx_t_15))) __PYX_ERR(0, 172, __pyx_L61_error)
              __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
            }
            __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
            __Pyx_XDECREF(__pyx_8genexpr2__pyx_v_pid);
            goto __pyx_L64_exit_scope;
            __pyx_L61_error:;
            __Pyx_XDECREF(__pyx_8genexpr2__pyx_v_pid);
            goto __pyx_L47_error;
            __pyx_L64_exit_scope:;
          } /* exit inner scope */
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_8, (PyObject*)__pyx_t_5))) __PYX_ERR(0, 172, __pyx_L47_error)
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        }
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_r = __pyx_t_8;
        __pyx_t_8 = 0;
        goto __pyx_L51_try_return;

        /* "lhapdf.pyx":171
 *         elif len(args) == 2:
 *             x, q2 = args
 *             try:             # <<<<<<<<<<<<<<
 *                 return [{pid : self._ptr.xfxQ2(pid, eachx, eachq2) for pid in self.flavors()} for eachx, eachq2 in zip(x, q2)]
 *             except TypeError:
 */
      }
      __pyx_L47_error:;
      __Pyx_PyThreadState_assign
      __Pyx_XDECREF(__pyx_t_26); __pyx_t_26 = 0;
      __Pyx_XDECREF(__pyx_t_25); __pyx_t_25 = 0;
      __Pyx_XDECREF(__pyx_t_24); __pyx_t_24 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
      __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "lhapdf.pyx":173
 *             try:
 *                 return [{pid : self._ptr.xfxQ2(pid, eachx, eachq2) for pid in self.flavors()} for eachx, eachq2 in zip(x, q2)]
 *             except TypeError:             # <<<<<<<<<<<<<<
 *                 return {pid : self._ptr.xfxQ2(pid, x, q2) for pid in self.flavors()}
 *         else:
 */
      __pyx_t_7 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_TypeError);
      if (__pyx_t_7) {
        __Pyx_AddTraceback("lhapdf.PDF.xfxQ2", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_8, &__pyx_t_4, &__pyx_t_5) < 0) __PYX_ERR(0, 173, __pyx_L49_except_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_GOTREF(__pyx_t_5);

        /* "lhapdf.pyx":174
 *                 return [{pid : self._ptr.xfxQ2(pid, eachx, eachq2) for pid in self.flavors()} for eachx, eachq2 in zip(x, q2)]
 *             except TypeError:
 *                 return {pid : self._ptr.xfxQ2(pid, x, q2) for pid in self.flavors()}             # <<<<<<<<<<<<<<
 *         else:
 *             raise Exception("Wrong number of arguments given to xfxQ2: 2 or 3 required, %d provided" % len(args))
 */
        __Pyx_XDECREF(__pyx_r);
        { /* enter inner scope */
          PyObject *__pyx_8genexpr3__pyx_v_pid = NULL;
          __pyx_t_17 = PyDict_New(); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 174, __pyx_L69_error)
          __Pyx_GOTREF(__pyx_t_17);
          __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_flavors); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 174, __pyx_L69_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_24 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
            __pyx_t_24 = PyMethod_GET_SELF(__pyx_t_3);
            if (likely(__pyx_t_24)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
              __Pyx_INCREF(__pyx_t_24);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_3, function);
            }
          }
          if (__pyx_t_24) {
            __pyx_t_15 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_24); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 174, __pyx_L69_error)
            __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;
          } else {
            __pyx_t_15 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 174, __pyx_L69_error)
          }
          __Pyx_GOTREF(__pyx_t_15);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          if (likely(PyList_CheckExact(__pyx_t_15)) || PyTuple_CheckExact(__pyx_t_15)) {
            __pyx_t_3 = __pyx_t_15; __Pyx_INCREF(__pyx_t_3); __pyx_t_1 = 0;
            __pyx_t_16 = NULL;
          } else {
            __pyx_t_1 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_15); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 174, __pyx_L69_error)
            __Pyx_GOTREF(__pyx_t_3);
            __pyx_t_16 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 174, __pyx_L69_error)
          }
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          for (;;) {
            if (likely(!__pyx_t_16)) {
              if (likely(PyList_CheckExact(__pyx_t_3))) {
                if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_3)) break;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                __pyx_t_15 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_1); __Pyx_INCREF(__pyx_t_15); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 174, __pyx_L69_error)
                #else
                __pyx_t_15 = PySequence_ITEM(__pyx_t_3, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 174, __pyx_L69_error)
                __Pyx_GOTREF(__pyx_t_15);
                #endif
              } else {
                if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                __pyx_t_15 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_1); __Pyx_INCREF(__pyx_t_15); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 174, __pyx_L69_error)
                #else
                __pyx_t_15 = PySequence_ITEM(__pyx_t_3, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 174, __pyx_L69_error)
                __Pyx_GOTREF(__pyx_t_15);
                #endif
              }
            } else {
              __pyx_t_15 = __pyx_t_16(__pyx_t_3);
              if (unlikely(!__pyx_t_15)) {
                PyObject* exc_type = PyErr_Occurred();
                if (exc_type) {
                  if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                  else __PYX_ERR(0, 174, __pyx_L69_error)
                }
                break;
              }
              __Pyx_GOTREF(__pyx_t_15);
            }
            __Pyx_XDECREF_SET(__pyx_8genexpr3__pyx_v_pid, __pyx_t_15);
            __pyx_t_15 = 0;
            __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_8genexpr3__pyx_v_pid); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 174, __pyx_L69_error)
            __pyx_t_23 = __pyx_PyFloat_AsDouble(__pyx_v_x); if (unlikely((__pyx_t_23 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 174, __pyx_L69_error)
            __pyx_t_22 = __pyx_PyFloat_AsDouble(__pyx_v_q2); if (unlikely((__pyx_t_22 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 174, __pyx_L69_error)
            try {
              __pyx_t_21 = __pyx_v_self->_ptr->xfxQ2(__pyx_t_7, __pyx_t_23, __pyx_t_22);
            } catch(...) {
              __Pyx_CppExn2PyErr();
              __PYX_ERR(0, 174, __pyx_L69_error)
            }
            __pyx_t_15 = PyFloat_FromDouble(__pyx_t_21); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 174, __pyx_L69_error)
            __Pyx_GOTREF(__pyx_t_15);
            if (unlikely(PyDict_SetItem(__pyx_t_17, (PyObject*)__pyx_8genexpr3__pyx_v_pid, (PyObject*)__pyx_t_15))) __PYX_ERR(0, 174, __pyx_L69_error)
            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          }
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_XDECREF(__pyx_8genexpr3__pyx_v_pid);
          goto __pyx_L72_exit_scope;
          __pyx_L69_error:;
          __Pyx_XDECREF(__pyx_8genexpr3__pyx_v_pid);
          goto __pyx_L49_except_error;
          __pyx_L72_exit_scope:;
        } /* exit inner scope */
        __pyx_r = __pyx_t_17;
        __pyx_t_17 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        goto __pyx_L50_except_return;
      }
      goto __pyx_L49_except_error;
      __pyx_L49_except_error:;

      /* "lhapdf.pyx":171
 *         elif len(args) == 2:
 *             x, q2 = args
 *             try:             # <<<<<<<<<<<<<<
 *                 return [{pid : self._ptr.xfxQ2(pid, eachx, eachq2) for pid in self.flavors()} for eachx, eachq2 in zip(x, q2)]
 *             except TypeError:
 */
      __Pyx_PyThreadState_assign
      __Pyx_XGIVEREF(__pyx_t_11);
      __Pyx_XGIVEREF(__pyx_t_10);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_ExceptionReset(__pyx_t_11, __pyx_t_10, __pyx_t_9);
      goto __pyx_L1_error;
      __pyx_L51_try_return:;
      __Pyx_PyThreadState_assign
      __Pyx_XGIVEREF(__pyx_t_11);
      __Pyx_XGIVEREF(__pyx_t_10);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_ExceptionReset(__pyx_t_11, __pyx_t_10, __pyx_t_9);
      goto __pyx_L0;
      __pyx_L50_except_return:;
      __Pyx_PyThreadState_assign
      __Pyx_XGIVEREF(__pyx_t_11);
      __Pyx_XGIVEREF(__pyx_t_10);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_ExceptionReset(__pyx_t_11, __pyx_t_10, __pyx_t_9);
      goto __pyx_L0;
    }

    /* "lhapdf.pyx":169
 *                 except TypeError:
 *                     return self._ptr.xfxQ2(pid, x, q2)
 *         elif len(args) == 2:             # <<<<<<<<<<<<<<
 *             x, q2 = args
 *             try:
 */
  }

  /* "lhapdf.pyx":176
 *                 return {pid : self._ptr.xfxQ2(pid, x, q2) for pid in self.flavors()}
 *         else:
 *             raise Exception("Wrong number of arguments given to xfxQ2: 2 or 3 required, %d provided" % len(args))             # <<<<<<<<<<<<<<
 * 
 *     def inRangeQ(self, q):
 */
  /*else*/ {
    __pyx_t_1 = PyTuple_GET_SIZE(__pyx_v_args); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(0, 176, __pyx_L1_error)
    __pyx_t_5 = PyInt_FromSsize_t(__pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 176, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Wrong_number_of_arguments_given_2, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 176, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 176, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 176, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 176, __pyx_L1_error)
  }

  /* "lhapdf.pyx":139
 *             raise Exception("Wrong number of arguments given to xfxQ: 2 or 3 required, %d provided" % len(args))
 * 
 *     def xfxQ2(self, *args):             # <<<<<<<<<<<<<<
 *         """Return the PDF xf(x,Q2) value for the given parton ID, x, and Q2 values.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_XDECREF(__pyx_t_24);
  __Pyx_XDECREF(__pyx_t_25);
  __Pyx_XDECREF(__pyx_t_26);
  __Pyx_AddTraceback("lhapdf.PDF.xfxQ2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_pid);
  __Pyx_XDECREF(__pyx_v_x);
  __Pyx_XDECREF(__pyx_v_q2);
  __Pyx_XDECREF(__pyx_v_eachx);
  __Pyx_XDECREF(__pyx_v_eachq2);
  __Pyx_XDECREF(__pyx_v_eachpid);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lhapdf.pyx":178
 *             raise Exception("Wrong number of arguments given to xfxQ2: 2 or 3 required, %d provided" % len(args))
 * 
 *     def inRangeQ(self, q):             # <<<<<<<<<<<<<<
 *         "Check if the specified Q value is in the unextrapolated range of this PDF."
 *         return self._ptr.inRangeQ(q)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6lhapdf_3PDF_11inRangeQ(PyObject *__pyx_v_self, PyObject *__pyx_v_q); /*proto*/
static char __pyx_doc_6lhapdf_3PDF_10inRangeQ[] = "PDF.inRangeQ(self, q)\nCheck if the specified Q value is in the unextrapolated range of this PDF.";
static PyObject *__pyx_pw_6lhapdf_3PDF_11inRangeQ(PyObject *__pyx_v_self, PyObject *__pyx_v_q) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("inRangeQ (wrapper)", 0);
  __pyx_r = __pyx_pf_6lhapdf_3PDF_10inRangeQ(((struct __pyx_obj_6lhapdf_PDF *)__pyx_v_self), ((PyObject *)__pyx_v_q));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6lhapdf_3PDF_10inRangeQ(struct __pyx_obj_6lhapdf_PDF *__pyx_v_self, PyObject *__pyx_v_q) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  bool __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("inRangeQ", 0);

  /* "lhapdf.pyx":180
 *     def inRangeQ(self, q):
 *         "Check if the specified Q value is in the unextrapolated range of this PDF."
 *         return self._ptr.inRangeQ(q)             # <<<<<<<<<<<<<<
 * 
 *     def inRangeQ2(self, q2):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_q); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 180, __pyx_L1_error)
  try {
    __pyx_t_2 = __pyx_v_self->_ptr->inRangeQ(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 180, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "lhapdf.pyx":178
 *             raise Exception("Wrong number of arguments given to xfxQ2: 2 or 3 required, %d provided" % len(args))
 * 
 *     def inRangeQ(self, q):             # <<<<<<<<<<<<<<
 *         "Check if the specified Q value is in the unextrapolated range of this PDF."
 *         return self._ptr.inRangeQ(q)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("lhapdf.PDF.inRangeQ", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lhapdf.pyx":182
 *         return self._ptr.inRangeQ(q)
 * 
 *     def inRangeQ2(self, q2):             # <<<<<<<<<<<<<<
 *         "Check if the specified Q2 value is in the unextrapolated range of this PDF."
 *         return self._ptr.inRangeQ2(q2)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6lhapdf_3PDF_13inRangeQ2(PyObject *__pyx_v_self, PyObject *__pyx_v_q2); /*proto*/
static char __pyx_doc_6lhapdf_3PDF_12inRangeQ2[] = "PDF.inRangeQ2(self, q2)\nCheck if the specified Q2 value is in the unextrapolated range of this PDF.";
static PyObject *__pyx_pw_6lhapdf_3PDF_13inRangeQ2(PyObject *__pyx_v_self, PyObject *__pyx_v_q2) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("inRangeQ2 (wrapper)", 0);
  __pyx_r = __pyx_pf_6lhapdf_3PDF_12inRangeQ2(((struct __pyx_obj_6lhapdf_PDF *)__pyx_v_self), ((PyObject *)__pyx_v_q2));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6lhapdf_3PDF_12inRangeQ2(struct __pyx_obj_6lhapdf_PDF *__pyx_v_self, PyObject *__pyx_v_q2) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  bool __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("inRangeQ2", 0);

  /* "lhapdf.pyx":184
 *     def inRangeQ2(self, q2):
 *         "Check if the specified Q2 value is in the unextrapolated range of this PDF."
 *         return self._ptr.inRangeQ2(q2)             # <<<<<<<<<<<<<<
 * 
 *     def inRangeX(self, x):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_q2); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 184, __pyx_L1_error)
  try {
    __pyx_t_2 = __pyx_v_self->_ptr->inRangeQ2(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 184, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 184, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "lhapdf.pyx":182
 *         return self._ptr.inRangeQ(q)
 * 
 *     def inRangeQ2(self, q2):             # <<<<<<<<<<<<<<
 *         "Check if the specified Q2 value is in the unextrapolated range of this PDF."
 *         return self._ptr.inRangeQ2(q2)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("lhapdf.PDF.inRangeQ2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lhapdf.pyx":186
 *         return self._ptr.inRangeQ2(q2)
 * 
 *     def inRangeX(self, x):             # <<<<<<<<<<<<<<
 *         "Check if the specified x value is in the unextrapolated range of this PDF."
 *         return self._ptr.inRangeX(x)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6lhapdf_3PDF_15inRangeX(PyObject *__pyx_v_self, PyObject *__pyx_v_x); /*proto*/
static char __pyx_doc_6lhapdf_3PDF_14inRangeX[] = "PDF.inRangeX(self, x)\nCheck if the specified x value is in the unextrapolated range of this PDF.";
static PyObject *__pyx_pw_6lhapdf_3PDF_15inRangeX(PyObject *__pyx_v_self, PyObject *__pyx_v_x) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("inRangeX (wrapper)", 0);
  __pyx_r = __pyx_pf_6lhapdf_3PDF_14inRangeX(((struct __pyx_obj_6lhapdf_PDF *)__pyx_v_self), ((PyObject *)__pyx_v_x));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6lhapdf_3PDF_14inRangeX(struct __pyx_obj_6lhapdf_PDF *__pyx_v_self, PyObject *__pyx_v_x) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  bool __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("inRangeX", 0);

  /* "lhapdf.pyx":188
 *     def inRangeX(self, x):
 *         "Check if the specified x value is in the unextrapolated range of this PDF."
 *         return self._ptr.inRangeX(x)             # <<<<<<<<<<<<<<
 * 
 *     def inRangeXQ(self, x, q):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_x); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 188, __pyx_L1_error)
  try {
    __pyx_t_2 = __pyx_v_self->_ptr->inRangeX(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 188, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 188, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "lhapdf.pyx":186
 *         return self._ptr.inRangeQ2(q2)
 * 
 *     def inRangeX(self, x):             # <<<<<<<<<<<<<<
 *         "Check if the specified x value is in the unextrapolated range of this PDF."
 *         return self._ptr.inRangeX(x)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("lhapdf.PDF.inRangeX", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lhapdf.pyx":190
 *         return self._ptr.inRangeX(x)
 * 
 *     def inRangeXQ(self, x, q):             # <<<<<<<<<<<<<<
 *         "Check if the specified x and Q values are in the unextrapolated range of this PDF."
 *         return self._ptr.inRangeXQ(x, q)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6lhapdf_3PDF_17inRangeXQ(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6lhapdf_3PDF_16inRangeXQ[] = "PDF.inRangeXQ(self, x, q)\nCheck if the specified x and Q values are in the unextrapolated range of this PDF.";
static PyObject *__pyx_pw_6lhapdf_3PDF_17inRangeXQ(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_x = 0;
  PyObject *__pyx_v_q = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("inRangeXQ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_q,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("inRangeXQ", 1, 2, 2, 1); __PYX_ERR(0, 190, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "inRangeXQ") < 0)) __PYX_ERR(0, 190, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_x = values[0];
    __pyx_v_q = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("inRangeXQ", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 190, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("lhapdf.PDF.inRangeXQ", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6lhapdf_3PDF_16inRangeXQ(((struct __pyx_obj_6lhapdf_PDF *)__pyx_v_self), __pyx_v_x, __pyx_v_q);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6lhapdf_3PDF_16inRangeXQ(struct __pyx_obj_6lhapdf_PDF *__pyx_v_self, PyObject *__pyx_v_x, PyObject *__pyx_v_q) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  double __pyx_t_2;
  bool __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("inRangeXQ", 0);

  /* "lhapdf.pyx":192
 *     def inRangeXQ(self, x, q):
 *         "Check if the specified x and Q values are in the unextrapolated range of this PDF."
 *         return self._ptr.inRangeXQ(x, q)             # <<<<<<<<<<<<<<
 * 
 *     def inRangeXQ2(self, x, q2):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_x); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 192, __pyx_L1_error)
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_v_q); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 192, __pyx_L1_error)
  try {
    __pyx_t_3 = __pyx_v_self->_ptr->inRangeXQ(__pyx_t_1, __pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 192, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 192, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "lhapdf.pyx":190
 *         return self._ptr.inRangeX(x)
 * 
 *     def inRangeXQ(self, x, q):             # <<<<<<<<<<<<<<
 *         "Check if the specified x and Q values are in the unextrapolated range of this PDF."
 *         return self._ptr.inRangeXQ(x, q)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("lhapdf.PDF.inRangeXQ", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lhapdf.pyx":194
 *         return self._ptr.inRangeXQ(x, q)
 * 
 *     def inRangeXQ2(self, x, q2):             # <<<<<<<<<<<<<<
 *         "Check if the specified x and Q2 values are in the unextrapolated range of this PDF."
 *         return self._ptr.inRangeXQ2(x, q2)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6lhapdf_3PDF_19inRangeXQ2(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6lhapdf_3PDF_18inRangeXQ2[] = "PDF.inRangeXQ2(self, x, q2)\nCheck if the specified x and Q2 values are in the unextrapolated range of this PDF.";
static PyObject *__pyx_pw_6lhapdf_3PDF_19inRangeXQ2(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_x = 0;
  PyObject *__pyx_v_q2 = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("inRangeXQ2 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_q2,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("inRangeXQ2", 1, 2, 2, 1); __PYX_ERR(0, 194, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "inRangeXQ2") < 0)) __PYX_ERR(0, 194, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_x = values[0];
    __pyx_v_q2 = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("inRangeXQ2", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 194, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("lhapdf.PDF.inRangeXQ2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6lhapdf_3PDF_18inRangeXQ2(((struct __pyx_obj_6lhapdf_PDF *)__pyx_v_self), __pyx_v_x, __pyx_v_q2);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6lhapdf_3PDF_18inRangeXQ2(struct __pyx_obj_6lhapdf_PDF *__pyx_v_self, PyObject *__pyx_v_x, PyObject *__pyx_v_q2) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  double __pyx_t_2;
  bool __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("inRangeXQ2", 0);

  /* "lhapdf.pyx":196
 *     def inRangeXQ2(self, x, q2):
 *         "Check if the specified x and Q2 values are in the unextrapolated range of this PDF."
 *         return self._ptr.inRangeXQ2(x, q2)             # <<<<<<<<<<<<<<
 * 
 *     def flavors(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_x); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 196, __pyx_L1_error)
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_v_q2); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 196, __pyx_L1_error)
  try {
    __pyx_t_3 = __pyx_v_self->_ptr->inRangeXQ2(__pyx_t_1, __pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 196, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 196, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "lhapdf.pyx":194
 *         return self._ptr.inRangeXQ(x, q)
 * 
 *     def inRangeXQ2(self, x, q2):             # <<<<<<<<<<<<<<
 *         "Check if the specified x and Q2 values are in the unextrapolated range of this PDF."
 *         return self._ptr.inRangeXQ2(x, q2)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("lhapdf.PDF.inRangeXQ2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lhapdf.pyx":198
 *         return self._ptr.inRangeXQ2(x, q2)
 * 
 *     def flavors(self):             # <<<<<<<<<<<<<<
 *         "Return the list of parton IDs supported by this PDF."
 *         # TODO: Use Cython >= 0.17 STL type coercion when available
 */

/* Python wrapper */
static PyObject *__pyx_pw_6lhapdf_3PDF_21flavors(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6lhapdf_3PDF_20flavors[] = "PDF.flavors(self)\nReturn the list of parton IDs supported by this PDF.";
static PyObject *__pyx_pw_6lhapdf_3PDF_21flavors(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("flavors (wrapper)", 0);
  __pyx_r = __pyx_pf_6lhapdf_3PDF_20flavors(((struct __pyx_obj_6lhapdf_PDF *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6lhapdf_3PDF_20flavors(struct __pyx_obj_6lhapdf_PDF *__pyx_v_self) {
  std::vector<int>  __pyx_v_flavs;
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("flavors", 0);

  /* "lhapdf.pyx":201
 *         "Return the list of parton IDs supported by this PDF."
 *         # TODO: Use Cython >= 0.17 STL type coercion when available
 *         cdef vector[int] flavs = self._ptr.flavors()             # <<<<<<<<<<<<<<
 *         return [flavs[i] for i in xrange(flavs.size())]
 * 
 */
  __pyx_v_flavs = __pyx_v_self->_ptr->flavors();

  /* "lhapdf.pyx":202
 *         # TODO: Use Cython >= 0.17 STL type coercion when available
 *         cdef vector[int] flavs = self._ptr.flavors()
 *         return [flavs[i] for i in xrange(flavs.size())]             # <<<<<<<<<<<<<<
 * 
 *     def hasFlavor(self, pid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_flavs.size();
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;
    __pyx_t_4 = __Pyx_PyInt_From_int((__pyx_v_flavs[__pyx_v_i])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 202, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_4))) __PYX_ERR(0, 202, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "lhapdf.pyx":198
 *         return self._ptr.inRangeXQ2(x, q2)
 * 
 *     def flavors(self):             # <<<<<<<<<<<<<<
 *         "Return the list of parton IDs supported by this PDF."
 *         # TODO: Use Cython >= 0.17 STL type coercion when available
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("lhapdf.PDF.flavors", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lhapdf.pyx":204
 *         return [flavs[i] for i in xrange(flavs.size())]
 * 
 *     def hasFlavor(self, pid):             # <<<<<<<<<<<<<<
 *         "Check if the specified parton ID is contained in this PDF."
 *         return self._ptr.hasFlavor(pid)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6lhapdf_3PDF_23hasFlavor(PyObject *__pyx_v_self, PyObject *__pyx_v_pid); /*proto*/
static char __pyx_doc_6lhapdf_3PDF_22hasFlavor[] = "PDF.hasFlavor(self, pid)\nCheck if the specified parton ID is contained in this PDF.";
static PyObject *__pyx_pw_6lhapdf_3PDF_23hasFlavor(PyObject *__pyx_v_self, PyObject *__pyx_v_pid) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("hasFlavor (wrapper)", 0);
  __pyx_r = __pyx_pf_6lhapdf_3PDF_22hasFlavor(((struct __pyx_obj_6lhapdf_PDF *)__pyx_v_self), ((PyObject *)__pyx_v_pid));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6lhapdf_3PDF_22hasFlavor(struct __pyx_obj_6lhapdf_PDF *__pyx_v_self, PyObject *__pyx_v_pid) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  bool __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("hasFlavor", 0);

  /* "lhapdf.pyx":206
 *     def hasFlavor(self, pid):
 *         "Check if the specified parton ID is contained in this PDF."
 *         return self._ptr.hasFlavor(pid)             # <<<<<<<<<<<<<<
 * 
 *     def quarkMass(self, int id):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_pid); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 206, __pyx_L1_error)
  try {
    __pyx_t_2 = __pyx_v_self->_ptr->hasFlavor(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 206, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 206, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "lhapdf.pyx":204
 *         return [flavs[i] for i in xrange(flavs.size())]
 * 
 *     def hasFlavor(self, pid):             # <<<<<<<<<<<<<<
 *         "Check if the specified parton ID is contained in this PDF."
 *         return self._ptr.hasFlavor(pid)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("lhapdf.PDF.hasFlavor", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lhapdf.pyx":208
 *         return self._ptr.hasFlavor(pid)
 * 
 *     def quarkMass(self, int id):             # <<<<<<<<<<<<<<
 *         "Get mass of quark with PID code id"
 *         return self._ptr.quarkMass(id)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6lhapdf_3PDF_25quarkMass(PyObject *__pyx_v_self, PyObject *__pyx_arg_id); /*proto*/
static char __pyx_doc_6lhapdf_3PDF_24quarkMass[] = "PDF.quarkMass(self, int id)\nGet mass of quark with PID code id";
static PyObject *__pyx_pw_6lhapdf_3PDF_25quarkMass(PyObject *__pyx_v_self, PyObject *__pyx_arg_id) {
  int __pyx_v_id;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("quarkMass (wrapper)", 0);
  assert(__pyx_arg_id); {
    __pyx_v_id = __Pyx_PyInt_As_int(__pyx_arg_id); if (unlikely((__pyx_v_id == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 208, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("lhapdf.PDF.quarkMass", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6lhapdf_3PDF_24quarkMass(((struct __pyx_obj_6lhapdf_PDF *)__pyx_v_self), ((int)__pyx_v_id));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6lhapdf_3PDF_24quarkMass(struct __pyx_obj_6lhapdf_PDF *__pyx_v_self, int __pyx_v_id) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("quarkMass", 0);

  /* "lhapdf.pyx":210
 *     def quarkMass(self, int id):
 *         "Get mass of quark with PID code id"
 *         return self._ptr.quarkMass(id)             # <<<<<<<<<<<<<<
 * 
 *     def quarkThreshold(self, int id):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->_ptr->quarkMass(__pyx_v_id);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 210, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 210, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "lhapdf.pyx":208
 *         return self._ptr.hasFlavor(pid)
 * 
 *     def quarkMass(self, int id):             # <<<<<<<<<<<<<<
 *         "Get mass of quark with PID code id"
 *         return self._ptr.quarkMass(id)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("lhapdf.PDF.quarkMass", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lhapdf.pyx":212
 *         return self._ptr.quarkMass(id)
 * 
 *     def quarkThreshold(self, int id):             # <<<<<<<<<<<<<<
 *         "Get activation threshold of quark with PID code id"
 *         return self._ptr.quarkThreshold(id)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6lhapdf_3PDF_27quarkThreshold(PyObject *__pyx_v_self, PyObject *__pyx_arg_id); /*proto*/
static char __pyx_doc_6lhapdf_3PDF_26quarkThreshold[] = "PDF.quarkThreshold(self, int id)\nGet activation threshold of quark with PID code id";
static PyObject *__pyx_pw_6lhapdf_3PDF_27quarkThreshold(PyObject *__pyx_v_self, PyObject *__pyx_arg_id) {
  int __pyx_v_id;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("quarkThreshold (wrapper)", 0);
  assert(__pyx_arg_id); {
    __pyx_v_id = __Pyx_PyInt_As_int(__pyx_arg_id); if (unlikely((__pyx_v_id == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 212, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("lhapdf.PDF.quarkThreshold", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6lhapdf_3PDF_26quarkThreshold(((struct __pyx_obj_6lhapdf_PDF *)__pyx_v_self), ((int)__pyx_v_id));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6lhapdf_3PDF_26quarkThreshold(struct __pyx_obj_6lhapdf_PDF *__pyx_v_self, int __pyx_v_id) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("quarkThreshold", 0);

  /* "lhapdf.pyx":214
 *     def quarkThreshold(self, int id):
 *         "Get activation threshold of quark with PID code id"
 *         return self._ptr.quarkThreshold(id)             # <<<<<<<<<<<<<<
 * 
 *     cdef _set(self):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->_ptr->quarkThreshold(__pyx_v_id);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 214, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 214, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "lhapdf.pyx":212
 *         return self._ptr.quarkMass(id)
 * 
 *     def quarkThreshold(self, int id):             # <<<<<<<<<<<<<<
 *         "Get activation threshold of quark with PID code id"
 *         return self._ptr.quarkThreshold(id)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("lhapdf.PDF.quarkThreshold", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lhapdf.pyx":216
 *         return self._ptr.quarkThreshold(id)
 * 
 *     cdef _set(self):             # <<<<<<<<<<<<<<
 *         cdef PDFSet obj = PDFSet.__new__(PDFSet)
 *         obj.set_ptr(&self._ptr.set())
 */

static PyObject *__pyx_f_6lhapdf_3PDF__set(struct __pyx_obj_6lhapdf_PDF *__pyx_v_self) {
  struct __pyx_obj_6lhapdf_PDFSet *__pyx_v_obj = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("_set", 0);

  /* "lhapdf.pyx":217
 * 
 *     cdef _set(self):
 *         cdef PDFSet obj = PDFSet.__new__(PDFSet)             # <<<<<<<<<<<<<<
 *         obj.set_ptr(&self._ptr.set())
 *         return obj
 */
  __pyx_t_1 = __pyx_tp_new_6lhapdf_PDFSet(((PyTypeObject *)__pyx_ptype_6lhapdf_PDFSet), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 217, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_6lhapdf_PDFSet)))) __PYX_ERR(0, 217, __pyx_L1_error)
  __pyx_v_obj = ((struct __pyx_obj_6lhapdf_PDFSet *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "lhapdf.pyx":218
 *     cdef _set(self):
 *         cdef PDFSet obj = PDFSet.__new__(PDFSet)
 *         obj.set_ptr(&self._ptr.set())             # <<<<<<<<<<<<<<
 *         return obj
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_6lhapdf_PDFSet *)__pyx_v_obj->__pyx_vtab)->set_ptr(__pyx_v_obj, (&__pyx_v_self->_ptr->set())); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 218, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "lhapdf.pyx":219
 *         cdef PDFSet obj = PDFSet.__new__(PDFSet)
 *         obj.set_ptr(&self._ptr.set())
 *         return obj             # <<<<<<<<<<<<<<
 * 
 *     def set(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_obj));
  __pyx_r = ((PyObject *)__pyx_v_obj);
  goto __pyx_L0;

  /* "lhapdf.pyx":216
 *         return self._ptr.quarkThreshold(id)
 * 
 *     cdef _set(self):             # <<<<<<<<<<<<<<
 *         cdef PDFSet obj = PDFSet.__new__(PDFSet)
 *         obj.set_ptr(&self._ptr.set())
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("lhapdf.PDF._set", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_obj);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lhapdf.pyx":221
 *         return obj
 * 
 *     def set(self):             # <<<<<<<<<<<<<<
 *         "Return the corresponding PDFSet"
 *         return self._set()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6lhapdf_3PDF_29set(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6lhapdf_3PDF_28set[] = "PDF.set(self)\nReturn the corresponding PDFSet";
static PyObject *__pyx_pw_6lhapdf_3PDF_29set(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set (wrapper)", 0);
  __pyx_r = __pyx_pf_6lhapdf_3PDF_28set(((struct __pyx_obj_6lhapdf_PDF *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6lhapdf_3PDF_28set(struct __pyx_obj_6lhapdf_PDF *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set", 0);

  /* "lhapdf.pyx":223
 *     def set(self):
 *         "Return the corresponding PDFSet"
 *         return self._set()             # <<<<<<<<<<<<<<
 * 
 *     cdef _info(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_6lhapdf_PDF *)__pyx_v_self->__pyx_vtab)->_set(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 223, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "lhapdf.pyx":221
 *         return obj
 * 
 *     def set(self):             # <<<<<<<<<<<<<<
 *         "Return the corresponding PDFSet"
 *         return self._set()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("lhapdf.PDF.set", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lhapdf.pyx":225
 *         return self._set()
 * 
 *     cdef _info(self):             # <<<<<<<<<<<<<<
 *         cdef PDFInfo obj = PDFInfo.__new__(PDFInfo)
 *         obj.set_ptr(&self._ptr.info())
 */

static PyObject *__pyx_f_6lhapdf_3PDF__info(struct __pyx_obj_6lhapdf_PDF *__pyx_v_self) {
  struct __pyx_obj_6lhapdf_PDFInfo *__pyx_v_obj = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("_info", 0);

  /* "lhapdf.pyx":226
 * 
 *     cdef _info(self):
 *         cdef PDFInfo obj = PDFInfo.__new__(PDFInfo)             # <<<<<<<<<<<<<<
 *         obj.set_ptr(&self._ptr.info())
 *         return obj
 */
  __pyx_t_1 = __pyx_tp_new_6lhapdf_PDFInfo(((PyTypeObject *)__pyx_ptype_6lhapdf_PDFInfo), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 226, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_6lhapdf_PDFInfo)))) __PYX_ERR(0, 226, __pyx_L1_error)
  __pyx_v_obj = ((struct __pyx_obj_6lhapdf_PDFInfo *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "lhapdf.pyx":227
 *     cdef _info(self):
 *         cdef PDFInfo obj = PDFInfo.__new__(PDFInfo)
 *         obj.set_ptr(&self._ptr.info())             # <<<<<<<<<<<<<<
 *         return obj
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_6lhapdf_PDFInfo *)__pyx_v_obj->__pyx_vtab)->set_ptr(__pyx_v_obj, (&__pyx_v_self->_ptr->info())); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 227, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "lhapdf.pyx":228
 *         cdef PDFInfo obj = PDFInfo.__new__(PDFInfo)
 *         obj.set_ptr(&self._ptr.info())
 *         return obj             # <<<<<<<<<<<<<<
 * 
 *     def info(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_obj));
  __pyx_r = ((PyObject *)__pyx_v_obj);
  goto __pyx_L0;

  /* "lhapdf.pyx":225
 *         return self._set()
 * 
 *     cdef _info(self):             # <<<<<<<<<<<<<<
 *         cdef PDFInfo obj = PDFInfo.__new__(PDFInfo)
 *         obj.set_ptr(&self._ptr.info())
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("lhapdf.PDF._info", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_obj);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lhapdf.pyx":230
 *         return obj
 * 
 *     def info(self):             # <<<<<<<<<<<<<<
 *         "Return the corresponding PDFInfo"
 *         return self._info()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6lhapdf_3PDF_31info(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6lhapdf_3PDF_30info[] = "PDF.info(self)\nReturn the corresponding PDFInfo";
static PyObject *__pyx_pw_6lhapdf_3PDF_31info(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("info (wrapper)", 0);
  __pyx_r = __pyx_pf_6lhapdf_3PDF_30info(((struct __pyx_obj_6lhapdf_PDF *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6lhapdf_3PDF_30info(struct __pyx_obj_6lhapdf_PDF *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("info", 0);

  /* "lhapdf.pyx":232
 *     def info(self):
 *         "Return the corresponding PDFInfo"
 *         return self._info()             # <<<<<<<<<<<<<<
 * 
 *     def _print(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_6lhapdf_PDF *)__pyx_v_self->__pyx_vtab)->_info(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 232, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "lhapdf.pyx":230
 *         return obj
 * 
 *     def info(self):             # <<<<<<<<<<<<<<
 *         "Return the corresponding PDFInfo"
 *         return self._info()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("lhapdf.PDF.info", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lhapdf.pyx":234
 *         return self._info()
 * 
 *     def _print(self):             # <<<<<<<<<<<<<<
 *         "Print a short summary to stdout"
 *         self._ptr._print()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6lhapdf_3PDF_33_print(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6lhapdf_3PDF_32_print[] = "PDF._print(self)\nPrint a short summary to stdout";
static PyObject *__pyx_pw_6lhapdf_3PDF_33_print(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_print (wrapper)", 0);
  __pyx_r = __pyx_pf_6lhapdf_3PDF_32_print(((struct __pyx_obj_6lhapdf_PDF *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6lhapdf_3PDF_32_print(struct __pyx_obj_6lhapdf_PDF *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_print", 0);

  /* "lhapdf.pyx":236
 *     def _print(self):
 *         "Print a short summary to stdout"
 *         self._ptr._print()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    __pyx_v_self->_ptr->print();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 236, __pyx_L1_error)
  }

  /* "lhapdf.pyx":234
 *         return self._info()
 * 
 *     def _print(self):             # <<<<<<<<<<<<<<
 *         "Print a short summary to stdout"
 *         self._ptr._print()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("lhapdf.PDF._print", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lhapdf.pyx":244
 *     """
 *     cdef c.Info* _ptr
 *     cdef set_ptr(self, c.Info* ptr):             # <<<<<<<<<<<<<<
 *         self._ptr = ptr
 * 
 */

static PyObject *__pyx_f_6lhapdf_4Info_set_ptr(struct __pyx_obj_6lhapdf_Info *__pyx_v_self, LHAPDF::Info *__pyx_v_ptr) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_ptr", 0);

  /* "lhapdf.pyx":245
 *     cdef c.Info* _ptr
 *     cdef set_ptr(self, c.Info* ptr):
 *         self._ptr = ptr             # <<<<<<<<<<<<<<
 * 
 *     # def metadata(self):
 */
  __pyx_v_self->_ptr = __pyx_v_ptr;

  /* "lhapdf.pyx":244
 *     """
 *     cdef c.Info* _ptr
 *     cdef set_ptr(self, c.Info* ptr):             # <<<<<<<<<<<<<<
 *         self._ptr = ptr
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lhapdf.pyx":251
 *     #     return self._ptr.metadata()
 * 
 *     def has_key(self, key):             # <<<<<<<<<<<<<<
 *         "Return whether or not metadata for this key exists"
 *         return self._ptr.has_key(text_encode(key))
 */

/* Python wrapper */
static PyObject *__pyx_pw_6lhapdf_4Info_1has_key(PyObject *__pyx_v_self, PyObject *__pyx_v_key); /*proto*/
static char __pyx_doc_6lhapdf_4Info_has_key[] = "Info.has_key(self, key)\nReturn whether or not metadata for this key exists";
static PyObject *__pyx_pw_6lhapdf_4Info_1has_key(PyObject *__pyx_v_self, PyObject *__pyx_v_key) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("has_key (wrapper)", 0);
  __pyx_r = __pyx_pf_6lhapdf_4Info_has_key(((struct __pyx_obj_6lhapdf_Info *)__pyx_v_self), ((PyObject *)__pyx_v_key));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6lhapdf_4Info_has_key(struct __pyx_obj_6lhapdf_Info *__pyx_v_self, PyObject *__pyx_v_key) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  std::string __pyx_t_5;
  __Pyx_RefNannySetupContext("has_key", 0);

  /* "lhapdf.pyx":253
 *     def has_key(self, key):
 *         "Return whether or not metadata for this key exists"
 *         return self._ptr.has_key(text_encode(key))             # <<<<<<<<<<<<<<
 * 
 *     def has_key_local(self, key):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_text_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 253, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_key); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 253, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_key};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 253, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_key};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 253, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 253, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __pyx_t_3 = NULL;
      __Pyx_INCREF(__pyx_v_key);
      __Pyx_GIVEREF(__pyx_v_key);
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_key);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 253, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 253, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->_ptr->has_key(__pyx_t_5)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 253, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "lhapdf.pyx":251
 *     #     return self._ptr.metadata()
 * 
 *     def has_key(self, key):             # <<<<<<<<<<<<<<
 *         "Return whether or not metadata for this key exists"
 *         return self._ptr.has_key(text_encode(key))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("lhapdf.Info.has_key", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lhapdf.pyx":255
 *         return self._ptr.has_key(text_encode(key))
 * 
 *     def has_key_local(self, key):             # <<<<<<<<<<<<<<
 *         "Returns whether or not metadata for this key exists at a local level (config/set/member)"
 *         return self._ptr.has_key_local(text_encode(key))
 */

/* Python wrapper */
static PyObject *__pyx_pw_6lhapdf_4Info_3has_key_local(PyObject *__pyx_v_self, PyObject *__pyx_v_key); /*proto*/
static char __pyx_doc_6lhapdf_4Info_2has_key_local[] = "Info.has_key_local(self, key)\nReturns whether or not metadata for this key exists at a local level (config/set/member)";
static PyObject *__pyx_pw_6lhapdf_4Info_3has_key_local(PyObject *__pyx_v_self, PyObject *__pyx_v_key) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("has_key_local (wrapper)", 0);
  __pyx_r = __pyx_pf_6lhapdf_4Info_2has_key_local(((struct __pyx_obj_6lhapdf_Info *)__pyx_v_self), ((PyObject *)__pyx_v_key));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6lhapdf_4Info_2has_key_local(struct __pyx_obj_6lhapdf_Info *__pyx_v_self, PyObject *__pyx_v_key) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  std::string __pyx_t_5;
  __Pyx_RefNannySetupContext("has_key_local", 0);

  /* "lhapdf.pyx":257
 *     def has_key_local(self, key):
 *         "Returns whether or not metadata for this key exists at a local level (config/set/member)"
 *         return self._ptr.has_key_local(text_encode(key))             # <<<<<<<<<<<<<<
 * 
 *     # def get_entry(self, key):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_text_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 257, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_key); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 257, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_key};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 257, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_key};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 257, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 257, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __pyx_t_3 = NULL;
      __Pyx_INCREF(__pyx_v_key);
      __Pyx_GIVEREF(__pyx_v_key);
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_key);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 257, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 257, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->_ptr->has_key_local(__pyx_t_5)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 257, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "lhapdf.pyx":255
 *         return self._ptr.has_key(text_encode(key))
 * 
 *     def has_key_local(self, key):             # <<<<<<<<<<<<<<
 *         "Returns whether or not metadata for this key exists at a local level (config/set/member)"
 *         return self._ptr.has_key_local(text_encode(key))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("lhapdf.Info.has_key_local", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lhapdf.pyx":263
 *     #     return self._ptr.get_entry(key)
 * 
 *     def get_entry(self, key, fallback=None):             # <<<<<<<<<<<<<<
 *         "Returns metadata entry for this key if it exists, otherwise returns a fallback value"
 *         rtn = self._ptr.get_entry(text_encode(key), text_encode(str(fallback)))
 */

/* Python wrapper */
static PyObject *__pyx_pw_6lhapdf_4Info_5get_entry(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6lhapdf_4Info_4get_entry[] = "Info.get_entry(self, key, fallback=None)\nReturns metadata entry for this key if it exists, otherwise returns a fallback value";
static PyObject *__pyx_pw_6lhapdf_4Info_5get_entry(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_key = 0;
  PyObject *__pyx_v_fallback = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_entry (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_key,&__pyx_n_s_fallback,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_key)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_fallback);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_entry") < 0)) __PYX_ERR(0, 263, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_key = values[0];
    __pyx_v_fallback = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_entry", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 263, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("lhapdf.Info.get_entry", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6lhapdf_4Info_4get_entry(((struct __pyx_obj_6lhapdf_Info *)__pyx_v_self), __pyx_v_key, __pyx_v_fallback);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6lhapdf_4Info_4get_entry(struct __pyx_obj_6lhapdf_Info *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_v_fallback) {
  std::string __pyx_v_rtn;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  std::string __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  std::string __pyx_t_7;
  std::string __pyx_t_8;
  int __pyx_t_9;
  __Pyx_RefNannySetupContext("get_entry", 0);

  /* "lhapdf.pyx":265
 *     def get_entry(self, key, fallback=None):
 *         "Returns metadata entry for this key if it exists, otherwise returns a fallback value"
 *         rtn = self._ptr.get_entry(text_encode(key), text_encode(str(fallback)))             # <<<<<<<<<<<<<<
 *         return rtn if str(rtn) != str(fallback) else fallback
 * 
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_text_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 265, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_key); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 265, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_key};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 265, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_key};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 265, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 265, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __pyx_t_3 = NULL;
      __Pyx_INCREF(__pyx_v_key);
      __Pyx_GIVEREF(__pyx_v_key);
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_key);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 265, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 265, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_text_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 265, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 265, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_v_fallback);
  __Pyx_GIVEREF(__pyx_v_fallback);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_fallback);
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 265, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 265, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 265, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 265, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 265, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 265, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_7 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 265, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  try {
    __pyx_t_8 = __pyx_v_self->_ptr->get_entry(__pyx_t_5, __pyx_t_7);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 265, __pyx_L1_error)
  }
  __pyx_v_rtn = __pyx_t_8;

  /* "lhapdf.pyx":266
 *         "Returns metadata entry for this key if it exists, otherwise returns a fallback value"
 *         rtn = self._ptr.get_entry(text_encode(key), text_encode(str(fallback)))
 *         return rtn if str(rtn) != str(fallback) else fallback             # <<<<<<<<<<<<<<
 * 
 *     def set_entry(self, key, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_convert_PyStr_string_to_py_std__in_string(__pyx_v_rtn); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 266, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 266, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 266, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 266, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_INCREF(__pyx_v_fallback);
  __Pyx_GIVEREF(__pyx_v_fallback);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_fallback);
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_6, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 266, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyObject_RichCompare(__pyx_t_2, __pyx_t_3, Py_NE); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 266, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 266, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (__pyx_t_9) {
    __pyx_t_6 = __pyx_convert_PyStr_string_to_py_std__in_string(__pyx_v_rtn); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 266, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_1 = __pyx_t_6;
    __pyx_t_6 = 0;
  } else {
    __Pyx_INCREF(__pyx_v_fallback);
    __pyx_t_1 = __pyx_v_fallback;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "lhapdf.pyx":263
 *     #     return self._ptr.get_entry(key)
 * 
 *     def get_entry(self, key, fallback=None):             # <<<<<<<<<<<<<<
 *         "Returns metadata entry for this key if it exists, otherwise returns a fallback value"
 *         rtn = self._ptr.get_entry(text_encode(key), text_encode(str(fallback)))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("lhapdf.Info.get_entry", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lhapdf.pyx":268
 *         return rtn if str(rtn) != str(fallback) else fallback
 * 
 *     def set_entry(self, key, value):             # <<<<<<<<<<<<<<
 *         "Set a metadata key"
 *         self._ptr.set_entry(text_encode(key), text_encode(str(value)))
 */

/* Python wrapper */
static PyObject *__pyx_pw_6lhapdf_4Info_7set_entry(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6lhapdf_4Info_6set_entry[] = "Info.set_entry(self, key, value)\nSet a metadata key";
static PyObject *__pyx_pw_6lhapdf_4Info_7set_entry(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_key = 0;
  PyObject *__pyx_v_value = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_entry (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_key,&__pyx_n_s_value,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_key)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_entry", 1, 2, 2, 1); __PYX_ERR(0, 268, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_entry") < 0)) __PYX_ERR(0, 268, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_key = values[0];
    __pyx_v_value = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_entry", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 268, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("lhapdf.Info.set_entry", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6lhapdf_4Info_6set_entry(((struct __pyx_obj_6lhapdf_Info *)__pyx_v_self), __pyx_v_key, __pyx_v_value);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6lhapdf_4Info_6set_entry(struct __pyx_obj_6lhapdf_Info *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  std::string __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  std::string __pyx_t_7;
  __Pyx_RefNannySetupContext("set_entry", 0);

  /* "lhapdf.pyx":270
 *     def set_entry(self, key, value):
 *         "Set a metadata key"
 *         self._ptr.set_entry(text_encode(key), text_encode(str(value)))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_text_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 270, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_key); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 270, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_key};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 270, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_key};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 270, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 270, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __pyx_t_3 = NULL;
      __Pyx_INCREF(__pyx_v_key);
      __Pyx_GIVEREF(__pyx_v_key);
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_key);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 270, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 270, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_text_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 270, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 270, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_value);
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 270, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 270, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 270, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 270, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 270, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 270, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_7 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 270, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->_ptr->set_entry(__pyx_t_5, __pyx_t_7);

  /* "lhapdf.pyx":268
 *         return rtn if str(rtn) != str(fallback) else fallback
 * 
 *     def set_entry(self, key, value):             # <<<<<<<<<<<<<<
 *         "Set a metadata key"
 *         self._ptr.set_entry(text_encode(key), text_encode(str(value)))
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("lhapdf.Info.set_entry", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lhapdf.pyx":280
 *     PDF+parameter sets are errplus_pdf, errminus_pdf, errsymm_pdf and err_par.
 *     """
 *     def __init__(self, central=0.0, errplus=0.0, errminus=0.0, errsymm=0.0, scale=0.0, errplus_pdf=0.0, errminus_pdf=0.0, errsymm_pdf=0.0, err_par=0.0):             # <<<<<<<<<<<<<<
 *         self.central  = central
 *         self.errplus  = errplus
 */

/* Python wrapper */
static PyObject *__pyx_pw_6lhapdf_14PDFUncertainty_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6lhapdf_14PDFUncertainty___init__[] = "PDFUncertainty.__init__(self, central=0.0, errplus=0.0, errminus=0.0, errsymm=0.0, scale=0.0, errplus_pdf=0.0, errminus_pdf=0.0, errsymm_pdf=0.0, err_par=0.0)";
static PyMethodDef __pyx_mdef_6lhapdf_14PDFUncertainty_1__init__ = {"__init__", (PyCFunction)__pyx_pw_6lhapdf_14PDFUncertainty_1__init__, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6lhapdf_14PDFUncertainty___init__};
static PyObject *__pyx_pw_6lhapdf_14PDFUncertainty_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_central = 0;
  PyObject *__pyx_v_errplus = 0;
  PyObject *__pyx_v_errminus = 0;
  PyObject *__pyx_v_errsymm = 0;
  PyObject *__pyx_v_scale = 0;
  PyObject *__pyx_v_errplus_pdf = 0;
  PyObject *__pyx_v_errminus_pdf = 0;
  PyObject *__pyx_v_errsymm_pdf = 0;
  PyObject *__pyx_v_err_par = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_central,&__pyx_n_s_errplus,&__pyx_n_s_errminus,&__pyx_n_s_errsymm,&__pyx_n_s_scale,&__pyx_n_s_errplus_pdf,&__pyx_n_s_errminus_pdf,&__pyx_n_s_errsymm_pdf,&__pyx_n_s_err_par,0};
    PyObject* values[10] = {0,0,0,0,0,0,0,0,0,0};
    values[1] = ((PyObject *)((PyObject*)__pyx_float_0_0));
    values[2] = ((PyObject *)((PyObject*)__pyx_float_0_0));
    values[3] = ((PyObject *)((PyObject*)__pyx_float_0_0));
    values[4] = ((PyObject *)((PyObject*)__pyx_float_0_0));
    values[5] = ((PyObject *)((PyObject*)__pyx_float_0_0));
    values[6] = ((PyObject *)((PyObject*)__pyx_float_0_0));
    values[7] = ((PyObject *)((PyObject*)__pyx_float_0_0));
    values[8] = ((PyObject *)((PyObject*)__pyx_float_0_0));
    values[9] = ((PyObject *)((PyObject*)__pyx_float_0_0));
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_central);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_errplus);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_errminus);
          if (value) { values[3] = value; kw_args--; }
        }
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_errsymm);
          if (value) { values[4] = value; kw_args--; }
        }
        case  5:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_scale);
          if (value) { values[5] = value; kw_args--; }
        }
        case  6:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_errplus_pdf);
          if (value) { values[6] = value; kw_args--; }
        }
        case  7:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_errminus_pdf);
          if (value) { values[7] = value; kw_args--; }
        }
        case  8:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_errsymm_pdf);
          if (value) { values[8] = value; kw_args--; }
        }
        case  9:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_err_par);
          if (value) { values[9] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 280, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_self = values[0];
    __pyx_v_central = values[1];
    __pyx_v_errplus = values[2];
    __pyx_v_errminus = values[3];
    __pyx_v_errsymm = values[4];
    __pyx_v_scale = values[5];
    __pyx_v_errplus_pdf = values[6];
    __pyx_v_errminus_pdf = values[7];
    __pyx_v_errsymm_pdf = values[8];
    __pyx_v_err_par = values[9];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 1, 10, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 280, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("lhapdf.PDFUncertainty.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6lhapdf_14PDFUncertainty___init__(__pyx_self, __pyx_v_self, __pyx_v_central, __pyx_v_errplus, __pyx_v_errminus, __pyx_v_errsymm, __pyx_v_scale, __pyx_v_errplus_pdf, __pyx_v_errminus_pdf, __pyx_v_errsymm_pdf, __pyx_v_err_par);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6lhapdf_14PDFUncertainty___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_central, PyObject *__pyx_v_errplus, PyObject *__pyx_v_errminus, PyObject *__pyx_v_errsymm, PyObject *__pyx_v_scale, PyObject *__pyx_v_errplus_pdf, PyObject *__pyx_v_errminus_pdf, PyObject *__pyx_v_errsymm_pdf, PyObject *__pyx_v_err_par) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "lhapdf.pyx":281
 *     """
 *     def __init__(self, central=0.0, errplus=0.0, errminus=0.0, errsymm=0.0, scale=0.0, errplus_pdf=0.0, errminus_pdf=0.0, errsymm_pdf=0.0, err_par=0.0):
 *         self.central  = central             # <<<<<<<<<<<<<<
 *         self.errplus  = errplus
 *         self.errminus = errminus
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_central, __pyx_v_central) < 0) __PYX_ERR(0, 281, __pyx_L1_error)

  /* "lhapdf.pyx":282
 *     def __init__(self, central=0.0, errplus=0.0, errminus=0.0, errsymm=0.0, scale=0.0, errplus_pdf=0.0, errminus_pdf=0.0, errsymm_pdf=0.0, err_par=0.0):
 *         self.central  = central
 *         self.errplus  = errplus             # <<<<<<<<<<<<<<
 *         self.errminus = errminus
 *         self.errsymm  = errsymm
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_errplus, __pyx_v_errplus) < 0) __PYX_ERR(0, 282, __pyx_L1_error)

  /* "lhapdf.pyx":283
 *         self.central  = central
 *         self.errplus  = errplus
 *         self.errminus = errminus             # <<<<<<<<<<<<<<
 *         self.errsymm  = errsymm
 *         self.scale    = scale
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_errminus, __pyx_v_errminus) < 0) __PYX_ERR(0, 283, __pyx_L1_error)

  /* "lhapdf.pyx":284
 *         self.errplus  = errplus
 *         self.errminus = errminus
 *         self.errsymm  = errsymm             # <<<<<<<<<<<<<<
 *         self.scale    = scale
 *         self.errplus_pdf  = errplus_pdf
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_errsymm, __pyx_v_errsymm) < 0) __PYX_ERR(0, 284, __pyx_L1_error)

  /* "lhapdf.pyx":285
 *         self.errminus = errminus
 *         self.errsymm  = errsymm
 *         self.scale    = scale             # <<<<<<<<<<<<<<
 *         self.errplus_pdf  = errplus_pdf
 *         self.errminus_pdf = errminus_pdf
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_scale, __pyx_v_scale) < 0) __PYX_ERR(0, 285, __pyx_L1_error)

  /* "lhapdf.pyx":286
 *         self.errsymm  = errsymm
 *         self.scale    = scale
 *         self.errplus_pdf  = errplus_pdf             # <<<<<<<<<<<<<<
 *         self.errminus_pdf = errminus_pdf
 *         self.errsymm_pdf  = errsymm_pdf
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_errplus_pdf, __pyx_v_errplus_pdf) < 0) __PYX_ERR(0, 286, __pyx_L1_error)

  /* "lhapdf.pyx":287
 *         self.scale    = scale
 *         self.errplus_pdf  = errplus_pdf
 *         self.errminus_pdf = errminus_pdf             # <<<<<<<<<<<<<<
 *         self.errsymm_pdf  = errsymm_pdf
 *         self.err_par       = err_par
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_errminus_pdf, __pyx_v_errminus_pdf) < 0) __PYX_ERR(0, 287, __pyx_L1_error)

  /* "lhapdf.pyx":288
 *         self.errplus_pdf  = errplus_pdf
 *         self.errminus_pdf = errminus_pdf
 *         self.errsymm_pdf  = errsymm_pdf             # <<<<<<<<<<<<<<
 *         self.err_par       = err_par
 * 
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_errsymm_pdf, __pyx_v_errsymm_pdf) < 0) __PYX_ERR(0, 288, __pyx_L1_error)

  /* "lhapdf.pyx":289
 *         self.errminus_pdf = errminus_pdf
 *         self.errsymm_pdf  = errsymm_pdf
 *         self.err_par       = err_par             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_err_par, __pyx_v_err_par) < 0) __PYX_ERR(0, 289, __pyx_L1_error)

  /* "lhapdf.pyx":280
 *     PDF+parameter sets are errplus_pdf, errminus_pdf, errsymm_pdf and err_par.
 *     """
 *     def __init__(self, central=0.0, errplus=0.0, errminus=0.0, errsymm=0.0, scale=0.0, errplus_pdf=0.0, errminus_pdf=0.0, errsymm_pdf=0.0, err_par=0.0):             # <<<<<<<<<<<<<<
 *         self.central  = central
 *         self.errplus  = errplus
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("lhapdf.PDFUncertainty.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lhapdf.pyx":299
 *     """
 *     cdef c.PDFSet* _ptr
 *     cdef set_ptr(self, c.PDFSet* ptr):             # <<<<<<<<<<<<<<
 *         self._ptr = ptr
 * 
 */

static PyObject *__pyx_f_6lhapdf_6PDFSet_set_ptr(struct __pyx_obj_6lhapdf_PDFSet *__pyx_v_self, LHAPDF::PDFSet *__pyx_v_ptr) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_ptr", 0);

  /* "lhapdf.pyx":300
 *     cdef c.PDFSet* _ptr
 *     cdef set_ptr(self, c.PDFSet* ptr):
 *         self._ptr = ptr             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_v_self->_ptr = __pyx_v_ptr;

  /* "lhapdf.pyx":299
 *     """
 *     cdef c.PDFSet* _ptr
 *     cdef set_ptr(self, c.PDFSet* ptr):             # <<<<<<<<<<<<<<
 *         self._ptr = ptr
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lhapdf.pyx":302
 *         self._ptr = ptr
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

/* Python wrapper */
static void __pyx_pw_6lhapdf_6PDFSet_1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_6lhapdf_6PDFSet_1__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_6lhapdf_6PDFSet___dealloc__(((struct __pyx_obj_6lhapdf_PDFSet *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_6lhapdf_6PDFSet___dealloc__(CYTHON_UNUSED struct __pyx_obj_6lhapdf_PDFSet *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "lhapdf.pyx":305
 *         pass
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         "The total number of members in this set."
 *         return self._ptr.size()
 */

/* Python wrapper */
static Py_ssize_t __pyx_pw_6lhapdf_6PDFSet_3__len__(PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_6lhapdf_6PDFSet_2__len__[] = "The total number of members in this set.";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_6lhapdf_6PDFSet_2__len__;
#endif
static Py_ssize_t __pyx_pw_6lhapdf_6PDFSet_3__len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6lhapdf_6PDFSet_2__len__(((struct __pyx_obj_6lhapdf_PDFSet *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_pf_6lhapdf_6PDFSet_2__len__(struct __pyx_obj_6lhapdf_PDFSet *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "lhapdf.pyx":307
 *     def __len__(self):
 *         "The total number of members in this set."
 *         return self._ptr.size()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  try {
    __pyx_t_1 = __pyx_v_self->_ptr->size();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 307, __pyx_L1_error)
  }
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "lhapdf.pyx":305
 *         pass
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         "The total number of members in this set."
 *         return self._ptr.size()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("lhapdf.PDFSet.__len__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lhapdf.pyx":310
 * 
 *     @property
 *     def size(self):             # <<<<<<<<<<<<<<
 *         "The total number of members in this set."
 *         return self._ptr.size()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6lhapdf_6PDFSet_4size_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6lhapdf_6PDFSet_4size_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6lhapdf_6PDFSet_4size___get__(((struct __pyx_obj_6lhapdf_PDFSet *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6lhapdf_6PDFSet_4size___get__(struct __pyx_obj_6lhapdf_PDFSet *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "lhapdf.pyx":312
 *     def size(self):
 *         "The total number of members in this set."
 *         return self._ptr.size()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->_ptr->size();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 312, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyInt_FromSize_t(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 312, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "lhapdf.pyx":310
 * 
 *     @property
 *     def size(self):             # <<<<<<<<<<<<<<
 *         "The total number of members in this set."
 *         return self._ptr.size()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("lhapdf.PDFSet.size.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lhapdf.pyx":315
 * 
 *     @property
 *     def name(self):             # <<<<<<<<<<<<<<
 *         "Name of this PDF's containing set."
 *         return self._ptr.name()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6lhapdf_6PDFSet_4name_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6lhapdf_6PDFSet_4name_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6lhapdf_6PDFSet_4name___get__(((struct __pyx_obj_6lhapdf_PDFSet *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6lhapdf_6PDFSet_4name___get__(struct __pyx_obj_6lhapdf_PDFSet *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "lhapdf.pyx":317
 *     def name(self):
 *         "Name of this PDF's containing set."
 *         return self._ptr.name()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->_ptr->name();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 317, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_convert_PyStr_string_to_py_std__in_string(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 317, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "lhapdf.pyx":315
 * 
 *     @property
 *     def name(self):             # <<<<<<<<<<<<<<
 *         "Name of this PDF's containing set."
 *         return self._ptr.name()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("lhapdf.PDFSet.name.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lhapdf.pyx":320
 * 
 *     @property
 *     def description(self):             # <<<<<<<<<<<<<<
 *         "Description of this PDF's set."
 *         return self._ptr.description()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6lhapdf_6PDFSet_11description_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6lhapdf_6PDFSet_11description_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6lhapdf_6PDFSet_11description___get__(((struct __pyx_obj_6lhapdf_PDFSet *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6lhapdf_6PDFSet_11description___get__(struct __pyx_obj_6lhapdf_PDFSet *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "lhapdf.pyx":322
 *     def description(self):
 *         "Description of this PDF's set."
 *         return self._ptr.description()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_PyStr_string_to_py_std__in_string(__pyx_v_self->_ptr->description()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 322, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "lhapdf.pyx":320
 * 
 *     @property
 *     def description(self):             # <<<<<<<<<<<<<<
 *         "Description of this PDF's set."
 *         return self._ptr.description()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("lhapdf.PDFSet.description.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lhapdf.pyx":325
 * 
 *     @property
 *     def lhapdfID(self):             # <<<<<<<<<<<<<<
 *         "First LHAPDF global index in this PDF set."
 *         return self._ptr.lhapdfID()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6lhapdf_6PDFSet_8lhapdfID_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6lhapdf_6PDFSet_8lhapdfID_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6lhapdf_6PDFSet_8lhapdfID___get__(((struct __pyx_obj_6lhapdf_PDFSet *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6lhapdf_6PDFSet_8lhapdfID___get__(struct __pyx_obj_6lhapdf_PDFSet *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "lhapdf.pyx":327
 *     def lhapdfID(self):
 *         "First LHAPDF global index in this PDF set."
 *         return self._ptr.lhapdfID()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->_ptr->lhapdfID();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 327, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 327, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "lhapdf.pyx":325
 * 
 *     @property
 *     def lhapdfID(self):             # <<<<<<<<<<<<<<
 *         "First LHAPDF global index in this PDF set."
 *         return self._ptr.lhapdfID()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("lhapdf.PDFSet.lhapdfID.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lhapdf.pyx":330
 * 
 *     @property
 *     def dataversion(self):             # <<<<<<<<<<<<<<
 *         "Version of this PDF set's data files."
 *         return self._ptr.dataversion()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6lhapdf_6PDFSet_11dataversion_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6lhapdf_6PDFSet_11dataversion_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6lhapdf_6PDFSet_11dataversion___get__(((struct __pyx_obj_6lhapdf_PDFSet *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6lhapdf_6PDFSet_11dataversion___get__(struct __pyx_obj_6lhapdf_PDFSet *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "lhapdf.pyx":332
 *     def dataversion(self):
 *         "Version of this PDF set's data files."
 *         return self._ptr.dataversion()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->_ptr->dataversion();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 332, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 332, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "lhapdf.pyx":330
 * 
 *     @property
 *     def dataversion(self):             # <<<<<<<<<<<<<<
 *         "Version of this PDF set's data files."
 *         return self._ptr.dataversion()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("lhapdf.PDFSet.dataversion.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lhapdf.pyx":335
 * 
 *     @property
 *     def errorType(self):             # <<<<<<<<<<<<<<
 *         "Type of error treatment in this PDF set."
 *         return self._ptr.errorType()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6lhapdf_6PDFSet_9errorType_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6lhapdf_6PDFSet_9errorType_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6lhapdf_6PDFSet_9errorType___get__(((struct __pyx_obj_6lhapdf_PDFSet *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6lhapdf_6PDFSet_9errorType___get__(struct __pyx_obj_6lhapdf_PDFSet *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "lhapdf.pyx":337
 *     def errorType(self):
 *         "Type of error treatment in this PDF set."
 *         return self._ptr.errorType()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->_ptr->errorType();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 337, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_convert_PyStr_string_to_py_std__in_string(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 337, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "lhapdf.pyx":335
 * 
 *     @property
 *     def errorType(self):             # <<<<<<<<<<<<<<
 *         "Type of error treatment in this PDF set."
 *         return self._ptr.errorType()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("lhapdf.PDFSet.errorType.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lhapdf.pyx":340
 * 
 *     @property
 *     def errorConfLevel(self):             # <<<<<<<<<<<<<<
 *         "Confidence level of error treatment in percent, if one is defined for this set."
 *         return self._ptr.errorConfLevel()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6lhapdf_6PDFSet_14errorConfLevel_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6lhapdf_6PDFSet_14errorConfLevel_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6lhapdf_6PDFSet_14errorConfLevel___get__(((struct __pyx_obj_6lhapdf_PDFSet *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6lhapdf_6PDFSet_14errorConfLevel___get__(struct __pyx_obj_6lhapdf_PDFSet *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "lhapdf.pyx":342
 *     def errorConfLevel(self):
 *         "Confidence level of error treatment in percent, if one is defined for this set."
 *         return self._ptr.errorConfLevel()             # <<<<<<<<<<<<<<
 * 
 *     def mkPDF(self, mem):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->_ptr->errorConfLevel();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 342, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 342, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "lhapdf.pyx":340
 * 
 *     @property
 *     def errorConfLevel(self):             # <<<<<<<<<<<<<<
 *         "Confidence level of error treatment in percent, if one is defined for this set."
 *         return self._ptr.errorConfLevel()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("lhapdf.PDFSet.errorConfLevel.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lhapdf.pyx":344
 *         return self._ptr.errorConfLevel()
 * 
 *     def mkPDF(self, mem):             # <<<<<<<<<<<<<<
 *         cdef c.PDF* ptr = self._ptr.mkPDF(mem)
 *         cdef PDF obj
 */

/* Python wrapper */
static PyObject *__pyx_pw_6lhapdf_6PDFSet_5mkPDF(PyObject *__pyx_v_self, PyObject *__pyx_v_mem); /*proto*/
static char __pyx_doc_6lhapdf_6PDFSet_4mkPDF[] = "PDFSet.mkPDF(self, mem)";
static PyObject *__pyx_pw_6lhapdf_6PDFSet_5mkPDF(PyObject *__pyx_v_self, PyObject *__pyx_v_mem) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("mkPDF (wrapper)", 0);
  __pyx_r = __pyx_pf_6lhapdf_6PDFSet_4mkPDF(((struct __pyx_obj_6lhapdf_PDFSet *)__pyx_v_self), ((PyObject *)__pyx_v_mem));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6lhapdf_6PDFSet_4mkPDF(struct __pyx_obj_6lhapdf_PDFSet *__pyx_v_self, PyObject *__pyx_v_mem) {
  LHAPDF::PDF *__pyx_v_ptr;
  struct __pyx_obj_6lhapdf_PDF *__pyx_v_obj = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("mkPDF", 0);

  /* "lhapdf.pyx":345
 * 
 *     def mkPDF(self, mem):
 *         cdef c.PDF* ptr = self._ptr.mkPDF(mem)             # <<<<<<<<<<<<<<
 *         cdef PDF obj
 *         obj = PDF.__new__(PDF)
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_mem); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 345, __pyx_L1_error)
  __pyx_v_ptr = __pyx_v_self->_ptr->mkPDF(__pyx_t_1);

  /* "lhapdf.pyx":347
 *         cdef c.PDF* ptr = self._ptr.mkPDF(mem)
 *         cdef PDF obj
 *         obj = PDF.__new__(PDF)             # <<<<<<<<<<<<<<
 *         obj.set_ptr(ptr)
 *         return obj
 */
  __pyx_t_2 = __pyx_tp_new_6lhapdf_PDF(((PyTypeObject *)__pyx_ptype_6lhapdf_PDF), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 347, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (!(likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_6lhapdf_PDF)))) __PYX_ERR(0, 347, __pyx_L1_error)
  __pyx_v_obj = ((struct __pyx_obj_6lhapdf_PDF *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "lhapdf.pyx":348
 *         cdef PDF obj
 *         obj = PDF.__new__(PDF)
 *         obj.set_ptr(ptr)             # <<<<<<<<<<<<<<
 *         return obj
 * 
 */
  __pyx_t_2 = ((struct __pyx_vtabstruct_6lhapdf_PDF *)__pyx_v_obj->__pyx_vtab)->set_ptr(__pyx_v_obj, __pyx_v_ptr); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 348, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "lhapdf.pyx":349
 *         obj = PDF.__new__(PDF)
 *         obj.set_ptr(ptr)
 *         return obj             # <<<<<<<<<<<<<<
 * 
 *     def mkPDFs(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_obj));
  __pyx_r = ((PyObject *)__pyx_v_obj);
  goto __pyx_L0;

  /* "lhapdf.pyx":344
 *         return self._ptr.errorConfLevel()
 * 
 *     def mkPDF(self, mem):             # <<<<<<<<<<<<<<
 *         cdef c.PDF* ptr = self._ptr.mkPDF(mem)
 *         cdef PDF obj
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("lhapdf.PDFSet.mkPDF", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_obj);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lhapdf.pyx":351
 *         return obj
 * 
 *     def mkPDFs(self):             # <<<<<<<<<<<<<<
 *         cdef vector[c.PDF*] ptrs = self._ptr.mkPDFs()
 *         cdef PDF obj
 */

/* Python wrapper */
static PyObject *__pyx_pw_6lhapdf_6PDFSet_7mkPDFs(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6lhapdf_6PDFSet_6mkPDFs[] = "PDFSet.mkPDFs(self)";
static PyObject *__pyx_pw_6lhapdf_6PDFSet_7mkPDFs(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("mkPDFs (wrapper)", 0);
  __pyx_r = __pyx_pf_6lhapdf_6PDFSet_6mkPDFs(((struct __pyx_obj_6lhapdf_PDFSet *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6lhapdf_6PDFSet_6mkPDFs(struct __pyx_obj_6lhapdf_PDFSet *__pyx_v_self) {
  std::vector<LHAPDF::PDF *>  __pyx_v_ptrs;
  struct __pyx_obj_6lhapdf_PDF *__pyx_v_obj = 0;
  PyObject *__pyx_v_objs = NULL;
  LHAPDF::PDF *__pyx_v_ptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::vector<LHAPDF::PDF *> ::iterator __pyx_t_2;
  LHAPDF::PDF *__pyx_t_3;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("mkPDFs", 0);

  /* "lhapdf.pyx":352
 * 
 *     def mkPDFs(self):
 *         cdef vector[c.PDF*] ptrs = self._ptr.mkPDFs()             # <<<<<<<<<<<<<<
 *         cdef PDF obj
 *         objs = []
 */
  __pyx_v_ptrs = __pyx_v_self->_ptr->mkPDFs();

  /* "lhapdf.pyx":354
 *         cdef vector[c.PDF*] ptrs = self._ptr.mkPDFs()
 *         cdef PDF obj
 *         objs = []             # <<<<<<<<<<<<<<
 *         for ptr in ptrs:
 *             obj = PDF.__new__(PDF)
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 354, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_objs = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "lhapdf.pyx":355
 *         cdef PDF obj
 *         objs = []
 *         for ptr in ptrs:             # <<<<<<<<<<<<<<
 *             obj = PDF.__new__(PDF)
 *             obj.set_ptr(ptr)
 */
  __pyx_t_2 = __pyx_v_ptrs.begin();
  for (;;) {
    if (!(__pyx_t_2 != __pyx_v_ptrs.end())) break;
    __pyx_t_3 = *__pyx_t_2;
    ++__pyx_t_2;
    __pyx_v_ptr = __pyx_t_3;

    /* "lhapdf.pyx":356
 *         objs = []
 *         for ptr in ptrs:
 *             obj = PDF.__new__(PDF)             # <<<<<<<<<<<<<<
 *             obj.set_ptr(ptr)
 *             objs.append(obj)
 */
    __pyx_t_1 = __pyx_tp_new_6lhapdf_PDF(((PyTypeObject *)__pyx_ptype_6lhapdf_PDF), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 356, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!(likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_6lhapdf_PDF)))) __PYX_ERR(0, 356, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_obj, ((struct __pyx_obj_6lhapdf_PDF *)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "lhapdf.pyx":357
 *         for ptr in ptrs:
 *             obj = PDF.__new__(PDF)
 *             obj.set_ptr(ptr)             # <<<<<<<<<<<<<<
 *             objs.append(obj)
 *         return objs
 */
    __pyx_t_1 = ((struct __pyx_vtabstruct_6lhapdf_PDF *)__pyx_v_obj->__pyx_vtab)->set_ptr(__pyx_v_obj, __pyx_v_ptr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 357, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "lhapdf.pyx":358
 *             obj = PDF.__new__(PDF)
 *             obj.set_ptr(ptr)
 *             objs.append(obj)             # <<<<<<<<<<<<<<
 *         return objs
 * 
 */
    __pyx_t_4 = __Pyx_PyList_Append(__pyx_v_objs, ((PyObject *)__pyx_v_obj)); if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(0, 358, __pyx_L1_error)

    /* "lhapdf.pyx":355
 *         cdef PDF obj
 *         objs = []
 *         for ptr in ptrs:             # <<<<<<<<<<<<<<
 *             obj = PDF.__new__(PDF)
 *             obj.set_ptr(ptr)
 */
  }

  /* "lhapdf.pyx":359
 *             obj.set_ptr(ptr)
 *             objs.append(obj)
 *         return objs             # <<<<<<<<<<<<<<
 * 
 *     # def metadata(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_objs);
  __pyx_r = __pyx_v_objs;
  goto __pyx_L0;

  /* "lhapdf.pyx":351
 *         return obj
 * 
 *     def mkPDFs(self):             # <<<<<<<<<<<<<<
 *         cdef vector[c.PDF*] ptrs = self._ptr.mkPDFs()
 *         cdef PDF obj
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("lhapdf.PDFSet.mkPDFs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_obj);
  __Pyx_XDECREF(__pyx_v_objs);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lhapdf.pyx":365
 *     #     return self._ptr.metadata()
 * 
 *     def has_key(self, key):             # <<<<<<<<<<<<<<
 *         "Return whether or not metadata for this key exists"
 *         return self._ptr.has_key(text_encode(key))
 */

/* Python wrapper */
static PyObject *__pyx_pw_6lhapdf_6PDFSet_9has_key(PyObject *__pyx_v_self, PyObject *__pyx_v_key); /*proto*/
static char __pyx_doc_6lhapdf_6PDFSet_8has_key[] = "PDFSet.has_key(self, key)\nReturn whether or not metadata for this key exists";
static PyObject *__pyx_pw_6lhapdf_6PDFSet_9has_key(PyObject *__pyx_v_self, PyObject *__pyx_v_key) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("has_key (wrapper)", 0);
  __pyx_r = __pyx_pf_6lhapdf_6PDFSet_8has_key(((struct __pyx_obj_6lhapdf_PDFSet *)__pyx_v_self), ((PyObject *)__pyx_v_key));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6lhapdf_6PDFSet_8has_key(struct __pyx_obj_6lhapdf_PDFSet *__pyx_v_self, PyObject *__pyx_v_key) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  std::string __pyx_t_5;
  __Pyx_RefNannySetupContext("has_key", 0);

  /* "lhapdf.pyx":367
 *     def has_key(self, key):
 *         "Return whether or not metadata for this key exists"
 *         return self._ptr.has_key(text_encode(key))             # <<<<<<<<<<<<<<
 * 
 *     def has_key_local(self, key):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_text_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 367, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_key); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 367, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_key};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 367, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_key};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 367, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 367, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __pyx_t_3 = NULL;
      __Pyx_INCREF(__pyx_v_key);
      __Pyx_GIVEREF(__pyx_v_key);
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_key);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 367, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 367, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->_ptr->has_key(__pyx_t_5)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 367, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "lhapdf.pyx":365
 *     #     return self._ptr.metadata()
 * 
 *     def has_key(self, key):             # <<<<<<<<<<<<<<
 *         "Return whether or not metadata for this key exists"
 *         return self._ptr.has_key(text_encode(key))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("lhapdf.PDFSet.has_key", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lhapdf.pyx":369
 *         return self._ptr.has_key(text_encode(key))
 * 
 *     def has_key_local(self, key):             # <<<<<<<<<<<<<<
 *         "Returns whether or not metadata for this key exists at a local level (config/set/member)"
 *         return self._ptr.has_key_local(text_encode(key))
 */

/* Python wrapper */
static PyObject *__pyx_pw_6lhapdf_6PDFSet_11has_key_local(PyObject *__pyx_v_self, PyObject *__pyx_v_key); /*proto*/
static char __pyx_doc_6lhapdf_6PDFSet_10has_key_local[] = "PDFSet.has_key_local(self, key)\nReturns whether or not metadata for this key exists at a local level (config/set/member)";
static PyObject *__pyx_pw_6lhapdf_6PDFSet_11has_key_local(PyObject *__pyx_v_self, PyObject *__pyx_v_key) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("has_key_local (wrapper)", 0);
  __pyx_r = __pyx_pf_6lhapdf_6PDFSet_10has_key_local(((struct __pyx_obj_6lhapdf_PDFSet *)__pyx_v_self), ((PyObject *)__pyx_v_key));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6lhapdf_6PDFSet_10has_key_local(struct __pyx_obj_6lhapdf_PDFSet *__pyx_v_self, PyObject *__pyx_v_key) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  std::string __pyx_t_5;
  __Pyx_RefNannySetupContext("has_key_local", 0);

  /* "lhapdf.pyx":371
 *     def has_key_local(self, key):
 *         "Returns whether or not metadata for this key exists at a local level (config/set/member)"
 *         return self._ptr.has_key_local(text_encode(key))             # <<<<<<<<<<<<<<
 * 
 *     # def get_entry(self, key):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_text_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 371, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_key); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 371, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_key};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 371, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_key};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 371, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 371, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __pyx_t_3 = NULL;
      __Pyx_INCREF(__pyx_v_key);
      __Pyx_GIVEREF(__pyx_v_key);
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_key);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 371, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 371, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->_ptr->has_key_local(__pyx_t_5)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 371, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "lhapdf.pyx":369
 *         return self._ptr.has_key(text_encode(key))
 * 
 *     def has_key_local(self, key):             # <<<<<<<<<<<<<<
 *         "Returns whether or not metadata for this key exists at a local level (config/set/member)"
 *         return self._ptr.has_key_local(text_encode(key))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("lhapdf.PDFSet.has_key_local", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lhapdf.pyx":377
 *     #     return self._ptr.get_entry(key)
 * 
 *     def get_entry(self, key, fallback=None):             # <<<<<<<<<<<<<<
 *         "Returns metadata entry for this key if it exists, otherwise returns a fallback value"
 *         rtn = self._ptr.get_entry(text_encode(key), text_encode(str(fallback)))
 */

/* Python wrapper */
static PyObject *__pyx_pw_6lhapdf_6PDFSet_13get_entry(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6lhapdf_6PDFSet_12get_entry[] = "PDFSet.get_entry(self, key, fallback=None)\nReturns metadata entry for this key if it exists, otherwise returns a fallback value";
static PyObject *__pyx_pw_6lhapdf_6PDFSet_13get_entry(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_key = 0;
  PyObject *__pyx_v_fallback = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_entry (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_key,&__pyx_n_s_fallback,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_key)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_fallback);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_entry") < 0)) __PYX_ERR(0, 377, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_key = values[0];
    __pyx_v_fallback = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_entry", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 377, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("lhapdf.PDFSet.get_entry", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6lhapdf_6PDFSet_12get_entry(((struct __pyx_obj_6lhapdf_PDFSet *)__pyx_v_self), __pyx_v_key, __pyx_v_fallback);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6lhapdf_6PDFSet_12get_entry(struct __pyx_obj_6lhapdf_PDFSet *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_v_fallback) {
  std::string __pyx_v_rtn;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  std::string __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  std::string __pyx_t_7;
  std::string __pyx_t_8;
  int __pyx_t_9;
  __Pyx_RefNannySetupContext("get_entry", 0);

  /* "lhapdf.pyx":379
 *     def get_entry(self, key, fallback=None):
 *         "Returns metadata entry for this key if it exists, otherwise returns a fallback value"
 *         rtn = self._ptr.get_entry(text_encode(key), text_encode(str(fallback)))             # <<<<<<<<<<<<<<
 *         return rtn if str(rtn) != str(fallback) else fallback
 * 
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_text_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 379, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_key); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 379, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_key};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 379, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_key};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 379, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 379, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __pyx_t_3 = NULL;
      __Pyx_INCREF(__pyx_v_key);
      __Pyx_GIVEREF(__pyx_v_key);
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_key);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 379, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 379, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_text_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 379, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 379, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_v_fallback);
  __Pyx_GIVEREF(__pyx_v_fallback);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_fallback);
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 379, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 379, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 379, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 379, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 379, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 379, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_7 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 379, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  try {
    __pyx_t_8 = __pyx_v_self->_ptr->get_entry(__pyx_t_5, __pyx_t_7);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 379, __pyx_L1_error)
  }
  __pyx_v_rtn = __pyx_t_8;

  /* "lhapdf.pyx":380
 *         "Returns metadata entry for this key if it exists, otherwise returns a fallback value"
 *         rtn = self._ptr.get_entry(text_encode(key), text_encode(str(fallback)))
 *         return rtn if str(rtn) != str(fallback) else fallback             # <<<<<<<<<<<<<<
 * 
 *     def _print(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_convert_PyStr_string_to_py_std__in_string(__pyx_v_rtn); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 380, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 380, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 380, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 380, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_INCREF(__pyx_v_fallback);
  __Pyx_GIVEREF(__pyx_v_fallback);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_fallback);
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_6, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 380, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyObject_RichCompare(__pyx_t_2, __pyx_t_3, Py_NE); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 380, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 380, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (__pyx_t_9) {
    __pyx_t_6 = __pyx_convert_PyStr_string_to_py_std__in_string(__pyx_v_rtn); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 380, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_1 = __pyx_t_6;
    __pyx_t_6 = 0;
  } else {
    __Pyx_INCREF(__pyx_v_fallback);
    __pyx_t_1 = __pyx_v_fallback;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "lhapdf.pyx":377
 *     #     return self._ptr.get_entry(key)
 * 
 *     def get_entry(self, key, fallback=None):             # <<<<<<<<<<<<<<
 *         "Returns metadata entry for this key if it exists, otherwise returns a fallback value"
 *         rtn = self._ptr.get_entry(text_encode(key), text_encode(str(fallback)))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("lhapdf.PDFSet.get_entry", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lhapdf.pyx":382
 *         return rtn if str(rtn) != str(fallback) else fallback
 * 
 *     def _print(self):             # <<<<<<<<<<<<<<
 *         "Print a short summary to stdout"
 *         self._ptr._print()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6lhapdf_6PDFSet_15_print(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6lhapdf_6PDFSet_14_print[] = "PDFSet._print(self)\nPrint a short summary to stdout";
static PyObject *__pyx_pw_6lhapdf_6PDFSet_15_print(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_print (wrapper)", 0);
  __pyx_r = __pyx_pf_6lhapdf_6PDFSet_14_print(((struct __pyx_obj_6lhapdf_PDFSet *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6lhapdf_6PDFSet_14_print(struct __pyx_obj_6lhapdf_PDFSet *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_print", 0);

  /* "lhapdf.pyx":384
 *     def _print(self):
 *         "Print a short summary to stdout"
 *         self._ptr._print()             # <<<<<<<<<<<<<<
 * 
 *     def uncertainty(self, vals, cl=68.268949, alternative=False):
 */
  try {
    __pyx_v_self->_ptr->print();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 384, __pyx_L1_error)
  }

  /* "lhapdf.pyx":382
 *         return rtn if str(rtn) != str(fallback) else fallback
 * 
 *     def _print(self):             # <<<<<<<<<<<<<<
 *         "Print a short summary to stdout"
 *         self._ptr._print()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("lhapdf.PDFSet._print", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lhapdf.pyx":386
 *         self._ptr._print()
 * 
 *     def uncertainty(self, vals, cl=68.268949, alternative=False):             # <<<<<<<<<<<<<<
 *         """\
 * 	Return a PDFUncertainty object corresponding to central value and errors computed
 */

/* Python wrapper */
static PyObject *__pyx_pw_6lhapdf_6PDFSet_17uncertainty(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6lhapdf_6PDFSet_16uncertainty[] = "PDFSet.uncertainty(self, vals, cl=68.268949, alternative=False)\n\tReturn a PDFUncertainty object corresponding to central value and errors computed\n        from the vals list. If unspecified (as a percentage), the confidence level cl defaults\n        to 1-sigma. For replicas, by default (alternative=False) the central value is given by\n        the mean and the uncertainty by the standard deviation (possibly rescaled to cl), but\n        setting alternative=True will instead construct a confidence interval from the\n        probability distribution of replicas, with the central value given by the median.\n        For a combined PDF+parameter set, the parameter variation uncertainties are computed\n        from the last 2*npar set members, where npar is the number of parameters, and a\n        breakdown of the separate PDF and parameter variation uncertainties is available.\n\t";
static PyObject *__pyx_pw_6lhapdf_6PDFSet_17uncertainty(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_vals = 0;
  PyObject *__pyx_v_cl = 0;
  PyObject *__pyx_v_alternative = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("uncertainty (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_vals,&__pyx_n_s_cl,&__pyx_n_s_alternative,0};
    PyObject* values[3] = {0,0,0};
    values[1] = ((PyObject *)__pyx_float_68_268949);
    values[2] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vals)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_cl);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_alternative);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "uncertainty") < 0)) __PYX_ERR(0, 386, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_vals = values[0];
    __pyx_v_cl = values[1];
    __pyx_v_alternative = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("uncertainty", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 386, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("lhapdf.PDFSet.uncertainty", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6lhapdf_6PDFSet_16uncertainty(((struct __pyx_obj_6lhapdf_PDFSet *)__pyx_v_self), __pyx_v_vals, __pyx_v_cl, __pyx_v_alternative);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6lhapdf_6PDFSet_16uncertainty(struct __pyx_obj_6lhapdf_PDFSet *__pyx_v_self, PyObject *__pyx_v_vals, PyObject *__pyx_v_cl, PyObject *__pyx_v_alternative) {
  struct LHAPDF::PDFUncertainty __pyx_v_unc;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<double>  __pyx_t_1;
  double __pyx_t_2;
  bool __pyx_t_3;
  struct LHAPDF::PDFUncertainty __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  int __pyx_t_17;
  PyObject *__pyx_t_18 = NULL;
  __Pyx_RefNannySetupContext("uncertainty", 0);

  /* "lhapdf.pyx":398
 *         breakdown of the separate PDF and parameter variation uncertainties is available.
 * 	"""
 *         cdef c.PDFUncertainty unc = self._ptr.uncertainty(vals, cl, alternative)             # <<<<<<<<<<<<<<
 *         return PDFUncertainty(unc.central, unc.errplus, unc.errminus, unc.errsymm, unc.scale, unc.errplus_pdf, unc.errminus_pdf, unc.errsymm_pdf, unc.err_par)
 * 
 */
  __pyx_t_1 = __pyx_convert_vector_from_py_double(__pyx_v_vals); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 398, __pyx_L1_error)
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_v_cl); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 398, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_alternative); if (unlikely((__pyx_t_3 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 398, __pyx_L1_error)
  try {
    __pyx_t_4 = __pyx_v_self->_ptr->uncertainty(__pyx_t_1, __pyx_t_2, __pyx_t_3);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 398, __pyx_L1_error)
  }
  __pyx_v_unc = __pyx_t_4;

  /* "lhapdf.pyx":399
 * 	"""
 *         cdef c.PDFUncertainty unc = self._ptr.uncertainty(vals, cl, alternative)
 *         return PDFUncertainty(unc.central, unc.errplus, unc.errminus, unc.errsymm, unc.scale, unc.errplus_pdf, unc.errminus_pdf, unc.errsymm_pdf, unc.err_par)             # <<<<<<<<<<<<<<
 * 
 *     def correlation(self, valsA, valsB):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_PDFUncertainty); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 399, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = PyFloat_FromDouble(__pyx_v_unc.central); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 399, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = PyFloat_FromDouble(__pyx_v_unc.errplus); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 399, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = PyFloat_FromDouble(__pyx_v_unc.errminus); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 399, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_10 = PyFloat_FromDouble(__pyx_v_unc.errsymm); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 399, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_11 = PyFloat_FromDouble(__pyx_v_unc.scale); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 399, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_12 = PyFloat_FromDouble(__pyx_v_unc.errplus_pdf); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 399, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_13 = PyFloat_FromDouble(__pyx_v_unc.errminus_pdf); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 399, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __pyx_t_14 = PyFloat_FromDouble(__pyx_v_unc.errsymm_pdf); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 399, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __pyx_t_15 = PyFloat_FromDouble(__pyx_v_unc.err_par); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 399, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __pyx_t_16 = NULL;
  __pyx_t_17 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_16 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_16)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_16);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
      __pyx_t_17 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_6)) {
    PyObject *__pyx_temp[10] = {__pyx_t_16, __pyx_t_7, __pyx_t_8, __pyx_t_9, __pyx_t_10, __pyx_t_11, __pyx_t_12, __pyx_t_13, __pyx_t_14, __pyx_t_15};
    __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_17, 9+__pyx_t_17); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 399, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
    PyObject *__pyx_temp[10] = {__pyx_t_16, __pyx_t_7, __pyx_t_8, __pyx_t_9, __pyx_t_10, __pyx_t_11, __pyx_t_12, __pyx_t_13, __pyx_t_14, __pyx_t_15};
    __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_17, 9+__pyx_t_17); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 399, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  } else
  #endif
  {
    __pyx_t_18 = PyTuple_New(9+__pyx_t_17); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 399, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    if (__pyx_t_16) {
      __Pyx_GIVEREF(__pyx_t_16); PyTuple_SET_ITEM(__pyx_t_18, 0, __pyx_t_16); __pyx_t_16 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_18, 0+__pyx_t_17, __pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_18, 1+__pyx_t_17, __pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_9);
    PyTuple_SET_ITEM(__pyx_t_18, 2+__pyx_t_17, __pyx_t_9);
    __Pyx_GIVEREF(__pyx_t_10);
    PyTuple_SET_ITEM(__pyx_t_18, 3+__pyx_t_17, __pyx_t_10);
    __Pyx_GIVEREF(__pyx_t_11);
    PyTuple_SET_ITEM(__pyx_t_18, 4+__pyx_t_17, __pyx_t_11);
    __Pyx_GIVEREF(__pyx_t_12);
    PyTuple_SET_ITEM(__pyx_t_18, 5+__pyx_t_17, __pyx_t_12);
    __Pyx_GIVEREF(__pyx_t_13);
    PyTuple_SET_ITEM(__pyx_t_18, 6+__pyx_t_17, __pyx_t_13);
    __Pyx_GIVEREF(__pyx_t_14);
    PyTuple_SET_ITEM(__pyx_t_18, 7+__pyx_t_17, __pyx_t_14);
    __Pyx_GIVEREF(__pyx_t_15);
    PyTuple_SET_ITEM(__pyx_t_18, 8+__pyx_t_17, __pyx_t_15);
    __pyx_t_7 = 0;
    __pyx_t_8 = 0;
    __pyx_t_9 = 0;
    __pyx_t_10 = 0;
    __pyx_t_11 = 0;
    __pyx_t_12 = 0;
    __pyx_t_13 = 0;
    __pyx_t_14 = 0;
    __pyx_t_15 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_18, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 399, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "lhapdf.pyx":386
 *         self._ptr._print()
 * 
 *     def uncertainty(self, vals, cl=68.268949, alternative=False):             # <<<<<<<<<<<<<<
 *         """\
 * 	Return a PDFUncertainty object corresponding to central value and errors computed
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_18);
  __Pyx_AddTraceback("lhapdf.PDFSet.uncertainty", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lhapdf.pyx":401
 *         return PDFUncertainty(unc.central, unc.errplus, unc.errminus, unc.errsymm, unc.scale, unc.errplus_pdf, unc.errminus_pdf, unc.errsymm_pdf, unc.err_par)
 * 
 *     def correlation(self, valsA, valsB):             # <<<<<<<<<<<<<<
 *         """Return the PDF correlation between valsA and valsB using appropriate formulae for this set."""
 *         return self._ptr.correlation(valsA, valsB)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6lhapdf_6PDFSet_19correlation(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6lhapdf_6PDFSet_18correlation[] = "PDFSet.correlation(self, valsA, valsB)\nReturn the PDF correlation between valsA and valsB using appropriate formulae for this set.";
static PyObject *__pyx_pw_6lhapdf_6PDFSet_19correlation(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_valsA = 0;
  PyObject *__pyx_v_valsB = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("correlation (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_valsA,&__pyx_n_s_valsB,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_valsA)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_valsB)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("correlation", 1, 2, 2, 1); __PYX_ERR(0, 401, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "correlation") < 0)) __PYX_ERR(0, 401, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_valsA = values[0];
    __pyx_v_valsB = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("correlation", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 401, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("lhapdf.PDFSet.correlation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6lhapdf_6PDFSet_18correlation(((struct __pyx_obj_6lhapdf_PDFSet *)__pyx_v_self), __pyx_v_valsA, __pyx_v_valsB);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6lhapdf_6PDFSet_18correlation(struct __pyx_obj_6lhapdf_PDFSet *__pyx_v_self, PyObject *__pyx_v_valsA, PyObject *__pyx_v_valsB) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<double>  __pyx_t_1;
  std::vector<double>  __pyx_t_2;
  double __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("correlation", 0);

  /* "lhapdf.pyx":403
 *     def correlation(self, valsA, valsB):
 *         """Return the PDF correlation between valsA and valsB using appropriate formulae for this set."""
 *         return self._ptr.correlation(valsA, valsB)             # <<<<<<<<<<<<<<
 * 
 *     def randomValueFromHessian(self, vals, randoms, symmetrise=True):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_vector_from_py_double(__pyx_v_valsA); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 403, __pyx_L1_error)
  __pyx_t_2 = __pyx_convert_vector_from_py_double(__pyx_v_valsB); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 403, __pyx_L1_error)
  try {
    __pyx_t_3 = __pyx_v_self->_ptr->correlation(__pyx_t_1, __pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 403, __pyx_L1_error)
  }
  __pyx_t_4 = PyFloat_FromDouble(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 403, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "lhapdf.pyx":401
 *         return PDFUncertainty(unc.central, unc.errplus, unc.errminus, unc.errsymm, unc.scale, unc.errplus_pdf, unc.errminus_pdf, unc.errsymm_pdf, unc.err_par)
 * 
 *     def correlation(self, valsA, valsB):             # <<<<<<<<<<<<<<
 *         """Return the PDF correlation between valsA and valsB using appropriate formulae for this set."""
 *         return self._ptr.correlation(valsA, valsB)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("lhapdf.PDFSet.correlation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lhapdf.pyx":405
 *         return self._ptr.correlation(valsA, valsB)
 * 
 *     def randomValueFromHessian(self, vals, randoms, symmetrise=True):             # <<<<<<<<<<<<<<
 *         """Return a random value from Hessian vals and Gaussian random numbers."""
 *         return self._ptr.randomValueFromHessian(vals, randoms, symmetrise)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6lhapdf_6PDFSet_21randomValueFromHessian(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6lhapdf_6PDFSet_20randomValueFromHessian[] = "PDFSet.randomValueFromHessian(self, vals, randoms, symmetrise=True)\nReturn a random value from Hessian vals and Gaussian random numbers.";
static PyObject *__pyx_pw_6lhapdf_6PDFSet_21randomValueFromHessian(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_vals = 0;
  PyObject *__pyx_v_randoms = 0;
  PyObject *__pyx_v_symmetrise = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("randomValueFromHessian (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_vals,&__pyx_n_s_randoms,&__pyx_n_s_symmetrise,0};
    PyObject* values[3] = {0,0,0};
    values[2] = ((PyObject *)Py_True);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vals)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_randoms)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("randomValueFromHessian", 0, 2, 3, 1); __PYX_ERR(0, 405, __pyx_L3_error)
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_symmetrise);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "randomValueFromHessian") < 0)) __PYX_ERR(0, 405, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_vals = values[0];
    __pyx_v_randoms = values[1];
    __pyx_v_symmetrise = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("randomValueFromHessian", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 405, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("lhapdf.PDFSet.randomValueFromHessian", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6lhapdf_6PDFSet_20randomValueFromHessian(((struct __pyx_obj_6lhapdf_PDFSet *)__pyx_v_self), __pyx_v_vals, __pyx_v_randoms, __pyx_v_symmetrise);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6lhapdf_6PDFSet_20randomValueFromHessian(struct __pyx_obj_6lhapdf_PDFSet *__pyx_v_self, PyObject *__pyx_v_vals, PyObject *__pyx_v_randoms, PyObject *__pyx_v_symmetrise) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<double>  __pyx_t_1;
  std::vector<double>  __pyx_t_2;
  bool __pyx_t_3;
  double __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("randomValueFromHessian", 0);

  /* "lhapdf.pyx":407
 *     def randomValueFromHessian(self, vals, randoms, symmetrise=True):
 *         """Return a random value from Hessian vals and Gaussian random numbers."""
 *         return self._ptr.randomValueFromHessian(vals, randoms, symmetrise)             # <<<<<<<<<<<<<<
 * 
 *     def _checkPdfType(self, pdftypes):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_vector_from_py_double(__pyx_v_vals); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 407, __pyx_L1_error)
  __pyx_t_2 = __pyx_convert_vector_from_py_double(__pyx_v_randoms); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 407, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_symmetrise); if (unlikely((__pyx_t_3 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 407, __pyx_L1_error)
  try {
    __pyx_t_4 = __pyx_v_self->_ptr->randomValueFromHessian(__pyx_t_1, __pyx_t_2, __pyx_t_3);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 407, __pyx_L1_error)
  }
  __pyx_t_5 = PyFloat_FromDouble(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 407, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "lhapdf.pyx":405
 *         return self._ptr.correlation(valsA, valsB)
 * 
 *     def randomValueFromHessian(self, vals, randoms, symmetrise=True):             # <<<<<<<<<<<<<<
 *         """Return a random value from Hessian vals and Gaussian random numbers."""
 *         return self._ptr.randomValueFromHessian(vals, randoms, symmetrise)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("lhapdf.PDFSet.randomValueFromHessian", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lhapdf.pyx":409
 *         return self._ptr.randomValueFromHessian(vals, randoms, symmetrise)
 * 
 *     def _checkPdfType(self, pdftypes):             # <<<<<<<<<<<<<<
 *         """Check that the PdfType of each member matches the ErrorType of the set."""
 *         self._ptr._checkPdfType(pdftypes)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6lhapdf_6PDFSet_23_checkPdfType(PyObject *__pyx_v_self, PyObject *__pyx_v_pdftypes); /*proto*/
static char __pyx_doc_6lhapdf_6PDFSet_22_checkPdfType[] = "PDFSet._checkPdfType(self, pdftypes)\nCheck that the PdfType of each member matches the ErrorType of the set.";
static PyObject *__pyx_pw_6lhapdf_6PDFSet_23_checkPdfType(PyObject *__pyx_v_self, PyObject *__pyx_v_pdftypes) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_checkPdfType (wrapper)", 0);
  __pyx_r = __pyx_pf_6lhapdf_6PDFSet_22_checkPdfType(((struct __pyx_obj_6lhapdf_PDFSet *)__pyx_v_self), ((PyObject *)__pyx_v_pdftypes));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6lhapdf_6PDFSet_22_checkPdfType(struct __pyx_obj_6lhapdf_PDFSet *__pyx_v_self, PyObject *__pyx_v_pdftypes) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<std::string>  __pyx_t_1;
  __Pyx_RefNannySetupContext("_checkPdfType", 0);

  /* "lhapdf.pyx":411
 *     def _checkPdfType(self, pdftypes):
 *         """Check that the PdfType of each member matches the ErrorType of the set."""
 *         self._ptr._checkPdfType(pdftypes)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_convert_vector_from_py_std_3a__3a_string(__pyx_v_pdftypes); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 411, __pyx_L1_error)
  try {
    __pyx_v_self->_ptr->_checkPdfType(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 411, __pyx_L1_error)
  }

  /* "lhapdf.pyx":409
 *         return self._ptr.randomValueFromHessian(vals, randoms, symmetrise)
 * 
 *     def _checkPdfType(self, pdftypes):             # <<<<<<<<<<<<<<
 *         """Check that the PdfType of each member matches the ErrorType of the set."""
 *         self._ptr._checkPdfType(pdftypes)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("lhapdf.PDFSet._checkPdfType", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lhapdf.pyx":421
 * 
 *     cdef c.PDFInfo* _ptr
 *     cdef set_ptr(self, c.PDFInfo* ptr):             # <<<<<<<<<<<<<<
 *         self._ptr = ptr
 * 
 */

static PyObject *__pyx_f_6lhapdf_7PDFInfo_set_ptr(struct __pyx_obj_6lhapdf_PDFInfo *__pyx_v_self, LHAPDF::PDFInfo *__pyx_v_ptr) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_ptr", 0);

  /* "lhapdf.pyx":422
 *     cdef c.PDFInfo* _ptr
 *     cdef set_ptr(self, c.PDFInfo* ptr):
 *         self._ptr = ptr             # <<<<<<<<<<<<<<
 * 
 *     # def metadata(self):
 */
  __pyx_v_self->_ptr = __pyx_v_ptr;

  /* "lhapdf.pyx":421
 * 
 *     cdef c.PDFInfo* _ptr
 *     cdef set_ptr(self, c.PDFInfo* ptr):             # <<<<<<<<<<<<<<
 *         self._ptr = ptr
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lhapdf.pyx":428
 *     #     return self._ptr.metadata()
 * 
 *     def has_key(self, key):             # <<<<<<<<<<<<<<
 *         "Return whether or not metadata for this key exists"
 *         return self._ptr.has_key(text_encode(key))
 */

/* Python wrapper */
static PyObject *__pyx_pw_6lhapdf_7PDFInfo_1has_key(PyObject *__pyx_v_self, PyObject *__pyx_v_key); /*proto*/
static char __pyx_doc_6lhapdf_7PDFInfo_has_key[] = "PDFInfo.has_key(self, key)\nReturn whether or not metadata for this key exists";
static PyObject *__pyx_pw_6lhapdf_7PDFInfo_1has_key(PyObject *__pyx_v_self, PyObject *__pyx_v_key) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("has_key (wrapper)", 0);
  __pyx_r = __pyx_pf_6lhapdf_7PDFInfo_has_key(((struct __pyx_obj_6lhapdf_PDFInfo *)__pyx_v_self), ((PyObject *)__pyx_v_key));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6lhapdf_7PDFInfo_has_key(struct __pyx_obj_6lhapdf_PDFInfo *__pyx_v_self, PyObject *__pyx_v_key) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  std::string __pyx_t_5;
  __Pyx_RefNannySetupContext("has_key", 0);

  /* "lhapdf.pyx":430
 *     def has_key(self, key):
 *         "Return whether or not metadata for this key exists"
 *         return self._ptr.has_key(text_encode(key))             # <<<<<<<<<<<<<<
 * 
 *     def has_key_local(self, key):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_text_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 430, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_key); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 430, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_key};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 430, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_key};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 430, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 430, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __pyx_t_3 = NULL;
      __Pyx_INCREF(__pyx_v_key);
      __Pyx_GIVEREF(__pyx_v_key);
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_key);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 430, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 430, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->_ptr->has_key(__pyx_t_5)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 430, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "lhapdf.pyx":428
 *     #     return self._ptr.metadata()
 * 
 *     def has_key(self, key):             # <<<<<<<<<<<<<<
 *         "Return whether or not metadata for this key exists"
 *         return self._ptr.has_key(text_encode(key))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("lhapdf.PDFInfo.has_key", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lhapdf.pyx":432
 *         return self._ptr.has_key(text_encode(key))
 * 
 *     def has_key_local(self, key):             # <<<<<<<<<<<<<<
 *         "Returns whether or not metadata for this key exists at a local level (config/set/member)"
 *         return self._ptr.has_key_local(text_encode(key))
 */

/* Python wrapper */
static PyObject *__pyx_pw_6lhapdf_7PDFInfo_3has_key_local(PyObject *__pyx_v_self, PyObject *__pyx_v_key); /*proto*/
static char __pyx_doc_6lhapdf_7PDFInfo_2has_key_local[] = "PDFInfo.has_key_local(self, key)\nReturns whether or not metadata for this key exists at a local level (config/set/member)";
static PyObject *__pyx_pw_6lhapdf_7PDFInfo_3has_key_local(PyObject *__pyx_v_self, PyObject *__pyx_v_key) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("has_key_local (wrapper)", 0);
  __pyx_r = __pyx_pf_6lhapdf_7PDFInfo_2has_key_local(((struct __pyx_obj_6lhapdf_PDFInfo *)__pyx_v_self), ((PyObject *)__pyx_v_key));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6lhapdf_7PDFInfo_2has_key_local(struct __pyx_obj_6lhapdf_PDFInfo *__pyx_v_self, PyObject *__pyx_v_key) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  std::string __pyx_t_5;
  __Pyx_RefNannySetupContext("has_key_local", 0);

  /* "lhapdf.pyx":434
 *     def has_key_local(self, key):
 *         "Returns whether or not metadata for this key exists at a local level (config/set/member)"
 *         return self._ptr.has_key_local(text_encode(key))             # <<<<<<<<<<<<<<
 * 
 *     # def get_entry(self, key):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_text_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 434, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_key); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 434, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_key};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 434, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_key};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 434, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 434, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __pyx_t_3 = NULL;
      __Pyx_INCREF(__pyx_v_key);
      __Pyx_GIVEREF(__pyx_v_key);
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_key);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 434, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 434, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->_ptr->has_key_local(__pyx_t_5)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 434, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "lhapdf.pyx":432
 *         return self._ptr.has_key(text_encode(key))
 * 
 *     def has_key_local(self, key):             # <<<<<<<<<<<<<<
 *         "Returns whether or not metadata for this key exists at a local level (config/set/member)"
 *         return self._ptr.has_key_local(text_encode(key))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("lhapdf.PDFInfo.has_key_local", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lhapdf.pyx":440
 *     #     return self._ptr.get_entry(key)
 * 
 *     def get_entry(self, key, fallback=None):             # <<<<<<<<<<<<<<
 *         "Returns metadata entry for this key if it exists, otherwise returns a fallback value"
 *         rtn = self._ptr.get_entry(text_encode(key), text_encode(str(fallback)))
 */

/* Python wrapper */
static PyObject *__pyx_pw_6lhapdf_7PDFInfo_5get_entry(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6lhapdf_7PDFInfo_4get_entry[] = "PDFInfo.get_entry(self, key, fallback=None)\nReturns metadata entry for this key if it exists, otherwise returns a fallback value";
static PyObject *__pyx_pw_6lhapdf_7PDFInfo_5get_entry(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_key = 0;
  PyObject *__pyx_v_fallback = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_entry (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_key,&__pyx_n_s_fallback,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_key)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_fallback);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_entry") < 0)) __PYX_ERR(0, 440, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_key = values[0];
    __pyx_v_fallback = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_entry", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 440, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("lhapdf.PDFInfo.get_entry", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6lhapdf_7PDFInfo_4get_entry(((struct __pyx_obj_6lhapdf_PDFInfo *)__pyx_v_self), __pyx_v_key, __pyx_v_fallback);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6lhapdf_7PDFInfo_4get_entry(struct __pyx_obj_6lhapdf_PDFInfo *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_v_fallback) {
  std::string __pyx_v_rtn;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  std::string __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  std::string __pyx_t_7;
  std::string __pyx_t_8;
  int __pyx_t_9;
  __Pyx_RefNannySetupContext("get_entry", 0);

  /* "lhapdf.pyx":442
 *     def get_entry(self, key, fallback=None):
 *         "Returns metadata entry for this key if it exists, otherwise returns a fallback value"
 *         rtn = self._ptr.get_entry(text_encode(key), text_encode(str(fallback)))             # <<<<<<<<<<<<<<
 *         return rtn if str(rtn) != str(fallback) else fallback
 * 
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_text_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 442, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_key); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 442, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_key};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 442, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_key};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 442, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 442, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __pyx_t_3 = NULL;
      __Pyx_INCREF(__pyx_v_key);
      __Pyx_GIVEREF(__pyx_v_key);
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_key);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 442, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 442, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_text_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 442, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 442, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_v_fallback);
  __Pyx_GIVEREF(__pyx_v_fallback);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_fallback);
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 442, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 442, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 442, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 442, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 442, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 442, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_7 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 442, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  try {
    __pyx_t_8 = __pyx_v_self->_ptr->get_entry(__pyx_t_5, __pyx_t_7);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 442, __pyx_L1_error)
  }
  __pyx_v_rtn = __pyx_t_8;

  /* "lhapdf.pyx":443
 *         "Returns metadata entry for this key if it exists, otherwise returns a fallback value"
 *         rtn = self._ptr.get_entry(text_encode(key), text_encode(str(fallback)))
 *         return rtn if str(rtn) != str(fallback) else fallback             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_convert_PyStr_string_to_py_std__in_string(__pyx_v_rtn); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 443, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 443, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 443, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 443, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_INCREF(__pyx_v_fallback);
  __Pyx_GIVEREF(__pyx_v_fallback);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_fallback);
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_6, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 443, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyObject_RichCompare(__pyx_t_2, __pyx_t_3, Py_NE); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 443, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 443, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (__pyx_t_9) {
    __pyx_t_6 = __pyx_convert_PyStr_string_to_py_std__in_string(__pyx_v_rtn); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 443, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_1 = __pyx_t_6;
    __pyx_t_6 = 0;
  } else {
    __Pyx_INCREF(__pyx_v_fallback);
    __pyx_t_1 = __pyx_v_fallback;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "lhapdf.pyx":440
 *     #     return self._ptr.get_entry(key)
 * 
 *     def get_entry(self, key, fallback=None):             # <<<<<<<<<<<<<<
 *         "Returns metadata entry for this key if it exists, otherwise returns a fallback value"
 *         rtn = self._ptr.get_entry(text_encode(key), text_encode(str(fallback)))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("lhapdf.PDFInfo.get_entry", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lhapdf.pyx":452
 *      """
 *      cdef c.AlphaS* _ptr
 *      cdef set_ptr(self, c.AlphaS* ptr):             # <<<<<<<<<<<<<<
 *          self._ptr = ptr
 * 
 */

static PyObject *__pyx_f_6lhapdf_6AlphaS_set_ptr(struct __pyx_obj_6lhapdf_AlphaS *__pyx_v_self, LHAPDF::AlphaS *__pyx_v_ptr) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_ptr", 0);

  /* "lhapdf.pyx":453
 *      cdef c.AlphaS* _ptr
 *      cdef set_ptr(self, c.AlphaS* ptr):
 *          self._ptr = ptr             # <<<<<<<<<<<<<<
 * 
 *      def __dealloc__(self):
 */
  __pyx_v_self->_ptr = __pyx_v_ptr;

  /* "lhapdf.pyx":452
 *      """
 *      cdef c.AlphaS* _ptr
 *      cdef set_ptr(self, c.AlphaS* ptr):             # <<<<<<<<<<<<<<
 *          self._ptr = ptr
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lhapdf.pyx":455
 *          self._ptr = ptr
 * 
 *      def __dealloc__(self):             # <<<<<<<<<<<<<<
 *          del self._ptr
 *          #pass
 */

/* Python wrapper */
static void __pyx_pw_6lhapdf_6AlphaS_1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_6lhapdf_6AlphaS_1__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_6lhapdf_6AlphaS___dealloc__(((struct __pyx_obj_6lhapdf_AlphaS *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_6lhapdf_6AlphaS___dealloc__(struct __pyx_obj_6lhapdf_AlphaS *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "lhapdf.pyx":456
 * 
 *      def __dealloc__(self):
 *          del self._ptr             # <<<<<<<<<<<<<<
 *          #pass
 * 
 */
  delete __pyx_v_self->_ptr;

  /* "lhapdf.pyx":455
 *          self._ptr = ptr
 * 
 *      def __dealloc__(self):             # <<<<<<<<<<<<<<
 *          del self._ptr
 *          #pass
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "lhapdf.pyx":460
 * 
 *      @property
 *      def type(self):             # <<<<<<<<<<<<<<
 *          "Get the method of alpha_s calculation as a string"
 *          return self._ptr.type()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6lhapdf_6AlphaS_4type_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6lhapdf_6AlphaS_4type_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6lhapdf_6AlphaS_4type___get__(((struct __pyx_obj_6lhapdf_AlphaS *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6lhapdf_6AlphaS_4type___get__(struct __pyx_obj_6lhapdf_AlphaS *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "lhapdf.pyx":462
 *      def type(self):
 *          "Get the method of alpha_s calculation as a string"
 *          return self._ptr.type()             # <<<<<<<<<<<<<<
 * 
 *      def alphasQ(self, double q):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->_ptr->type();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 462, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_convert_PyStr_string_to_py_std__in_string(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 462, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "lhapdf.pyx":460
 * 
 *      @property
 *      def type(self):             # <<<<<<<<<<<<<<
 *          "Get the method of alpha_s calculation as a string"
 *          return self._ptr.type()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("lhapdf.AlphaS.type.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lhapdf.pyx":464
 *          return self._ptr.type()
 * 
 *      def alphasQ(self, double q):             # <<<<<<<<<<<<<<
 *          "Get alpha_s value at scale q"
 *          return self._ptr.alphasQ(q)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6lhapdf_6AlphaS_3alphasQ(PyObject *__pyx_v_self, PyObject *__pyx_arg_q); /*proto*/
static char __pyx_doc_6lhapdf_6AlphaS_2alphasQ[] = "AlphaS.alphasQ(self, double q)\nGet alpha_s value at scale q";
static PyObject *__pyx_pw_6lhapdf_6AlphaS_3alphasQ(PyObject *__pyx_v_self, PyObject *__pyx_arg_q) {
  double __pyx_v_q;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("alphasQ (wrapper)", 0);
  assert(__pyx_arg_q); {
    __pyx_v_q = __pyx_PyFloat_AsDouble(__pyx_arg_q); if (unlikely((__pyx_v_q == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 464, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("lhapdf.AlphaS.alphasQ", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6lhapdf_6AlphaS_2alphasQ(((struct __pyx_obj_6lhapdf_AlphaS *)__pyx_v_self), ((double)__pyx_v_q));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6lhapdf_6AlphaS_2alphasQ(struct __pyx_obj_6lhapdf_AlphaS *__pyx_v_self, double __pyx_v_q) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("alphasQ", 0);

  /* "lhapdf.pyx":466
 *      def alphasQ(self, double q):
 *          "Get alpha_s value at scale q"
 *          return self._ptr.alphasQ(q)             # <<<<<<<<<<<<<<
 * 
 *      def alphasQ2(self, double q2):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->_ptr->alphasQ(__pyx_v_q);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 466, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 466, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "lhapdf.pyx":464
 *          return self._ptr.type()
 * 
 *      def alphasQ(self, double q):             # <<<<<<<<<<<<<<
 *          "Get alpha_s value at scale q"
 *          return self._ptr.alphasQ(q)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("lhapdf.AlphaS.alphasQ", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lhapdf.pyx":468
 *          return self._ptr.alphasQ(q)
 * 
 *      def alphasQ2(self, double q2):             # <<<<<<<<<<<<<<
 *          "Get alpha_s value at scale q"
 *          return self._ptr.alphasQ2(q2)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6lhapdf_6AlphaS_5alphasQ2(PyObject *__pyx_v_self, PyObject *__pyx_arg_q2); /*proto*/
static char __pyx_doc_6lhapdf_6AlphaS_4alphasQ2[] = "AlphaS.alphasQ2(self, double q2)\nGet alpha_s value at scale q";
static PyObject *__pyx_pw_6lhapdf_6AlphaS_5alphasQ2(PyObject *__pyx_v_self, PyObject *__pyx_arg_q2) {
  double __pyx_v_q2;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("alphasQ2 (wrapper)", 0);
  assert(__pyx_arg_q2); {
    __pyx_v_q2 = __pyx_PyFloat_AsDouble(__pyx_arg_q2); if (unlikely((__pyx_v_q2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 468, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("lhapdf.AlphaS.alphasQ2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6lhapdf_6AlphaS_4alphasQ2(((struct __pyx_obj_6lhapdf_AlphaS *)__pyx_v_self), ((double)__pyx_v_q2));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6lhapdf_6AlphaS_4alphasQ2(struct __pyx_obj_6lhapdf_AlphaS *__pyx_v_self, double __pyx_v_q2) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("alphasQ2", 0);

  /* "lhapdf.pyx":470
 *      def alphasQ2(self, double q2):
 *          "Get alpha_s value at scale q"
 *          return self._ptr.alphasQ2(q2)             # <<<<<<<<<<<<<<
 * 
 *      def numFlavorsQ(self, double q):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->_ptr->alphasQ2(__pyx_v_q2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 470, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 470, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "lhapdf.pyx":468
 *          return self._ptr.alphasQ(q)
 * 
 *      def alphasQ2(self, double q2):             # <<<<<<<<<<<<<<
 *          "Get alpha_s value at scale q"
 *          return self._ptr.alphasQ2(q2)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("lhapdf.AlphaS.alphasQ2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lhapdf.pyx":472
 *          return self._ptr.alphasQ2(q2)
 * 
 *      def numFlavorsQ(self, double q):             # <<<<<<<<<<<<<<
 *          "Get number of active flavors at scale q"
 *          return self._ptr.numFlavorsQ(q)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6lhapdf_6AlphaS_7numFlavorsQ(PyObject *__pyx_v_self, PyObject *__pyx_arg_q); /*proto*/
static char __pyx_doc_6lhapdf_6AlphaS_6numFlavorsQ[] = "AlphaS.numFlavorsQ(self, double q)\nGet number of active flavors at scale q";
static PyObject *__pyx_pw_6lhapdf_6AlphaS_7numFlavorsQ(PyObject *__pyx_v_self, PyObject *__pyx_arg_q) {
  double __pyx_v_q;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("numFlavorsQ (wrapper)", 0);
  assert(__pyx_arg_q); {
    __pyx_v_q = __pyx_PyFloat_AsDouble(__pyx_arg_q); if (unlikely((__pyx_v_q == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 472, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("lhapdf.AlphaS.numFlavorsQ", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6lhapdf_6AlphaS_6numFlavorsQ(((struct __pyx_obj_6lhapdf_AlphaS *)__pyx_v_self), ((double)__pyx_v_q));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6lhapdf_6AlphaS_6numFlavorsQ(struct __pyx_obj_6lhapdf_AlphaS *__pyx_v_self, double __pyx_v_q) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("numFlavorsQ", 0);

  /* "lhapdf.pyx":474
 *      def numFlavorsQ(self, double q):
 *          "Get number of active flavors at scale q"
 *          return self._ptr.numFlavorsQ(q)             # <<<<<<<<<<<<<<
 * 
 *      def numFlavorsQ2(self, double q2):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->_ptr->numFlavorsQ(__pyx_v_q);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 474, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 474, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "lhapdf.pyx":472
 *          return self._ptr.alphasQ2(q2)
 * 
 *      def numFlavorsQ(self, double q):             # <<<<<<<<<<<<<<
 *          "Get number of active flavors at scale q"
 *          return self._ptr.numFlavorsQ(q)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("lhapdf.AlphaS.numFlavorsQ", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lhapdf.pyx":476
 *          return self._ptr.numFlavorsQ(q)
 * 
 *      def numFlavorsQ2(self, double q2):             # <<<<<<<<<<<<<<
 *          "Get number of active flavors at scale q"
 *          return self._ptr.numFlavorsQ2(q2)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6lhapdf_6AlphaS_9numFlavorsQ2(PyObject *__pyx_v_self, PyObject *__pyx_arg_q2); /*proto*/
static char __pyx_doc_6lhapdf_6AlphaS_8numFlavorsQ2[] = "AlphaS.numFlavorsQ2(self, double q2)\nGet number of active flavors at scale q";
static PyObject *__pyx_pw_6lhapdf_6AlphaS_9numFlavorsQ2(PyObject *__pyx_v_self, PyObject *__pyx_arg_q2) {
  double __pyx_v_q2;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("numFlavorsQ2 (wrapper)", 0);
  assert(__pyx_arg_q2); {
    __pyx_v_q2 = __pyx_PyFloat_AsDouble(__pyx_arg_q2); if (unlikely((__pyx_v_q2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 476, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("lhapdf.AlphaS.numFlavorsQ2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6lhapdf_6AlphaS_8numFlavorsQ2(((struct __pyx_obj_6lhapdf_AlphaS *)__pyx_v_self), ((double)__pyx_v_q2));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6lhapdf_6AlphaS_8numFlavorsQ2(struct __pyx_obj_6lhapdf_AlphaS *__pyx_v_self, double __pyx_v_q2) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("numFlavorsQ2", 0);

  /* "lhapdf.pyx":478
 *      def numFlavorsQ2(self, double q2):
 *          "Get number of active flavors at scale q"
 *          return self._ptr.numFlavorsQ2(q2)             # <<<<<<<<<<<<<<
 * 
 *      def quarkMass(self, int id):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->_ptr->numFlavorsQ2(__pyx_v_q2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 478, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 478, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "lhapdf.pyx":476
 *          return self._ptr.numFlavorsQ(q)
 * 
 *      def numFlavorsQ2(self, double q2):             # <<<<<<<<<<<<<<
 *          "Get number of active flavors at scale q"
 *          return self._ptr.numFlavorsQ2(q2)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("lhapdf.AlphaS.numFlavorsQ2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lhapdf.pyx":480
 *          return self._ptr.numFlavorsQ2(q2)
 * 
 *      def quarkMass(self, int id):             # <<<<<<<<<<<<<<
 *          "Get mass of quark with PID code id"
 *          return self._ptr.quarkMass(id)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6lhapdf_6AlphaS_11quarkMass(PyObject *__pyx_v_self, PyObject *__pyx_arg_id); /*proto*/
static char __pyx_doc_6lhapdf_6AlphaS_10quarkMass[] = "AlphaS.quarkMass(self, int id)\nGet mass of quark with PID code id";
static PyObject *__pyx_pw_6lhapdf_6AlphaS_11quarkMass(PyObject *__pyx_v_self, PyObject *__pyx_arg_id) {
  int __pyx_v_id;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("quarkMass (wrapper)", 0);
  assert(__pyx_arg_id); {
    __pyx_v_id = __Pyx_PyInt_As_int(__pyx_arg_id); if (unlikely((__pyx_v_id == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 480, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("lhapdf.AlphaS.quarkMass", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6lhapdf_6AlphaS_10quarkMass(((struct __pyx_obj_6lhapdf_AlphaS *)__pyx_v_self), ((int)__pyx_v_id));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6lhapdf_6AlphaS_10quarkMass(struct __pyx_obj_6lhapdf_AlphaS *__pyx_v_self, int __pyx_v_id) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("quarkMass", 0);

  /* "lhapdf.pyx":482
 *      def quarkMass(self, int id):
 *          "Get mass of quark with PID code id"
 *          return self._ptr.quarkMass(id)             # <<<<<<<<<<<<<<
 * 
 *      def setQuarkMass(self, int id, double value):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->_ptr->quarkMass(__pyx_v_id);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 482, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 482, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "lhapdf.pyx":480
 *          return self._ptr.numFlavorsQ2(q2)
 * 
 *      def quarkMass(self, int id):             # <<<<<<<<<<<<<<
 *          "Get mass of quark with PID code id"
 *          return self._ptr.quarkMass(id)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("lhapdf.AlphaS.quarkMass", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lhapdf.pyx":484
 *          return self._ptr.quarkMass(id)
 * 
 *      def setQuarkMass(self, int id, double value):             # <<<<<<<<<<<<<<
 *          "Set mass of quark with PID code id"
 *          self._ptr.setQuarkMass(id, value)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6lhapdf_6AlphaS_13setQuarkMass(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6lhapdf_6AlphaS_12setQuarkMass[] = "AlphaS.setQuarkMass(self, int id, double value)\nSet mass of quark with PID code id";
static PyObject *__pyx_pw_6lhapdf_6AlphaS_13setQuarkMass(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_id;
  double __pyx_v_value;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setQuarkMass (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_id,&__pyx_n_s_value,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_id)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setQuarkMass", 1, 2, 2, 1); __PYX_ERR(0, 484, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setQuarkMass") < 0)) __PYX_ERR(0, 484, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_id = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_id == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 484, __pyx_L3_error)
    __pyx_v_value = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_value == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 484, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setQuarkMass", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 484, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("lhapdf.AlphaS.setQuarkMass", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6lhapdf_6AlphaS_12setQuarkMass(((struct __pyx_obj_6lhapdf_AlphaS *)__pyx_v_self), __pyx_v_id, __pyx_v_value);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6lhapdf_6AlphaS_12setQuarkMass(struct __pyx_obj_6lhapdf_AlphaS *__pyx_v_self, int __pyx_v_id, double __pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setQuarkMass", 0);

  /* "lhapdf.pyx":486
 *      def setQuarkMass(self, int id, double value):
 *          "Set mass of quark with PID code id"
 *          self._ptr.setQuarkMass(id, value)             # <<<<<<<<<<<<<<
 * 
 *      def quarkThreshold(self, int id):
 */
  try {
    __pyx_v_self->_ptr->setQuarkMass(__pyx_v_id, __pyx_v_value);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 486, __pyx_L1_error)
  }

  /* "lhapdf.pyx":484
 *          return self._ptr.quarkMass(id)
 * 
 *      def setQuarkMass(self, int id, double value):             # <<<<<<<<<<<<<<
 *          "Set mass of quark with PID code id"
 *          self._ptr.setQuarkMass(id, value)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("lhapdf.AlphaS.setQuarkMass", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lhapdf.pyx":488
 *          self._ptr.setQuarkMass(id, value)
 * 
 *      def quarkThreshold(self, int id):             # <<<<<<<<<<<<<<
 *          "Get activation threshold of quark with PID code id"
 *          return self._ptr.quarkThreshold(id)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6lhapdf_6AlphaS_15quarkThreshold(PyObject *__pyx_v_self, PyObject *__pyx_arg_id); /*proto*/
static char __pyx_doc_6lhapdf_6AlphaS_14quarkThreshold[] = "AlphaS.quarkThreshold(self, int id)\nGet activation threshold of quark with PID code id";
static PyObject *__pyx_pw_6lhapdf_6AlphaS_15quarkThreshold(PyObject *__pyx_v_self, PyObject *__pyx_arg_id) {
  int __pyx_v_id;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("quarkThreshold (wrapper)", 0);
  assert(__pyx_arg_id); {
    __pyx_v_id = __Pyx_PyInt_As_int(__pyx_arg_id); if (unlikely((__pyx_v_id == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 488, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("lhapdf.AlphaS.quarkThreshold", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6lhapdf_6AlphaS_14quarkThreshold(((struct __pyx_obj_6lhapdf_AlphaS *)__pyx_v_self), ((int)__pyx_v_id));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6lhapdf_6AlphaS_14quarkThreshold(struct __pyx_obj_6lhapdf_AlphaS *__pyx_v_self, int __pyx_v_id) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("quarkThreshold", 0);

  /* "lhapdf.pyx":490
 *      def quarkThreshold(self, int id):
 *          "Get activation threshold of quark with PID code id"
 *          return self._ptr.quarkThreshold(id)             # <<<<<<<<<<<<<<
 * 
 *      def setQuarkThreshold(self, int id, double value):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->_ptr->quarkThreshold(__pyx_v_id);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 490, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 490, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "lhapdf.pyx":488
 *          self._ptr.setQuarkMass(id, value)
 * 
 *      def quarkThreshold(self, int id):             # <<<<<<<<<<<<<<
 *          "Get activation threshold of quark with PID code id"
 *          return self._ptr.quarkThreshold(id)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("lhapdf.AlphaS.quarkThreshold", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lhapdf.pyx":492
 *          return self._ptr.quarkThreshold(id)
 * 
 *      def setQuarkThreshold(self, int id, double value):             # <<<<<<<<<<<<<<
 *          "Set activation threshold of quark with PID code id"
 *          self._ptr.setQuarkThreshold(id, value)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6lhapdf_6AlphaS_17setQuarkThreshold(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6lhapdf_6AlphaS_16setQuarkThreshold[] = "AlphaS.setQuarkThreshold(self, int id, double value)\nSet activation threshold of quark with PID code id";
static PyObject *__pyx_pw_6lhapdf_6AlphaS_17setQuarkThreshold(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_id;
  double __pyx_v_value;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setQuarkThreshold (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_id,&__pyx_n_s_value,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_id)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setQuarkThreshold", 1, 2, 2, 1); __PYX_ERR(0, 492, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setQuarkThreshold") < 0)) __PYX_ERR(0, 492, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_id = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_id == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 492, __pyx_L3_error)
    __pyx_v_value = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_value == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 492, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setQuarkThreshold", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 492, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("lhapdf.AlphaS.setQuarkThreshold", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6lhapdf_6AlphaS_16setQuarkThreshold(((struct __pyx_obj_6lhapdf_AlphaS *)__pyx_v_self), __pyx_v_id, __pyx_v_value);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6lhapdf_6AlphaS_16setQuarkThreshold(struct __pyx_obj_6lhapdf_AlphaS *__pyx_v_self, int __pyx_v_id, double __pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setQuarkThreshold", 0);

  /* "lhapdf.pyx":494
 *      def setQuarkThreshold(self, int id, double value):
 *          "Set activation threshold of quark with PID code id"
 *          self._ptr.setQuarkThreshold(id, value)             # <<<<<<<<<<<<<<
 * 
 *      def orderQCD(self):
 */
  try {
    __pyx_v_self->_ptr->setQuarkThreshold(__pyx_v_id, __pyx_v_value);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 494, __pyx_L1_error)
  }

  /* "lhapdf.pyx":492
 *          return self._ptr.quarkThreshold(id)
 * 
 *      def setQuarkThreshold(self, int id, double value):             # <<<<<<<<<<<<<<
 *          "Set activation threshold of quark with PID code id"
 *          self._ptr.setQuarkThreshold(id, value)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("lhapdf.AlphaS.setQuarkThreshold", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lhapdf.pyx":496
 *          self._ptr.setQuarkThreshold(id, value)
 * 
 *      def orderQCD(self):             # <<<<<<<<<<<<<<
 *          "Get the QCD running order (max num loops) for this alphaS"
 *          return self._ptr.orderQCD()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6lhapdf_6AlphaS_19orderQCD(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6lhapdf_6AlphaS_18orderQCD[] = "AlphaS.orderQCD(self)\nGet the QCD running order (max num loops) for this alphaS";
static PyObject *__pyx_pw_6lhapdf_6AlphaS_19orderQCD(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("orderQCD (wrapper)", 0);
  __pyx_r = __pyx_pf_6lhapdf_6AlphaS_18orderQCD(((struct __pyx_obj_6lhapdf_AlphaS *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6lhapdf_6AlphaS_18orderQCD(struct __pyx_obj_6lhapdf_AlphaS *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("orderQCD", 0);

  /* "lhapdf.pyx":498
 *      def orderQCD(self):
 *          "Get the QCD running order (max num loops) for this alphaS"
 *          return self._ptr.orderQCD()             # <<<<<<<<<<<<<<
 * 
 *      def setOrderQCD(self, int order):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->_ptr->orderQCD();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 498, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 498, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "lhapdf.pyx":496
 *          self._ptr.setQuarkThreshold(id, value)
 * 
 *      def orderQCD(self):             # <<<<<<<<<<<<<<
 *          "Get the QCD running order (max num loops) for this alphaS"
 *          return self._ptr.orderQCD()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("lhapdf.AlphaS.orderQCD", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lhapdf.pyx":500
 *          return self._ptr.orderQCD()
 * 
 *      def setOrderQCD(self, int order):             # <<<<<<<<<<<<<<
 *          "Set the QCD running order (max num loops) for this alphaS"
 *          self._ptr.setOrderQCD(order)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6lhapdf_6AlphaS_21setOrderQCD(PyObject *__pyx_v_self, PyObject *__pyx_arg_order); /*proto*/
static char __pyx_doc_6lhapdf_6AlphaS_20setOrderQCD[] = "AlphaS.setOrderQCD(self, int order)\nSet the QCD running order (max num loops) for this alphaS";
static PyObject *__pyx_pw_6lhapdf_6AlphaS_21setOrderQCD(PyObject *__pyx_v_self, PyObject *__pyx_arg_order) {
  int __pyx_v_order;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setOrderQCD (wrapper)", 0);
  assert(__pyx_arg_order); {
    __pyx_v_order = __Pyx_PyInt_As_int(__pyx_arg_order); if (unlikely((__pyx_v_order == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 500, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("lhapdf.AlphaS.setOrderQCD", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6lhapdf_6AlphaS_20setOrderQCD(((struct __pyx_obj_6lhapdf_AlphaS *)__pyx_v_self), ((int)__pyx_v_order));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6lhapdf_6AlphaS_20setOrderQCD(struct __pyx_obj_6lhapdf_AlphaS *__pyx_v_self, int __pyx_v_order) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setOrderQCD", 0);

  /* "lhapdf.pyx":502
 *      def setOrderQCD(self, int order):
 *          "Set the QCD running order (max num loops) for this alphaS"
 *          self._ptr.setOrderQCD(order)             # <<<<<<<<<<<<<<
 * 
 *      def setMZ(self, double mz):
 */
  try {
    __pyx_v_self->_ptr->setOrderQCD(__pyx_v_order);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 502, __pyx_L1_error)
  }

  /* "lhapdf.pyx":500
 *          return self._ptr.orderQCD()
 * 
 *      def setOrderQCD(self, int order):             # <<<<<<<<<<<<<<
 *          "Set the QCD running order (max num loops) for this alphaS"
 *          self._ptr.setOrderQCD(order)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("lhapdf.AlphaS.setOrderQCD", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lhapdf.pyx":504
 *          self._ptr.setOrderQCD(order)
 * 
 *      def setMZ(self, double mz):             # <<<<<<<<<<<<<<
 *          "Set the Z mass (used in ODE solver)"
 *          self._ptr.setMZ(mz)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6lhapdf_6AlphaS_23setMZ(PyObject *__pyx_v_self, PyObject *__pyx_arg_mz); /*proto*/
static char __pyx_doc_6lhapdf_6AlphaS_22setMZ[] = "AlphaS.setMZ(self, double mz)\nSet the Z mass (used in ODE solver)";
static PyObject *__pyx_pw_6lhapdf_6AlphaS_23setMZ(PyObject *__pyx_v_self, PyObject *__pyx_arg_mz) {
  double __pyx_v_mz;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setMZ (wrapper)", 0);
  assert(__pyx_arg_mz); {
    __pyx_v_mz = __pyx_PyFloat_AsDouble(__pyx_arg_mz); if (unlikely((__pyx_v_mz == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 504, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("lhapdf.AlphaS.setMZ", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6lhapdf_6AlphaS_22setMZ(((struct __pyx_obj_6lhapdf_AlphaS *)__pyx_v_self), ((double)__pyx_v_mz));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6lhapdf_6AlphaS_22setMZ(struct __pyx_obj_6lhapdf_AlphaS *__pyx_v_self, double __pyx_v_mz) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setMZ", 0);

  /* "lhapdf.pyx":506
 *      def setMZ(self, double mz):
 *          "Set the Z mass (used in ODE solver)"
 *          self._ptr.setMZ(mz)             # <<<<<<<<<<<<<<
 * 
 *      def setAlphaSMZ(self, double alphas):
 */
  try {
    __pyx_v_self->_ptr->setMZ(__pyx_v_mz);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 506, __pyx_L1_error)
  }

  /* "lhapdf.pyx":504
 *          self._ptr.setOrderQCD(order)
 * 
 *      def setMZ(self, double mz):             # <<<<<<<<<<<<<<
 *          "Set the Z mass (used in ODE solver)"
 *          self._ptr.setMZ(mz)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("lhapdf.AlphaS.setMZ", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lhapdf.pyx":508
 *          self._ptr.setMZ(mz)
 * 
 *      def setAlphaSMZ(self, double alphas):             # <<<<<<<<<<<<<<
 *          "Set alpha_s at the Z mass (used in ODE solver)"
 *          self._ptr.setAlphaSMZ(alphas)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6lhapdf_6AlphaS_25setAlphaSMZ(PyObject *__pyx_v_self, PyObject *__pyx_arg_alphas); /*proto*/
static char __pyx_doc_6lhapdf_6AlphaS_24setAlphaSMZ[] = "AlphaS.setAlphaSMZ(self, double alphas)\nSet alpha_s at the Z mass (used in ODE solver)";
static PyObject *__pyx_pw_6lhapdf_6AlphaS_25setAlphaSMZ(PyObject *__pyx_v_self, PyObject *__pyx_arg_alphas) {
  double __pyx_v_alphas;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setAlphaSMZ (wrapper)", 0);
  assert(__pyx_arg_alphas); {
    __pyx_v_alphas = __pyx_PyFloat_AsDouble(__pyx_arg_alphas); if (unlikely((__pyx_v_alphas == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 508, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("lhapdf.AlphaS.setAlphaSMZ", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6lhapdf_6AlphaS_24setAlphaSMZ(((struct __pyx_obj_6lhapdf_AlphaS *)__pyx_v_self), ((double)__pyx_v_alphas));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6lhapdf_6AlphaS_24setAlphaSMZ(struct __pyx_obj_6lhapdf_AlphaS *__pyx_v_self, double __pyx_v_alphas) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setAlphaSMZ", 0);

  /* "lhapdf.pyx":510
 *      def setAlphaSMZ(self, double alphas):
 *          "Set alpha_s at the Z mass (used in ODE solver)"
 *          self._ptr.setAlphaSMZ(alphas)             # <<<<<<<<<<<<<<
 * 
 *      def setLambda(self, int id, double val):
 */
  try {
    __pyx_v_self->_ptr->setAlphaSMZ(__pyx_v_alphas);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 510, __pyx_L1_error)
  }

  /* "lhapdf.pyx":508
 *          self._ptr.setMZ(mz)
 * 
 *      def setAlphaSMZ(self, double alphas):             # <<<<<<<<<<<<<<
 *          "Set alpha_s at the Z mass (used in ODE solver)"
 *          self._ptr.setAlphaSMZ(alphas)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("lhapdf.AlphaS.setAlphaSMZ", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lhapdf.pyx":512
 *          self._ptr.setAlphaSMZ(alphas)
 * 
 *      def setLambda(self, int id, double val):             # <<<<<<<<<<<<<<
 *          "Set the id'th LambdaQCD value (used in analytic solver)"
 *          self._ptr.setLambda(id, val)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6lhapdf_6AlphaS_27setLambda(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6lhapdf_6AlphaS_26setLambda[] = "AlphaS.setLambda(self, int id, double val)\nSet the id'th LambdaQCD value (used in analytic solver)";
static PyObject *__pyx_pw_6lhapdf_6AlphaS_27setLambda(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_id;
  double __pyx_v_val;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setLambda (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_id,&__pyx_n_s_val,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_id)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_val)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setLambda", 1, 2, 2, 1); __PYX_ERR(0, 512, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setLambda") < 0)) __PYX_ERR(0, 512, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_id = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_id == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 512, __pyx_L3_error)
    __pyx_v_val = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_val == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 512, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setLambda", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 512, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("lhapdf.AlphaS.setLambda", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6lhapdf_6AlphaS_26setLambda(((struct __pyx_obj_6lhapdf_AlphaS *)__pyx_v_self), __pyx_v_id, __pyx_v_val);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6lhapdf_6AlphaS_26setLambda(struct __pyx_obj_6lhapdf_AlphaS *__pyx_v_self, int __pyx_v_id, double __pyx_v_val) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setLambda", 0);

  /* "lhapdf.pyx":514
 *      def setLambda(self, int id, double val):
 *          "Set the id'th LambdaQCD value (used in analytic solver)"
 *          self._ptr.setLambda(id, val)             # <<<<<<<<<<<<<<
 * 
 *      def setFlavorScheme(self, scheme, int nf):
 */
  try {
    __pyx_v_self->_ptr->setLambda(__pyx_v_id, __pyx_v_val);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 514, __pyx_L1_error)
  }

  /* "lhapdf.pyx":512
 *          self._ptr.setAlphaSMZ(alphas)
 * 
 *      def setLambda(self, int id, double val):             # <<<<<<<<<<<<<<
 *          "Set the id'th LambdaQCD value (used in analytic solver)"
 *          self._ptr.setLambda(id, val)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("lhapdf.AlphaS.setLambda", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lhapdf.pyx":516
 *          self._ptr.setLambda(id, val)
 * 
 *      def setFlavorScheme(self, scheme, int nf):             # <<<<<<<<<<<<<<
 *          "Set the flavor scheme. nf is the fixed number (if FIXED)"
 *          "or the max number (if VARIABLE)"
 */

/* Python wrapper */
static PyObject *__pyx_pw_6lhapdf_6AlphaS_29setFlavorScheme(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6lhapdf_6AlphaS_28setFlavorScheme[] = "AlphaS.setFlavorScheme(self, scheme, int nf)\nSet the flavor scheme. nf is the fixed number (if FIXED)";
static PyObject *__pyx_pw_6lhapdf_6AlphaS_29setFlavorScheme(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_scheme = 0;
  int __pyx_v_nf;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setFlavorScheme (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_scheme,&__pyx_n_s_nf,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_scheme)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nf)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setFlavorScheme", 1, 2, 2, 1); __PYX_ERR(0, 516, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setFlavorScheme") < 0)) __PYX_ERR(0, 516, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_scheme = values[0];
    __pyx_v_nf = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_nf == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 516, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setFlavorScheme", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 516, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("lhapdf.AlphaS.setFlavorScheme", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6lhapdf_6AlphaS_28setFlavorScheme(((struct __pyx_obj_6lhapdf_AlphaS *)__pyx_v_self), __pyx_v_scheme, __pyx_v_nf);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6lhapdf_6AlphaS_28setFlavorScheme(struct __pyx_obj_6lhapdf_AlphaS *__pyx_v_self, PyObject *__pyx_v_scheme, int __pyx_v_nf) {
  LHAPDF::AlphaS::FlavorScheme __pyx_v_s;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("setFlavorScheme", 0);

  /* "lhapdf.pyx":520
 *          "or the max number (if VARIABLE)"
 *          cdef FlavorScheme s
 *          if scheme == "VARIABLE":             # <<<<<<<<<<<<<<
 *            s = VARIABLE
 *          elif scheme == "FIXED":
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_scheme, __pyx_n_s_VARIABLE, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 520, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "lhapdf.pyx":521
 *          cdef FlavorScheme s
 *          if scheme == "VARIABLE":
 *            s = VARIABLE             # <<<<<<<<<<<<<<
 *          elif scheme == "FIXED":
 *            s = FIXED
 */
    __pyx_v_s = ((LHAPDF::AlphaS::FlavorScheme)__pyx_e_6lhapdf_VARIABLE);

    /* "lhapdf.pyx":520
 *          "or the max number (if VARIABLE)"
 *          cdef FlavorScheme s
 *          if scheme == "VARIABLE":             # <<<<<<<<<<<<<<
 *            s = VARIABLE
 *          elif scheme == "FIXED":
 */
    goto __pyx_L3;
  }

  /* "lhapdf.pyx":522
 *          if scheme == "VARIABLE":
 *            s = VARIABLE
 *          elif scheme == "FIXED":             # <<<<<<<<<<<<<<
 *            s = FIXED
 *          else:
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_scheme, __pyx_n_s_FIXED, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 522, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "lhapdf.pyx":523
 *            s = VARIABLE
 *          elif scheme == "FIXED":
 *            s = FIXED             # <<<<<<<<<<<<<<
 *          else:
 *            print "You can only set the flavor scheme to FIXED or VARIABLE"
 */
    __pyx_v_s = ((LHAPDF::AlphaS::FlavorScheme)__pyx_e_6lhapdf_FIXED);

    /* "lhapdf.pyx":522
 *          if scheme == "VARIABLE":
 *            s = VARIABLE
 *          elif scheme == "FIXED":             # <<<<<<<<<<<<<<
 *            s = FIXED
 *          else:
 */
    goto __pyx_L3;
  }

  /* "lhapdf.pyx":525
 *            s = FIXED
 *          else:
 *            print "You can only set the flavor scheme to FIXED or VARIABLE"             # <<<<<<<<<<<<<<
 *            return
 *          self._ptr.setFlavorScheme(s,nf)
 */
  /*else*/ {
    if (__Pyx_PrintOne(0, __pyx_kp_s_You_can_only_set_the_flavor_sche) < 0) __PYX_ERR(0, 525, __pyx_L1_error)

    /* "lhapdf.pyx":526
 *          else:
 *            print "You can only set the flavor scheme to FIXED or VARIABLE"
 *            return             # <<<<<<<<<<<<<<
 *          self._ptr.setFlavorScheme(s,nf)
 *      def flavorScheme(self):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;
  }
  __pyx_L3:;

  /* "lhapdf.pyx":527
 *            print "You can only set the flavor scheme to FIXED or VARIABLE"
 *            return
 *          self._ptr.setFlavorScheme(s,nf)             # <<<<<<<<<<<<<<
 *      def flavorScheme(self):
 *          cdef FlavorScheme s = self._ptr.flavorScheme()
 */
  try {
    __pyx_v_self->_ptr->setFlavorScheme(__pyx_v_s, __pyx_v_nf);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 527, __pyx_L1_error)
  }

  /* "lhapdf.pyx":516
 *          self._ptr.setLambda(id, val)
 * 
 *      def setFlavorScheme(self, scheme, int nf):             # <<<<<<<<<<<<<<
 *          "Set the flavor scheme. nf is the fixed number (if FIXED)"
 *          "or the max number (if VARIABLE)"
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("lhapdf.AlphaS.setFlavorScheme", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lhapdf.pyx":528
 *            return
 *          self._ptr.setFlavorScheme(s,nf)
 *      def flavorScheme(self):             # <<<<<<<<<<<<<<
 *          cdef FlavorScheme s = self._ptr.flavorScheme()
 *          if int(s) == 0:
 */

/* Python wrapper */
static PyObject *__pyx_pw_6lhapdf_6AlphaS_31flavorScheme(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6lhapdf_6AlphaS_30flavorScheme[] = "AlphaS.flavorScheme(self)";
static PyObject *__pyx_pw_6lhapdf_6AlphaS_31flavorScheme(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("flavorScheme (wrapper)", 0);
  __pyx_r = __pyx_pf_6lhapdf_6AlphaS_30flavorScheme(((struct __pyx_obj_6lhapdf_AlphaS *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6lhapdf_6AlphaS_30flavorScheme(struct __pyx_obj_6lhapdf_AlphaS *__pyx_v_self) {
  LHAPDF::AlphaS::FlavorScheme __pyx_v_s;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  LHAPDF::AlphaS::FlavorScheme __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("flavorScheme", 0);

  /* "lhapdf.pyx":529
 *          self._ptr.setFlavorScheme(s,nf)
 *      def flavorScheme(self):
 *          cdef FlavorScheme s = self._ptr.flavorScheme()             # <<<<<<<<<<<<<<
 *          if int(s) == 0:
 *            print "FIXED"
 */
  try {
    __pyx_t_1 = __pyx_v_self->_ptr->flavorScheme();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 529, __pyx_L1_error)
  }
  __pyx_v_s = __pyx_t_1;

  /* "lhapdf.pyx":530
 *      def flavorScheme(self):
 *          cdef FlavorScheme s = self._ptr.flavorScheme()
 *          if int(s) == 0:             # <<<<<<<<<<<<<<
 *            print "FIXED"
 *          if int(s) == 1:
 */
  __pyx_t_2 = __Pyx_PyInt_From_LHAPDF_3a__3a_AlphaS_3a__3a_FlavorScheme(__pyx_v_s); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 530, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 530, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&PyInt_Type)), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 530, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyInt_EqObjC(__pyx_t_2, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 530, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 530, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_4) {

    /* "lhapdf.pyx":531
 *          cdef FlavorScheme s = self._ptr.flavorScheme()
 *          if int(s) == 0:
 *            print "FIXED"             # <<<<<<<<<<<<<<
 *          if int(s) == 1:
 *            print "VARIABLE"
 */
    if (__Pyx_PrintOne(0, __pyx_n_s_FIXED) < 0) __PYX_ERR(0, 531, __pyx_L1_error)

    /* "lhapdf.pyx":530
 *      def flavorScheme(self):
 *          cdef FlavorScheme s = self._ptr.flavorScheme()
 *          if int(s) == 0:             # <<<<<<<<<<<<<<
 *            print "FIXED"
 *          if int(s) == 1:
 */
  }

  /* "lhapdf.pyx":532
 *          if int(s) == 0:
 *            print "FIXED"
 *          if int(s) == 1:             # <<<<<<<<<<<<<<
 *            print "VARIABLE"
 * 
 */
  __pyx_t_3 = __Pyx_PyInt_From_LHAPDF_3a__3a_AlphaS_3a__3a_FlavorScheme(__pyx_v_s); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 532, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 532, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&PyInt_Type)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 532, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_EqObjC(__pyx_t_3, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 532, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 532, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "lhapdf.pyx":533
 *            print "FIXED"
 *          if int(s) == 1:
 *            print "VARIABLE"             # <<<<<<<<<<<<<<
 * 
 * 
 */
    if (__Pyx_PrintOne(0, __pyx_n_s_VARIABLE) < 0) __PYX_ERR(0, 533, __pyx_L1_error)

    /* "lhapdf.pyx":532
 *          if int(s) == 0:
 *            print "FIXED"
 *          if int(s) == 1:             # <<<<<<<<<<<<<<
 *            print "VARIABLE"
 * 
 */
  }

  /* "lhapdf.pyx":528
 *            return
 *          self._ptr.setFlavorScheme(s,nf)
 *      def flavorScheme(self):             # <<<<<<<<<<<<<<
 *          cdef FlavorScheme s = self._ptr.flavorScheme()
 *          if int(s) == 0:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("lhapdf.AlphaS.flavorScheme", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lhapdf.pyx":536
 * 
 * 
 * def getConfig():             # <<<<<<<<<<<<<<
 *     """Factory function to get the global config object."""
 *     cdef c.Info* ptr = &c.getConfig()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6lhapdf_3getConfig(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6lhapdf_2getConfig[] = "getConfig()\nFactory function to get the global config object.";
static PyMethodDef __pyx_mdef_6lhapdf_3getConfig = {"getConfig", (PyCFunction)__pyx_pw_6lhapdf_3getConfig, METH_NOARGS, __pyx_doc_6lhapdf_2getConfig};
static PyObject *__pyx_pw_6lhapdf_3getConfig(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getConfig (wrapper)", 0);
  __pyx_r = __pyx_pf_6lhapdf_2getConfig(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6lhapdf_2getConfig(CYTHON_UNUSED PyObject *__pyx_self) {
  LHAPDF::Info *__pyx_v_ptr;
  struct __pyx_obj_6lhapdf_Info *__pyx_v_obj = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("getConfig", 0);

  /* "lhapdf.pyx":538
 * def getConfig():
 *     """Factory function to get the global config object."""
 *     cdef c.Info* ptr = &c.getConfig()             # <<<<<<<<<<<<<<
 *     cdef Info obj = Info.__new__(Info)
 *     obj.set_ptr(ptr)
 */
  __pyx_v_ptr = (&LHAPDF::getConfig());

  /* "lhapdf.pyx":539
 *     """Factory function to get the global config object."""
 *     cdef c.Info* ptr = &c.getConfig()
 *     cdef Info obj = Info.__new__(Info)             # <<<<<<<<<<<<<<
 *     obj.set_ptr(ptr)
 *     return obj
 */
  __pyx_t_1 = __pyx_tp_new_6lhapdf_Info(((PyTypeObject *)__pyx_ptype_6lhapdf_Info), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 539, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_6lhapdf_Info)))) __PYX_ERR(0, 539, __pyx_L1_error)
  __pyx_v_obj = ((struct __pyx_obj_6lhapdf_Info *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "lhapdf.pyx":540
 *     cdef c.Info* ptr = &c.getConfig()
 *     cdef Info obj = Info.__new__(Info)
 *     obj.set_ptr(ptr)             # <<<<<<<<<<<<<<
 *     return obj
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_6lhapdf_Info *)__pyx_v_obj->__pyx_vtab)->set_ptr(__pyx_v_obj, __pyx_v_ptr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 540, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "lhapdf.pyx":541
 *     cdef Info obj = Info.__new__(Info)
 *     obj.set_ptr(ptr)
 *     return obj             # <<<<<<<<<<<<<<
 * 
 * def getPDFSet(setname):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_obj));
  __pyx_r = ((PyObject *)__pyx_v_obj);
  goto __pyx_L0;

  /* "lhapdf.pyx":536
 * 
 * 
 * def getConfig():             # <<<<<<<<<<<<<<
 *     """Factory function to get the global config object."""
 *     cdef c.Info* ptr = &c.getConfig()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("lhapdf.getConfig", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_obj);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lhapdf.pyx":543
 *     return obj
 * 
 * def getPDFSet(setname):             # <<<<<<<<<<<<<<
 *     """Factory function to get the specified PDF set."""
 *     cdef c.PDFSet* ptr = &c.getPDFSet(text_encode(setname))
 */

/* Python wrapper */
static PyObject *__pyx_pw_6lhapdf_5getPDFSet(PyObject *__pyx_self, PyObject *__pyx_v_setname); /*proto*/
static char __pyx_doc_6lhapdf_4getPDFSet[] = "getPDFSet(setname)\nFactory function to get the specified PDF set.";
static PyMethodDef __pyx_mdef_6lhapdf_5getPDFSet = {"getPDFSet", (PyCFunction)__pyx_pw_6lhapdf_5getPDFSet, METH_O, __pyx_doc_6lhapdf_4getPDFSet};
static PyObject *__pyx_pw_6lhapdf_5getPDFSet(PyObject *__pyx_self, PyObject *__pyx_v_setname) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getPDFSet (wrapper)", 0);
  __pyx_r = __pyx_pf_6lhapdf_4getPDFSet(__pyx_self, ((PyObject *)__pyx_v_setname));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6lhapdf_4getPDFSet(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_setname) {
  LHAPDF::PDFSet *__pyx_v_ptr;
  struct __pyx_obj_6lhapdf_PDFSet *__pyx_v_obj = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  std::string __pyx_t_5;
  __Pyx_RefNannySetupContext("getPDFSet", 0);

  /* "lhapdf.pyx":545
 * def getPDFSet(setname):
 *     """Factory function to get the specified PDF set."""
 *     cdef c.PDFSet* ptr = &c.getPDFSet(text_encode(setname))             # <<<<<<<<<<<<<<
 *     cdef PDFSet obj = PDFSet.__new__(PDFSet)
 *     obj.set_ptr(ptr)
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_text_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 545, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_setname); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 545, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_setname};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 545, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_setname};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 545, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 545, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __pyx_t_3 = NULL;
      __Pyx_INCREF(__pyx_v_setname);
      __Pyx_GIVEREF(__pyx_v_setname);
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_setname);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 545, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 545, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_ptr = (&LHAPDF::getPDFSet(__pyx_t_5));

  /* "lhapdf.pyx":546
 *     """Factory function to get the specified PDF set."""
 *     cdef c.PDFSet* ptr = &c.getPDFSet(text_encode(setname))
 *     cdef PDFSet obj = PDFSet.__new__(PDFSet)             # <<<<<<<<<<<<<<
 *     obj.set_ptr(ptr)
 *     return obj
 */
  __pyx_t_1 = __pyx_tp_new_6lhapdf_PDFSet(((PyTypeObject *)__pyx_ptype_6lhapdf_PDFSet), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 546, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_6lhapdf_PDFSet)))) __PYX_ERR(0, 546, __pyx_L1_error)
  __pyx_v_obj = ((struct __pyx_obj_6lhapdf_PDFSet *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "lhapdf.pyx":547
 *     cdef c.PDFSet* ptr = &c.getPDFSet(text_encode(setname))
 *     cdef PDFSet obj = PDFSet.__new__(PDFSet)
 *     obj.set_ptr(ptr)             # <<<<<<<<<<<<<<
 *     return obj
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_6lhapdf_PDFSet *)__pyx_v_obj->__pyx_vtab)->set_ptr(__pyx_v_obj, __pyx_v_ptr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 547, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "lhapdf.pyx":548
 *     cdef PDFSet obj = PDFSet.__new__(PDFSet)
 *     obj.set_ptr(ptr)
 *     return obj             # <<<<<<<<<<<<<<
 * 
 * def mkPDFs(setname):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_obj));
  __pyx_r = ((PyObject *)__pyx_v_obj);
  goto __pyx_L0;

  /* "lhapdf.pyx":543
 *     return obj
 * 
 * def getPDFSet(setname):             # <<<<<<<<<<<<<<
 *     """Factory function to get the specified PDF set."""
 *     cdef c.PDFSet* ptr = &c.getPDFSet(text_encode(setname))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("lhapdf.getPDFSet", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_obj);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lhapdf.pyx":550
 *     return obj
 * 
 * def mkPDFs(setname):             # <<<<<<<<<<<<<<
 *     """Factory function to make all the PDF objects in the specified set."""
 *     cdef vector[c.PDF*] ptrs = c.mkPDFs(text_encode(setname))
 */

/* Python wrapper */
static PyObject *__pyx_pw_6lhapdf_7mkPDFs(PyObject *__pyx_self, PyObject *__pyx_v_setname); /*proto*/
static char __pyx_doc_6lhapdf_6mkPDFs[] = "mkPDFs(setname)\nFactory function to make all the PDF objects in the specified set.";
static PyMethodDef __pyx_mdef_6lhapdf_7mkPDFs = {"mkPDFs", (PyCFunction)__pyx_pw_6lhapdf_7mkPDFs, METH_O, __pyx_doc_6lhapdf_6mkPDFs};
static PyObject *__pyx_pw_6lhapdf_7mkPDFs(PyObject *__pyx_self, PyObject *__pyx_v_setname) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("mkPDFs (wrapper)", 0);
  __pyx_r = __pyx_pf_6lhapdf_6mkPDFs(__pyx_self, ((PyObject *)__pyx_v_setname));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6lhapdf_6mkPDFs(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_setname) {
  std::vector<LHAPDF::PDF *>  __pyx_v_ptrs;
  struct __pyx_obj_6lhapdf_PDF *__pyx_v_obj = 0;
  PyObject *__pyx_v_objs = NULL;
  LHAPDF::PDF *__pyx_v_ptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  std::string __pyx_t_5;
  std::vector<LHAPDF::PDF *>  __pyx_t_6;
  std::vector<LHAPDF::PDF *> ::iterator __pyx_t_7;
  LHAPDF::PDF *__pyx_t_8;
  int __pyx_t_9;
  __Pyx_RefNannySetupContext("mkPDFs", 0);

  /* "lhapdf.pyx":552
 * def mkPDFs(setname):
 *     """Factory function to make all the PDF objects in the specified set."""
 *     cdef vector[c.PDF*] ptrs = c.mkPDFs(text_encode(setname))             # <<<<<<<<<<<<<<
 *     cdef PDF obj
 *     objs = []
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_text_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 552, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_setname); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 552, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_setname};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 552, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_setname};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 552, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 552, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __pyx_t_3 = NULL;
      __Pyx_INCREF(__pyx_v_setname);
      __Pyx_GIVEREF(__pyx_v_setname);
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_setname);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 552, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 552, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  try {
    __pyx_t_6 = LHAPDF::mkPDFs(__pyx_t_5);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 552, __pyx_L1_error)
  }
  __pyx_v_ptrs = __pyx_t_6;

  /* "lhapdf.pyx":554
 *     cdef vector[c.PDF*] ptrs = c.mkPDFs(text_encode(setname))
 *     cdef PDF obj
 *     objs = []             # <<<<<<<<<<<<<<
 *     for ptr in ptrs:
 *         obj = PDF.__new__(PDF)
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 554, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_objs = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "lhapdf.pyx":555
 *     cdef PDF obj
 *     objs = []
 *     for ptr in ptrs:             # <<<<<<<<<<<<<<
 *         obj = PDF.__new__(PDF)
 *         obj.set_ptr(ptr)
 */
  __pyx_t_7 = __pyx_v_ptrs.begin();
  for (;;) {
    if (!(__pyx_t_7 != __pyx_v_ptrs.end())) break;
    __pyx_t_8 = *__pyx_t_7;
    ++__pyx_t_7;
    __pyx_v_ptr = __pyx_t_8;

    /* "lhapdf.pyx":556
 *     objs = []
 *     for ptr in ptrs:
 *         obj = PDF.__new__(PDF)             # <<<<<<<<<<<<<<
 *         obj.set_ptr(ptr)
 *         objs.append(obj)
 */
    __pyx_t_1 = __pyx_tp_new_6lhapdf_PDF(((PyTypeObject *)__pyx_ptype_6lhapdf_PDF), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 556, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!(likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_6lhapdf_PDF)))) __PYX_ERR(0, 556, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_obj, ((struct __pyx_obj_6lhapdf_PDF *)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "lhapdf.pyx":557
 *     for ptr in ptrs:
 *         obj = PDF.__new__(PDF)
 *         obj.set_ptr(ptr)             # <<<<<<<<<<<<<<
 *         objs.append(obj)
 *     return objs
 */
    __pyx_t_1 = ((struct __pyx_vtabstruct_6lhapdf_PDF *)__pyx_v_obj->__pyx_vtab)->set_ptr(__pyx_v_obj, __pyx_v_ptr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 557, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "lhapdf.pyx":558
 *         obj = PDF.__new__(PDF)
 *         obj.set_ptr(ptr)
 *         objs.append(obj)             # <<<<<<<<<<<<<<
 *     return objs
 * 
 */
    __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_objs, ((PyObject *)__pyx_v_obj)); if (unlikely(__pyx_t_9 == -1)) __PYX_ERR(0, 558, __pyx_L1_error)

    /* "lhapdf.pyx":555
 *     cdef PDF obj
 *     objs = []
 *     for ptr in ptrs:             # <<<<<<<<<<<<<<
 *         obj = PDF.__new__(PDF)
 *         obj.set_ptr(ptr)
 */
  }

  /* "lhapdf.pyx":559
 *         obj.set_ptr(ptr)
 *         objs.append(obj)
 *     return objs             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_objs);
  __pyx_r = __pyx_v_objs;
  goto __pyx_L0;

  /* "lhapdf.pyx":550
 *     return obj
 * 
 * def mkPDFs(setname):             # <<<<<<<<<<<<<<
 *     """Factory function to make all the PDF objects in the specified set."""
 *     cdef vector[c.PDF*] ptrs = c.mkPDFs(text_encode(setname))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("lhapdf.mkPDFs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_obj);
  __Pyx_XDECREF(__pyx_v_objs);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lhapdf.pyx":562
 * 
 * 
 * cdef mkPDF_setmem(string setname, int memid):             # <<<<<<<<<<<<<<
 *     "Factory function to make a PDF object from the set name and member number."
 *     cdef PDF obj = PDF.__new__(PDF)
 */

static PyObject *__pyx_f_6lhapdf_mkPDF_setmem(std::string __pyx_v_setname, int __pyx_v_memid) {
  struct __pyx_obj_6lhapdf_PDF *__pyx_v_obj = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  LHAPDF::PDF *__pyx_t_2;
  __Pyx_RefNannySetupContext("mkPDF_setmem", 0);

  /* "lhapdf.pyx":564
 * cdef mkPDF_setmem(string setname, int memid):
 *     "Factory function to make a PDF object from the set name and member number."
 *     cdef PDF obj = PDF.__new__(PDF)             # <<<<<<<<<<<<<<
 *     obj.set_ptr(c.mkPDF(setname, memid))
 *     return obj
 */
  __pyx_t_1 = __pyx_tp_new_6lhapdf_PDF(((PyTypeObject *)__pyx_ptype_6lhapdf_PDF), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 564, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_6lhapdf_PDF)))) __PYX_ERR(0, 564, __pyx_L1_error)
  __pyx_v_obj = ((struct __pyx_obj_6lhapdf_PDF *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "lhapdf.pyx":565
 *     "Factory function to make a PDF object from the set name and member number."
 *     cdef PDF obj = PDF.__new__(PDF)
 *     obj.set_ptr(c.mkPDF(setname, memid))             # <<<<<<<<<<<<<<
 *     return obj
 * 
 */
  try {
    __pyx_t_2 = LHAPDF::mkPDF(__pyx_v_setname, __pyx_v_memid);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 565, __pyx_L1_error)
  }
  __pyx_t_1 = ((struct __pyx_vtabstruct_6lhapdf_PDF *)__pyx_v_obj->__pyx_vtab)->set_ptr(__pyx_v_obj, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 565, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "lhapdf.pyx":566
 *     cdef PDF obj = PDF.__new__(PDF)
 *     obj.set_ptr(c.mkPDF(setname, memid))
 *     return obj             # <<<<<<<<<<<<<<
 * 
 * cdef mkPDF_lhaid(int lhaid):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_obj));
  __pyx_r = ((PyObject *)__pyx_v_obj);
  goto __pyx_L0;

  /* "lhapdf.pyx":562
 * 
 * 
 * cdef mkPDF_setmem(string setname, int memid):             # <<<<<<<<<<<<<<
 *     "Factory function to make a PDF object from the set name and member number."
 *     cdef PDF obj = PDF.__new__(PDF)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("lhapdf.mkPDF_setmem", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_obj);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lhapdf.pyx":568
 *     return obj
 * 
 * cdef mkPDF_lhaid(int lhaid):             # <<<<<<<<<<<<<<
 *     "Factory function to make a PDF object from the LHAPDF ID number."
 *     cdef PDF obj = PDF.__new__(PDF)
 */

static PyObject *__pyx_f_6lhapdf_mkPDF_lhaid(int __pyx_v_lhaid) {
  struct __pyx_obj_6lhapdf_PDF *__pyx_v_obj = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  LHAPDF::PDF *__pyx_t_2;
  __Pyx_RefNannySetupContext("mkPDF_lhaid", 0);

  /* "lhapdf.pyx":570
 * cdef mkPDF_lhaid(int lhaid):
 *     "Factory function to make a PDF object from the LHAPDF ID number."
 *     cdef PDF obj = PDF.__new__(PDF)             # <<<<<<<<<<<<<<
 *     obj.set_ptr(c.mkPDF(lhaid))
 *     return obj
 */
  __pyx_t_1 = __pyx_tp_new_6lhapdf_PDF(((PyTypeObject *)__pyx_ptype_6lhapdf_PDF), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 570, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_6lhapdf_PDF)))) __PYX_ERR(0, 570, __pyx_L1_error)
  __pyx_v_obj = ((struct __pyx_obj_6lhapdf_PDF *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "lhapdf.pyx":571
 *     "Factory function to make a PDF object from the LHAPDF ID number."
 *     cdef PDF obj = PDF.__new__(PDF)
 *     obj.set_ptr(c.mkPDF(lhaid))             # <<<<<<<<<<<<<<
 *     return obj
 * 
 */
  try {
    __pyx_t_2 = LHAPDF::mkPDF(__pyx_v_lhaid);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 571, __pyx_L1_error)
  }
  __pyx_t_1 = ((struct __pyx_vtabstruct_6lhapdf_PDF *)__pyx_v_obj->__pyx_vtab)->set_ptr(__pyx_v_obj, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 571, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "lhapdf.pyx":572
 *     cdef PDF obj = PDF.__new__(PDF)
 *     obj.set_ptr(c.mkPDF(lhaid))
 *     return obj             # <<<<<<<<<<<<<<
 * 
 * cdef mkPDF_setmemstr(string setname_nmem):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_obj));
  __pyx_r = ((PyObject *)__pyx_v_obj);
  goto __pyx_L0;

  /* "lhapdf.pyx":568
 *     return obj
 * 
 * cdef mkPDF_lhaid(int lhaid):             # <<<<<<<<<<<<<<
 *     "Factory function to make a PDF object from the LHAPDF ID number."
 *     cdef PDF obj = PDF.__new__(PDF)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("lhapdf.mkPDF_lhaid", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_obj);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lhapdf.pyx":574
 *     return obj
 * 
 * cdef mkPDF_setmemstr(string setname_nmem):             # <<<<<<<<<<<<<<
 *     "Factory function to make a PDF object from the set name and member number in SETNAME/NMEM string format."
 *     cdef PDF obj = PDF.__new__(PDF)
 */

static PyObject *__pyx_f_6lhapdf_mkPDF_setmemstr(std::string __pyx_v_setname_nmem) {
  struct __pyx_obj_6lhapdf_PDF *__pyx_v_obj = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  LHAPDF::PDF *__pyx_t_2;
  __Pyx_RefNannySetupContext("mkPDF_setmemstr", 0);

  /* "lhapdf.pyx":576
 * cdef mkPDF_setmemstr(string setname_nmem):
 *     "Factory function to make a PDF object from the set name and member number in SETNAME/NMEM string format."
 *     cdef PDF obj = PDF.__new__(PDF)             # <<<<<<<<<<<<<<
 *     obj.set_ptr(c.mkPDF(setname_nmem))
 *     return obj
 */
  __pyx_t_1 = __pyx_tp_new_6lhapdf_PDF(((PyTypeObject *)__pyx_ptype_6lhapdf_PDF), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 576, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_6lhapdf_PDF)))) __PYX_ERR(0, 576, __pyx_L1_error)
  __pyx_v_obj = ((struct __pyx_obj_6lhapdf_PDF *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "lhapdf.pyx":577
 *     "Factory function to make a PDF object from the set name and member number in SETNAME/NMEM string format."
 *     cdef PDF obj = PDF.__new__(PDF)
 *     obj.set_ptr(c.mkPDF(setname_nmem))             # <<<<<<<<<<<<<<
 *     return obj
 * 
 */
  try {
    __pyx_t_2 = LHAPDF::mkPDF(__pyx_v_setname_nmem);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 577, __pyx_L1_error)
  }
  __pyx_t_1 = ((struct __pyx_vtabstruct_6lhapdf_PDF *)__pyx_v_obj->__pyx_vtab)->set_ptr(__pyx_v_obj, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 577, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "lhapdf.pyx":578
 *     cdef PDF obj = PDF.__new__(PDF)
 *     obj.set_ptr(c.mkPDF(setname_nmem))
 *     return obj             # <<<<<<<<<<<<<<
 * 
 * cdef mkAlphaS_setmem(string setname, int memid):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_obj));
  __pyx_r = ((PyObject *)__pyx_v_obj);
  goto __pyx_L0;

  /* "lhapdf.pyx":574
 *     return obj
 * 
 * cdef mkPDF_setmemstr(string setname_nmem):             # <<<<<<<<<<<<<<
 *     "Factory function to make a PDF object from the set name and member number in SETNAME/NMEM string format."
 *     cdef PDF obj = PDF.__new__(PDF)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("lhapdf.mkPDF_setmemstr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_obj);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lhapdf.pyx":580
 *     return obj
 * 
 * cdef mkAlphaS_setmem(string setname, int memid):             # <<<<<<<<<<<<<<
 *     "Factory function to make a AlphaS object from the set name and member number."
 *     cdef AlphaS obj = AlphaS.__new__(AlphaS)
 */

static PyObject *__pyx_f_6lhapdf_mkAlphaS_setmem(std::string __pyx_v_setname, int __pyx_v_memid) {
  struct __pyx_obj_6lhapdf_AlphaS *__pyx_v_obj = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  LHAPDF::AlphaS *__pyx_t_2;
  __Pyx_RefNannySetupContext("mkAlphaS_setmem", 0);

  /* "lhapdf.pyx":582
 * cdef mkAlphaS_setmem(string setname, int memid):
 *     "Factory function to make a AlphaS object from the set name and member number."
 *     cdef AlphaS obj = AlphaS.__new__(AlphaS)             # <<<<<<<<<<<<<<
 *     obj.set_ptr(c.mkAlphaS(setname, memid))
 *     return obj
 */
  __pyx_t_1 = __pyx_tp_new_6lhapdf_AlphaS(((PyTypeObject *)__pyx_ptype_6lhapdf_AlphaS), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 582, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_6lhapdf_AlphaS)))) __PYX_ERR(0, 582, __pyx_L1_error)
  __pyx_v_obj = ((struct __pyx_obj_6lhapdf_AlphaS *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "lhapdf.pyx":583
 *     "Factory function to make a AlphaS object from the set name and member number."
 *     cdef AlphaS obj = AlphaS.__new__(AlphaS)
 *     obj.set_ptr(c.mkAlphaS(setname, memid))             # <<<<<<<<<<<<<<
 *     return obj
 * 
 */
  try {
    __pyx_t_2 = LHAPDF::mkAlphaS(__pyx_v_setname, __pyx_v_memid);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 583, __pyx_L1_error)
  }
  __pyx_t_1 = ((struct __pyx_vtabstruct_6lhapdf_AlphaS *)__pyx_v_obj->__pyx_vtab)->set_ptr(__pyx_v_obj, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 583, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "lhapdf.pyx":584
 *     cdef AlphaS obj = AlphaS.__new__(AlphaS)
 *     obj.set_ptr(c.mkAlphaS(setname, memid))
 *     return obj             # <<<<<<<<<<<<<<
 * 
 * cdef mkAlphaS_lhaid(int lhaid):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_obj));
  __pyx_r = ((PyObject *)__pyx_v_obj);
  goto __pyx_L0;

  /* "lhapdf.pyx":580
 *     return obj
 * 
 * cdef mkAlphaS_setmem(string setname, int memid):             # <<<<<<<<<<<<<<
 *     "Factory function to make a AlphaS object from the set name and member number."
 *     cdef AlphaS obj = AlphaS.__new__(AlphaS)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("lhapdf.mkAlphaS_setmem", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_obj);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lhapdf.pyx":586
 *     return obj
 * 
 * cdef mkAlphaS_lhaid(int lhaid):             # <<<<<<<<<<<<<<
 *     "Factory function to make a AlphaS object from the LHAPDF ID number."
 *     cdef AlphaS obj = AlphaS.__new__(AlphaS)
 */

static PyObject *__pyx_f_6lhapdf_mkAlphaS_lhaid(int __pyx_v_lhaid) {
  struct __pyx_obj_6lhapdf_AlphaS *__pyx_v_obj = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  LHAPDF::AlphaS *__pyx_t_2;
  __Pyx_RefNannySetupContext("mkAlphaS_lhaid", 0);

  /* "lhapdf.pyx":588
 * cdef mkAlphaS_lhaid(int lhaid):
 *     "Factory function to make a AlphaS object from the LHAPDF ID number."
 *     cdef AlphaS obj = AlphaS.__new__(AlphaS)             # <<<<<<<<<<<<<<
 *     obj.set_ptr(c.mkAlphaS(lhaid))
 *     return obj
 */
  __pyx_t_1 = __pyx_tp_new_6lhapdf_AlphaS(((PyTypeObject *)__pyx_ptype_6lhapdf_AlphaS), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 588, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_6lhapdf_AlphaS)))) __PYX_ERR(0, 588, __pyx_L1_error)
  __pyx_v_obj = ((struct __pyx_obj_6lhapdf_AlphaS *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "lhapdf.pyx":589
 *     "Factory function to make a AlphaS object from the LHAPDF ID number."
 *     cdef AlphaS obj = AlphaS.__new__(AlphaS)
 *     obj.set_ptr(c.mkAlphaS(lhaid))             # <<<<<<<<<<<<<<
 *     return obj
 * 
 */
  try {
    __pyx_t_2 = LHAPDF::mkAlphaS(__pyx_v_lhaid);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 589, __pyx_L1_error)
  }
  __pyx_t_1 = ((struct __pyx_vtabstruct_6lhapdf_AlphaS *)__pyx_v_obj->__pyx_vtab)->set_ptr(__pyx_v_obj, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 589, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "lhapdf.pyx":590
 *     cdef AlphaS obj = AlphaS.__new__(AlphaS)
 *     obj.set_ptr(c.mkAlphaS(lhaid))
 *     return obj             # <<<<<<<<<<<<<<
 * 
 * cdef mkAlphaS_setmemstr(string setname_nmem):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_obj));
  __pyx_r = ((PyObject *)__pyx_v_obj);
  goto __pyx_L0;

  /* "lhapdf.pyx":586
 *     return obj
 * 
 * cdef mkAlphaS_lhaid(int lhaid):             # <<<<<<<<<<<<<<
 *     "Factory function to make a AlphaS object from the LHAPDF ID number."
 *     cdef AlphaS obj = AlphaS.__new__(AlphaS)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("lhapdf.mkAlphaS_lhaid", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_obj);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lhapdf.pyx":592
 *     return obj
 * 
 * cdef mkAlphaS_setmemstr(string setname_nmem):             # <<<<<<<<<<<<<<
 *     "Factory function to make a AlphaS object from the set name and member number in SETNAME/NMEM string format."
 *     cdef AlphaS obj = AlphaS.__new__(AlphaS)
 */

static PyObject *__pyx_f_6lhapdf_mkAlphaS_setmemstr(std::string __pyx_v_setname_nmem) {
  struct __pyx_obj_6lhapdf_AlphaS *__pyx_v_obj = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  LHAPDF::AlphaS *__pyx_t_2;
  __Pyx_RefNannySetupContext("mkAlphaS_setmemstr", 0);

  /* "lhapdf.pyx":594
 * cdef mkAlphaS_setmemstr(string setname_nmem):
 *     "Factory function to make a AlphaS object from the set name and member number in SETNAME/NMEM string format."
 *     cdef AlphaS obj = AlphaS.__new__(AlphaS)             # <<<<<<<<<<<<<<
 *     obj.set_ptr(c.mkAlphaS(setname_nmem))
 *     return obj
 */
  __pyx_t_1 = __pyx_tp_new_6lhapdf_AlphaS(((PyTypeObject *)__pyx_ptype_6lhapdf_AlphaS), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 594, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_6lhapdf_AlphaS)))) __PYX_ERR(0, 594, __pyx_L1_error)
  __pyx_v_obj = ((struct __pyx_obj_6lhapdf_AlphaS *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "lhapdf.pyx":595
 *     "Factory function to make a AlphaS object from the set name and member number in SETNAME/NMEM string format."
 *     cdef AlphaS obj = AlphaS.__new__(AlphaS)
 *     obj.set_ptr(c.mkAlphaS(setname_nmem))             # <<<<<<<<<<<<<<
 *     return obj
 * 
 */
  try {
    __pyx_t_2 = LHAPDF::mkAlphaS(__pyx_v_setname_nmem);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 595, __pyx_L1_error)
  }
  __pyx_t_1 = ((struct __pyx_vtabstruct_6lhapdf_AlphaS *)__pyx_v_obj->__pyx_vtab)->set_ptr(__pyx_v_obj, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 595, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "lhapdf.pyx":596
 *     cdef AlphaS obj = AlphaS.__new__(AlphaS)
 *     obj.set_ptr(c.mkAlphaS(setname_nmem))
 *     return obj             # <<<<<<<<<<<<<<
 * 
 * cdef mkBareAlphaS_(string as_type):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_obj));
  __pyx_r = ((PyObject *)__pyx_v_obj);
  goto __pyx_L0;

  /* "lhapdf.pyx":592
 *     return obj
 * 
 * cdef mkAlphaS_setmemstr(string setname_nmem):             # <<<<<<<<<<<<<<
 *     "Factory function to make a AlphaS object from the set name and member number in SETNAME/NMEM string format."
 *     cdef AlphaS obj = AlphaS.__new__(AlphaS)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("lhapdf.mkAlphaS_setmemstr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_obj);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lhapdf.pyx":598
 *     return obj
 * 
 * cdef mkBareAlphaS_(string as_type):             # <<<<<<<<<<<<<<
 *     "Factory function to make an AlphaS object without a PDF reference."
 *     cdef AlphaS obj = AlphaS.__new__(AlphaS)
 */

static PyObject *__pyx_f_6lhapdf_mkBareAlphaS_(std::string __pyx_v_as_type) {
  struct __pyx_obj_6lhapdf_AlphaS *__pyx_v_obj = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  LHAPDF::AlphaS *__pyx_t_2;
  __Pyx_RefNannySetupContext("mkBareAlphaS_", 0);

  /* "lhapdf.pyx":600
 * cdef mkBareAlphaS_(string as_type):
 *     "Factory function to make an AlphaS object without a PDF reference."
 *     cdef AlphaS obj = AlphaS.__new__(AlphaS)             # <<<<<<<<<<<<<<
 *     obj.set_ptr(c.mkBareAlphaS(as_type))
 *     return obj
 */
  __pyx_t_1 = __pyx_tp_new_6lhapdf_AlphaS(((PyTypeObject *)__pyx_ptype_6lhapdf_AlphaS), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 600, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_6lhapdf_AlphaS)))) __PYX_ERR(0, 600, __pyx_L1_error)
  __pyx_v_obj = ((struct __pyx_obj_6lhapdf_AlphaS *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "lhapdf.pyx":601
 *     "Factory function to make an AlphaS object without a PDF reference."
 *     cdef AlphaS obj = AlphaS.__new__(AlphaS)
 *     obj.set_ptr(c.mkBareAlphaS(as_type))             # <<<<<<<<<<<<<<
 *     return obj
 * 
 */
  try {
    __pyx_t_2 = LHAPDF::mkBareAlphaS(__pyx_v_as_type);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 601, __pyx_L1_error)
  }
  __pyx_t_1 = ((struct __pyx_vtabstruct_6lhapdf_AlphaS *)__pyx_v_obj->__pyx_vtab)->set_ptr(__pyx_v_obj, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 601, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "lhapdf.pyx":602
 *     cdef AlphaS obj = AlphaS.__new__(AlphaS)
 *     obj.set_ptr(c.mkBareAlphaS(as_type))
 *     return obj             # <<<<<<<<<<<<<<
 * 
 * def mkPDF(*args):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_obj));
  __pyx_r = ((PyObject *)__pyx_v_obj);
  goto __pyx_L0;

  /* "lhapdf.pyx":598
 *     return obj
 * 
 * cdef mkBareAlphaS_(string as_type):             # <<<<<<<<<<<<<<
 *     "Factory function to make an AlphaS object without a PDF reference."
 *     cdef AlphaS obj = AlphaS.__new__(AlphaS)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("lhapdf.mkBareAlphaS_", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_obj);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lhapdf.pyx":604
 *     return obj
 * 
 * def mkPDF(*args):             # <<<<<<<<<<<<<<
 *     """Factory function to make a PDF object from the set name and member number
 *     (2 args), the unique LHAPDF ID number for that member (1 int arg), or the
 */

/* Python wrapper */
static PyObject *__pyx_pw_6lhapdf_9mkPDF(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6lhapdf_8mkPDF[] = "mkPDF(*args)\nFactory function to make a PDF object from the set name and member number\n    (2 args), the unique LHAPDF ID number for that member (1 int arg), or the\n    SETNAME/NMEM string format.";
static PyMethodDef __pyx_mdef_6lhapdf_9mkPDF = {"mkPDF", (PyCFunction)__pyx_pw_6lhapdf_9mkPDF, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6lhapdf_8mkPDF};
static PyObject *__pyx_pw_6lhapdf_9mkPDF(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("mkPDF (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "mkPDF", 0))) return NULL;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_6lhapdf_8mkPDF(__pyx_self, __pyx_v_args);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6lhapdf_8mkPDF(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_args) {
  std::string __pyx_v_arg0_string;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  std::string __pyx_t_9;
  int __pyx_t_10;
  __Pyx_RefNannySetupContext("mkPDF", 0);

  /* "lhapdf.pyx":609
 *     SETNAME/NMEM string format."""
 *     cdef string arg0_string
 *     if len(args) == 1:             # <<<<<<<<<<<<<<
 *         if type(args[0]) == int:
 *             return mkPDF_lhaid(args[0])
 */
  __pyx_t_1 = PyTuple_GET_SIZE(__pyx_v_args); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(0, 609, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_1 == 1) != 0);
  if (__pyx_t_2) {

    /* "lhapdf.pyx":610
 *     cdef string arg0_string
 *     if len(args) == 1:
 *         if type(args[0]) == int:             # <<<<<<<<<<<<<<
 *             return mkPDF_lhaid(args[0])
 *         if type(args[0]) == str:
 */
    __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_args, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 610, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyObject_RichCompare(((PyObject *)Py_TYPE(__pyx_t_3)), ((PyObject *)(&PyInt_Type)), Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 610, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 610, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__pyx_t_2) {

      /* "lhapdf.pyx":611
 *     if len(args) == 1:
 *         if type(args[0]) == int:
 *             return mkPDF_lhaid(args[0])             # <<<<<<<<<<<<<<
 *         if type(args[0]) == str:
 *             arg0_string = text_encode(args[0])
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_4 = __Pyx_GetItemInt_Tuple(__pyx_v_args, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 611, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 611, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __pyx_f_6lhapdf_mkPDF_lhaid(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 611, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_r = __pyx_t_4;
      __pyx_t_4 = 0;
      goto __pyx_L0;

      /* "lhapdf.pyx":610
 *     cdef string arg0_string
 *     if len(args) == 1:
 *         if type(args[0]) == int:             # <<<<<<<<<<<<<<
 *             return mkPDF_lhaid(args[0])
 *         if type(args[0]) == str:
 */
    }

    /* "lhapdf.pyx":612
 *         if type(args[0]) == int:
 *             return mkPDF_lhaid(args[0])
 *         if type(args[0]) == str:             # <<<<<<<<<<<<<<
 *             arg0_string = text_encode(args[0])
 *             return mkPDF_setmemstr(arg0_string)
 */
    __pyx_t_4 = __Pyx_GetItemInt_Tuple(__pyx_v_args, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 612, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyObject_RichCompare(((PyObject *)Py_TYPE(__pyx_t_4)), ((PyObject *)(&PyString_Type)), Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 612, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 612, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_2) {

      /* "lhapdf.pyx":613
 *             return mkPDF_lhaid(args[0])
 *         if type(args[0]) == str:
 *             arg0_string = text_encode(args[0])             # <<<<<<<<<<<<<<
 *             return mkPDF_setmemstr(arg0_string)
 *     elif len(args) == 2 and type(args[0]) == str and type(args[1]) == int:
 */
      __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_text_encode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 613, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_6 = __Pyx_GetItemInt_Tuple(__pyx_v_args, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 613, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      if (!__pyx_t_7) {
        __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 613, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_3);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_4)) {
          PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_6};
          __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 613, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
          PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_6};
          __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 613, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        } else
        #endif
        {
          __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 613, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7); __pyx_t_7 = NULL;
          __Pyx_GIVEREF(__pyx_t_6);
          PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_6);
          __pyx_t_6 = 0;
          __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_8, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 613, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_9 = __pyx_convert_string_from_py_std__in_string(__pyx_t_3); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 613, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_v_arg0_string = __pyx_t_9;

      /* "lhapdf.pyx":614
 *         if type(args[0]) == str:
 *             arg0_string = text_encode(args[0])
 *             return mkPDF_setmemstr(arg0_string)             # <<<<<<<<<<<<<<
 *     elif len(args) == 2 and type(args[0]) == str and type(args[1]) == int:
 *         arg0_string = text_encode(args[0])
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_3 = __pyx_f_6lhapdf_mkPDF_setmemstr(__pyx_v_arg0_string); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 614, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      goto __pyx_L0;

      /* "lhapdf.pyx":612
 *         if type(args[0]) == int:
 *             return mkPDF_lhaid(args[0])
 *         if type(args[0]) == str:             # <<<<<<<<<<<<<<
 *             arg0_string = text_encode(args[0])
 *             return mkPDF_setmemstr(arg0_string)
 */
    }

    /* "lhapdf.pyx":609
 *     SETNAME/NMEM string format."""
 *     cdef string arg0_string
 *     if len(args) == 1:             # <<<<<<<<<<<<<<
 *         if type(args[0]) == int:
 *             return mkPDF_lhaid(args[0])
 */
    goto __pyx_L3;
  }

  /* "lhapdf.pyx":615
 *             arg0_string = text_encode(args[0])
 *             return mkPDF_setmemstr(arg0_string)
 *     elif len(args) == 2 and type(args[0]) == str and type(args[1]) == int:             # <<<<<<<<<<<<<<
 *         arg0_string = text_encode(args[0])
 *         return mkPDF_setmem(arg0_string, args[1])
 */
  __pyx_t_1 = PyTuple_GET_SIZE(__pyx_v_args); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(0, 615, __pyx_L1_error)
  __pyx_t_10 = ((__pyx_t_1 == 2) != 0);
  if (__pyx_t_10) {
  } else {
    __pyx_t_2 = __pyx_t_10;
    goto __pyx_L6_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_args, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 615, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyObject_RichCompare(((PyObject *)Py_TYPE(__pyx_t_3)), ((PyObject *)(&PyString_Type)), Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 615, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 615, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_10) {
  } else {
    __pyx_t_2 = __pyx_t_10;
    goto __pyx_L6_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_GetItemInt_Tuple(__pyx_v_args, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 615, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = PyObject_RichCompare(((PyObject *)Py_TYPE(__pyx_t_4)), ((PyObject *)(&PyInt_Type)), Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 615, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 615, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_2 = __pyx_t_10;
  __pyx_L6_bool_binop_done:;
  if (__pyx_t_2) {

    /* "lhapdf.pyx":616
 *             return mkPDF_setmemstr(arg0_string)
 *     elif len(args) == 2 and type(args[0]) == str and type(args[1]) == int:
 *         arg0_string = text_encode(args[0])             # <<<<<<<<<<<<<<
 *         return mkPDF_setmem(arg0_string, args[1])
 *     else:
 */
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_text_encode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 616, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_8 = __Pyx_GetItemInt_Tuple(__pyx_v_args, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 616, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (!__pyx_t_6) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 616, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_8};
        __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 616, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_8};
        __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 616, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      } else
      #endif
      {
        __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 616, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6); __pyx_t_6 = NULL;
        __Pyx_GIVEREF(__pyx_t_8);
        PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_t_8);
        __pyx_t_8 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 616, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_9 = __pyx_convert_string_from_py_std__in_string(__pyx_t_3); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 616, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_arg0_string = __pyx_t_9;

    /* "lhapdf.pyx":617
 *     elif len(args) == 2 and type(args[0]) == str and type(args[1]) == int:
 *         arg0_string = text_encode(args[0])
 *         return mkPDF_setmem(arg0_string, args[1])             # <<<<<<<<<<<<<<
 *     else:
 *         raise Exception("Unknown call signature")
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_args, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 617, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 617, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __pyx_f_6lhapdf_mkPDF_setmem(__pyx_v_arg0_string, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 617, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "lhapdf.pyx":615
 *             arg0_string = text_encode(args[0])
 *             return mkPDF_setmemstr(arg0_string)
 *     elif len(args) == 2 and type(args[0]) == str and type(args[1]) == int:             # <<<<<<<<<<<<<<
 *         arg0_string = text_encode(args[0])
 *         return mkPDF_setmem(arg0_string, args[1])
 */
  }

  /* "lhapdf.pyx":619
 *         return mkPDF_setmem(arg0_string, args[1])
 *     else:
 *         raise Exception("Unknown call signature")             # <<<<<<<<<<<<<<
 * 
 * def mkAlphaS(*args):
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 619, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 619, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "lhapdf.pyx":604
 *     return obj
 * 
 * def mkPDF(*args):             # <<<<<<<<<<<<<<
 *     """Factory function to make a PDF object from the set name and member number
 *     (2 args), the unique LHAPDF ID number for that member (1 int arg), or the
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("lhapdf.mkPDF", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lhapdf.pyx":621
 *         raise Exception("Unknown call signature")
 * 
 * def mkAlphaS(*args):             # <<<<<<<<<<<<<<
 *     """Factory function to make a AlphaS object from the set name and member number
 *     (2 args), the unique LHAPDF ID number for that member (1 int arg), or the
 */

/* Python wrapper */
static PyObject *__pyx_pw_6lhapdf_11mkAlphaS(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6lhapdf_10mkAlphaS[] = "mkAlphaS(*args)\nFactory function to make a AlphaS object from the set name and member number\n    (2 args), the unique LHAPDF ID number for that member (1 int arg), or the\n    SETNAME/NMEM string format.";
static PyMethodDef __pyx_mdef_6lhapdf_11mkAlphaS = {"mkAlphaS", (PyCFunction)__pyx_pw_6lhapdf_11mkAlphaS, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6lhapdf_10mkAlphaS};
static PyObject *__pyx_pw_6lhapdf_11mkAlphaS(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("mkAlphaS (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "mkAlphaS", 0))) return NULL;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_6lhapdf_10mkAlphaS(__pyx_self, __pyx_v_args);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6lhapdf_10mkAlphaS(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_args) {
  std::string __pyx_v_arg0_string;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  std::string __pyx_t_9;
  int __pyx_t_10;
  __Pyx_RefNannySetupContext("mkAlphaS", 0);

  /* "lhapdf.pyx":626
 *     SETNAME/NMEM string format."""
 *     cdef string arg0_string
 *     if len(args) == 1:             # <<<<<<<<<<<<<<
 *         if type(args[0]) == int:
 *             return mkAlphaS_lhaid(args[0])
 */
  __pyx_t_1 = PyTuple_GET_SIZE(__pyx_v_args); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(0, 626, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_1 == 1) != 0);
  if (__pyx_t_2) {

    /* "lhapdf.pyx":627
 *     cdef string arg0_string
 *     if len(args) == 1:
 *         if type(args[0]) == int:             # <<<<<<<<<<<<<<
 *             return mkAlphaS_lhaid(args[0])
 *         if type(args[0]) == str:
 */
    __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_args, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 627, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyObject_RichCompare(((PyObject *)Py_TYPE(__pyx_t_3)), ((PyObject *)(&PyInt_Type)), Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 627, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 627, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__pyx_t_2) {

      /* "lhapdf.pyx":628
 *     if len(args) == 1:
 *         if type(args[0]) == int:
 *             return mkAlphaS_lhaid(args[0])             # <<<<<<<<<<<<<<
 *         if type(args[0]) == str:
 *             arg0_string = text_encode(args[0])
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_4 = __Pyx_GetItemInt_Tuple(__pyx_v_args, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 628, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 628, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __pyx_f_6lhapdf_mkAlphaS_lhaid(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 628, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_r = __pyx_t_4;
      __pyx_t_4 = 0;
      goto __pyx_L0;

      /* "lhapdf.pyx":627
 *     cdef string arg0_string
 *     if len(args) == 1:
 *         if type(args[0]) == int:             # <<<<<<<<<<<<<<
 *             return mkAlphaS_lhaid(args[0])
 *         if type(args[0]) == str:
 */
    }

    /* "lhapdf.pyx":629
 *         if type(args[0]) == int:
 *             return mkAlphaS_lhaid(args[0])
 *         if type(args[0]) == str:             # <<<<<<<<<<<<<<
 *             arg0_string = text_encode(args[0])
 *             return mkAlphaS_setmemstr(arg0_string)
 */
    __pyx_t_4 = __Pyx_GetItemInt_Tuple(__pyx_v_args, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 629, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyObject_RichCompare(((PyObject *)Py_TYPE(__pyx_t_4)), ((PyObject *)(&PyString_Type)), Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 629, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 629, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_2) {

      /* "lhapdf.pyx":630
 *             return mkAlphaS_lhaid(args[0])
 *         if type(args[0]) == str:
 *             arg0_string = text_encode(args[0])             # <<<<<<<<<<<<<<
 *             return mkAlphaS_setmemstr(arg0_string)
 *     elif len(args) == 2 and type(args[0]) == str and type(args[1]) == int:
 */
      __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_text_encode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 630, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_6 = __Pyx_GetItemInt_Tuple(__pyx_v_args, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 630, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      if (!__pyx_t_7) {
        __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 630, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_3);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_4)) {
          PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_6};
          __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 630, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
          PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_6};
          __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 630, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        } else
        #endif
        {
          __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 630, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7); __pyx_t_7 = NULL;
          __Pyx_GIVEREF(__pyx_t_6);
          PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_6);
          __pyx_t_6 = 0;
          __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_8, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 630, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_9 = __pyx_convert_string_from_py_std__in_string(__pyx_t_3); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 630, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_v_arg0_string = __pyx_t_9;

      /* "lhapdf.pyx":631
 *         if type(args[0]) == str:
 *             arg0_string = text_encode(args[0])
 *             return mkAlphaS_setmemstr(arg0_string)             # <<<<<<<<<<<<<<
 *     elif len(args) == 2 and type(args[0]) == str and type(args[1]) == int:
 *         arg0_string = text_encode(args[0])
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_3 = __pyx_f_6lhapdf_mkAlphaS_setmemstr(__pyx_v_arg0_string); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 631, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      goto __pyx_L0;

      /* "lhapdf.pyx":629
 *         if type(args[0]) == int:
 *             return mkAlphaS_lhaid(args[0])
 *         if type(args[0]) == str:             # <<<<<<<<<<<<<<
 *             arg0_string = text_encode(args[0])
 *             return mkAlphaS_setmemstr(arg0_string)
 */
    }

    /* "lhapdf.pyx":626
 *     SETNAME/NMEM string format."""
 *     cdef string arg0_string
 *     if len(args) == 1:             # <<<<<<<<<<<<<<
 *         if type(args[0]) == int:
 *             return mkAlphaS_lhaid(args[0])
 */
    goto __pyx_L3;
  }

  /* "lhapdf.pyx":632
 *             arg0_string = text_encode(args[0])
 *             return mkAlphaS_setmemstr(arg0_string)
 *     elif len(args) == 2 and type(args[0]) == str and type(args[1]) == int:             # <<<<<<<<<<<<<<
 *         arg0_string = text_encode(args[0])
 *         return mkAlphaS_setmem(arg0_string, args[1])
 */
  __pyx_t_1 = PyTuple_GET_SIZE(__pyx_v_args); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(0, 632, __pyx_L1_error)
  __pyx_t_10 = ((__pyx_t_1 == 2) != 0);
  if (__pyx_t_10) {
  } else {
    __pyx_t_2 = __pyx_t_10;
    goto __pyx_L6_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_args, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 632, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyObject_RichCompare(((PyObject *)Py_TYPE(__pyx_t_3)), ((PyObject *)(&PyString_Type)), Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 632, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 632, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_10) {
  } else {
    __pyx_t_2 = __pyx_t_10;
    goto __pyx_L6_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_GetItemInt_Tuple(__pyx_v_args, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 632, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = PyObject_RichCompare(((PyObject *)Py_TYPE(__pyx_t_4)), ((PyObject *)(&PyInt_Type)), Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 632, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 632, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_2 = __pyx_t_10;
  __pyx_L6_bool_binop_done:;
  if (__pyx_t_2) {

    /* "lhapdf.pyx":633
 *             return mkAlphaS_setmemstr(arg0_string)
 *     elif len(args) == 2 and type(args[0]) == str and type(args[1]) == int:
 *         arg0_string = text_encode(args[0])             # <<<<<<<<<<<<<<
 *         return mkAlphaS_setmem(arg0_string, args[1])
 *     else:
 */
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_text_encode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 633, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_8 = __Pyx_GetItemInt_Tuple(__pyx_v_args, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 633, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (!__pyx_t_6) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 633, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_8};
        __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 633, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_8};
        __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 633, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      } else
      #endif
      {
        __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 633, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6); __pyx_t_6 = NULL;
        __Pyx_GIVEREF(__pyx_t_8);
        PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_t_8);
        __pyx_t_8 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 633, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_9 = __pyx_convert_string_from_py_std__in_string(__pyx_t_3); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 633, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_arg0_string = __pyx_t_9;

    /* "lhapdf.pyx":634
 *     elif len(args) == 2 and type(args[0]) == str and type(args[1]) == int:
 *         arg0_string = text_encode(args[0])
 *         return mkAlphaS_setmem(arg0_string, args[1])             # <<<<<<<<<<<<<<
 *     else:
 *         raise Exception("Unknown call signature")
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_args, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 634, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 634, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __pyx_f_6lhapdf_mkAlphaS_setmem(__pyx_v_arg0_string, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 634, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "lhapdf.pyx":632
 *             arg0_string = text_encode(args[0])
 *             return mkAlphaS_setmemstr(arg0_string)
 *     elif len(args) == 2 and type(args[0]) == str and type(args[1]) == int:             # <<<<<<<<<<<<<<
 *         arg0_string = text_encode(args[0])
 *         return mkAlphaS_setmem(arg0_string, args[1])
 */
  }

  /* "lhapdf.pyx":636
 *         return mkAlphaS_setmem(arg0_string, args[1])
 *     else:
 *         raise Exception("Unknown call signature")             # <<<<<<<<<<<<<<
 * 
 * def mkBareAlphaS(as_type):
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 636, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 636, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "lhapdf.pyx":621
 *         raise Exception("Unknown call signature")
 * 
 * def mkAlphaS(*args):             # <<<<<<<<<<<<<<
 *     """Factory function to make a AlphaS object from the set name and member number
 *     (2 args), the unique LHAPDF ID number for that member (1 int arg), or the
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("lhapdf.mkAlphaS", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lhapdf.pyx":638
 *         raise Exception("Unknown call signature")
 * 
 * def mkBareAlphaS(as_type):             # <<<<<<<<<<<<<<
 *     "Factory function to make a bare AlphaS object."
 *     return mkBareAlphaS_(as_type)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6lhapdf_13mkBareAlphaS(PyObject *__pyx_self, PyObject *__pyx_v_as_type); /*proto*/
static char __pyx_doc_6lhapdf_12mkBareAlphaS[] = "mkBareAlphaS(as_type)\nFactory function to make a bare AlphaS object.";
static PyMethodDef __pyx_mdef_6lhapdf_13mkBareAlphaS = {"mkBareAlphaS", (PyCFunction)__pyx_pw_6lhapdf_13mkBareAlphaS, METH_O, __pyx_doc_6lhapdf_12mkBareAlphaS};
static PyObject *__pyx_pw_6lhapdf_13mkBareAlphaS(PyObject *__pyx_self, PyObject *__pyx_v_as_type) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("mkBareAlphaS (wrapper)", 0);
  __pyx_r = __pyx_pf_6lhapdf_12mkBareAlphaS(__pyx_self, ((PyObject *)__pyx_v_as_type));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6lhapdf_12mkBareAlphaS(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_as_type) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("mkBareAlphaS", 0);

  /* "lhapdf.pyx":640
 * def mkBareAlphaS(as_type):
 *     "Factory function to make a bare AlphaS object."
 *     return mkBareAlphaS_(as_type)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_as_type); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 640, __pyx_L1_error)
  __pyx_t_2 = __pyx_f_6lhapdf_mkBareAlphaS_(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 640, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "lhapdf.pyx":638
 *         raise Exception("Unknown call signature")
 * 
 * def mkBareAlphaS(as_type):             # <<<<<<<<<<<<<<
 *     "Factory function to make a bare AlphaS object."
 *     return mkBareAlphaS_(as_type)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("lhapdf.mkBareAlphaS", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lhapdf.pyx":643
 * 
 * 
 * def weightxQ(int id, double x, double Q, PDF basepdf, PDF newpdf, aschk=5e-2):             # <<<<<<<<<<<<<<
 *     """Reweight from basepdf to newpdf with flavour id and kinematics x and Q2."""
 *     from cython.operator import dereference
 */

/* Python wrapper */
static PyObject *__pyx_pw_6lhapdf_15weightxQ(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6lhapdf_14weightxQ[] = "weightxQ(int id, double x, double Q, PDF basepdf, PDF newpdf, aschk=0.05)\nReweight from basepdf to newpdf with flavour id and kinematics x and Q2.";
static PyMethodDef __pyx_mdef_6lhapdf_15weightxQ = {"weightxQ", (PyCFunction)__pyx_pw_6lhapdf_15weightxQ, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6lhapdf_14weightxQ};
static PyObject *__pyx_pw_6lhapdf_15weightxQ(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_id;
  double __pyx_v_x;
  double __pyx_v_Q;
  struct __pyx_obj_6lhapdf_PDF *__pyx_v_basepdf = 0;
  struct __pyx_obj_6lhapdf_PDF *__pyx_v_newpdf = 0;
  PyObject *__pyx_v_aschk = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("weightxQ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_id,&__pyx_n_s_x,&__pyx_n_s_Q,&__pyx_n_s_basepdf,&__pyx_n_s_newpdf,&__pyx_n_s_aschk,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    values[5] = ((PyObject *)__pyx_float_5eneg_2);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_id)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("weightxQ", 0, 5, 6, 1); __PYX_ERR(0, 643, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_Q)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("weightxQ", 0, 5, 6, 2); __PYX_ERR(0, 643, __pyx_L3_error)
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_basepdf)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("weightxQ", 0, 5, 6, 3); __PYX_ERR(0, 643, __pyx_L3_error)
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_newpdf)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("weightxQ", 0, 5, 6, 4); __PYX_ERR(0, 643, __pyx_L3_error)
        }
        case  5:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_aschk);
          if (value) { values[5] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "weightxQ") < 0)) __PYX_ERR(0, 643, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_id = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_id == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 643, __pyx_L3_error)
    __pyx_v_x = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_x == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 643, __pyx_L3_error)
    __pyx_v_Q = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_Q == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 643, __pyx_L3_error)
    __pyx_v_basepdf = ((struct __pyx_obj_6lhapdf_PDF *)values[3]);
    __pyx_v_newpdf = ((struct __pyx_obj_6lhapdf_PDF *)values[4]);
    __pyx_v_aschk = values[5];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("weightxQ", 0, 5, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 643, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("lhapdf.weightxQ", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_basepdf), __pyx_ptype_6lhapdf_PDF, 1, "basepdf", 0))) __PYX_ERR(0, 643, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_newpdf), __pyx_ptype_6lhapdf_PDF, 1, "newpdf", 0))) __PYX_ERR(0, 643, __pyx_L1_error)
  __pyx_r = __pyx_pf_6lhapdf_14weightxQ(__pyx_self, __pyx_v_id, __pyx_v_x, __pyx_v_Q, __pyx_v_basepdf, __pyx_v_newpdf, __pyx_v_aschk);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6lhapdf_14weightxQ(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_id, double __pyx_v_x, double __pyx_v_Q, struct __pyx_obj_6lhapdf_PDF *__pyx_v_basepdf, struct __pyx_obj_6lhapdf_PDF *__pyx_v_newpdf, PyObject *__pyx_v_aschk) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("weightxQ", 0);

  /* "lhapdf.pyx":646
 *     """Reweight from basepdf to newpdf with flavour id and kinematics x and Q2."""
 *     from cython.operator import dereference
 *     return c.weightxQ(id, x, Q, dereference(basepdf._ptr), dereference(newpdf._ptr), aschk)             # <<<<<<<<<<<<<<
 * 
 * def weightxQ2(int id, double x, double Q2, PDF basepdf, PDF newpdf, aschk=5e-2):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_aschk); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 646, __pyx_L1_error)
  __pyx_t_2 = PyFloat_FromDouble(LHAPDF::weightxQ(__pyx_v_id, __pyx_v_x, __pyx_v_Q, (*__pyx_v_basepdf->_ptr), (*__pyx_v_newpdf->_ptr), __pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 646, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "lhapdf.pyx":643
 * 
 * 
 * def weightxQ(int id, double x, double Q, PDF basepdf, PDF newpdf, aschk=5e-2):             # <<<<<<<<<<<<<<
 *     """Reweight from basepdf to newpdf with flavour id and kinematics x and Q2."""
 *     from cython.operator import dereference
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("lhapdf.weightxQ", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lhapdf.pyx":648
 *     return c.weightxQ(id, x, Q, dereference(basepdf._ptr), dereference(newpdf._ptr), aschk)
 * 
 * def weightxQ2(int id, double x, double Q2, PDF basepdf, PDF newpdf, aschk=5e-2):             # <<<<<<<<<<<<<<
 *     """Reweight from basepdf to newpdf with flavour id and kinematics x and Q2."""
 *     from cython.operator import dereference
 */

/* Python wrapper */
static PyObject *__pyx_pw_6lhapdf_17weightxQ2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6lhapdf_16weightxQ2[] = "weightxQ2(int id, double x, double Q2, PDF basepdf, PDF newpdf, aschk=0.05)\nReweight from basepdf to newpdf with flavour id and kinematics x and Q2.";
static PyMethodDef __pyx_mdef_6lhapdf_17weightxQ2 = {"weightxQ2", (PyCFunction)__pyx_pw_6lhapdf_17weightxQ2, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6lhapdf_16weightxQ2};
static PyObject *__pyx_pw_6lhapdf_17weightxQ2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_id;
  double __pyx_v_x;
  double __pyx_v_Q2;
  struct __pyx_obj_6lhapdf_PDF *__pyx_v_basepdf = 0;
  struct __pyx_obj_6lhapdf_PDF *__pyx_v_newpdf = 0;
  PyObject *__pyx_v_aschk = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("weightxQ2 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_id,&__pyx_n_s_x,&__pyx_n_s_Q2,&__pyx_n_s_basepdf,&__pyx_n_s_newpdf,&__pyx_n_s_aschk,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    values[5] = ((PyObject *)__pyx_float_5eneg_2);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_id)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("weightxQ2", 0, 5, 6, 1); __PYX_ERR(0, 648, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_Q2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("weightxQ2", 0, 5, 6, 2); __PYX_ERR(0, 648, __pyx_L3_error)
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_basepdf)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("weightxQ2", 0, 5, 6, 3); __PYX_ERR(0, 648, __pyx_L3_error)
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_newpdf)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("weightxQ2", 0, 5, 6, 4); __PYX_ERR(0, 648, __pyx_L3_error)
        }
        case  5:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_aschk);
          if (value) { values[5] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "weightxQ2") < 0)) __PYX_ERR(0, 648, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_id = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_id == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 648, __pyx_L3_error)
    __pyx_v_x = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_x == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 648, __pyx_L3_error)
    __pyx_v_Q2 = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_Q2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 648, __pyx_L3_error)
    __pyx_v_basepdf = ((struct __pyx_obj_6lhapdf_PDF *)values[3]);
    __pyx_v_newpdf = ((struct __pyx_obj_6lhapdf_PDF *)values[4]);
    __pyx_v_aschk = values[5];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("weightxQ2", 0, 5, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 648, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("lhapdf.weightxQ2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_basepdf), __pyx_ptype_6lhapdf_PDF, 1, "basepdf", 0))) __PYX_ERR(0, 648, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_newpdf), __pyx_ptype_6lhapdf_PDF, 1, "newpdf", 0))) __PYX_ERR(0, 648, __pyx_L1_error)
  __pyx_r = __pyx_pf_6lhapdf_16weightxQ2(__pyx_self, __pyx_v_id, __pyx_v_x, __pyx_v_Q2, __pyx_v_basepdf, __pyx_v_newpdf, __pyx_v_aschk);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6lhapdf_16weightxQ2(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_id, double __pyx_v_x, double __pyx_v_Q2, struct __pyx_obj_6lhapdf_PDF *__pyx_v_basepdf, struct __pyx_obj_6lhapdf_PDF *__pyx_v_newpdf, PyObject *__pyx_v_aschk) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("weightxQ2", 0);

  /* "lhapdf.pyx":651
 *     """Reweight from basepdf to newpdf with flavour id and kinematics x and Q2."""
 *     from cython.operator import dereference
 *     return c.weightxQ2(id, x, Q2, dereference(basepdf._ptr), dereference(newpdf._ptr), aschk)             # <<<<<<<<<<<<<<
 * 
 * def weightxxQ(int id1, int id2, double x1, double x2, double Q, PDF basepdf, PDF newpdf, aschk=5e-2):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_aschk); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 651, __pyx_L1_error)
  __pyx_t_2 = PyFloat_FromDouble(LHAPDF::weightxQ2(__pyx_v_id, __pyx_v_x, __pyx_v_Q2, (*__pyx_v_basepdf->_ptr), (*__pyx_v_newpdf->_ptr), __pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 651, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "lhapdf.pyx":648
 *     return c.weightxQ(id, x, Q, dereference(basepdf._ptr), dereference(newpdf._ptr), aschk)
 * 
 * def weightxQ2(int id, double x, double Q2, PDF basepdf, PDF newpdf, aschk=5e-2):             # <<<<<<<<<<<<<<
 *     """Reweight from basepdf to newpdf with flavour id and kinematics x and Q2."""
 *     from cython.operator import dereference
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("lhapdf.weightxQ2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lhapdf.pyx":653
 *     return c.weightxQ2(id, x, Q2, dereference(basepdf._ptr), dereference(newpdf._ptr), aschk)
 * 
 * def weightxxQ(int id1, int id2, double x1, double x2, double Q, PDF basepdf, PDF newpdf, aschk=5e-2):             # <<<<<<<<<<<<<<
 *     """Reweight from basepdf to newpdf with flavour id and kinematics x and Q2."""
 *     from cython.operator import dereference
 */

/* Python wrapper */
static PyObject *__pyx_pw_6lhapdf_19weightxxQ(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6lhapdf_18weightxxQ[] = "weightxxQ(int id1, int id2, double x1, double x2, double Q, PDF basepdf, PDF newpdf, aschk=0.05)\nReweight from basepdf to newpdf with flavour id and kinematics x and Q2.";
static PyMethodDef __pyx_mdef_6lhapdf_19weightxxQ = {"weightxxQ", (PyCFunction)__pyx_pw_6lhapdf_19weightxxQ, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6lhapdf_18weightxxQ};
static PyObject *__pyx_pw_6lhapdf_19weightxxQ(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_id1;
  int __pyx_v_id2;
  double __pyx_v_x1;
  double __pyx_v_x2;
  double __pyx_v_Q;
  struct __pyx_obj_6lhapdf_PDF *__pyx_v_basepdf = 0;
  struct __pyx_obj_6lhapdf_PDF *__pyx_v_newpdf = 0;
  PyObject *__pyx_v_aschk = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("weightxxQ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_id1,&__pyx_n_s_id2,&__pyx_n_s_x1,&__pyx_n_s_x2,&__pyx_n_s_Q,&__pyx_n_s_basepdf,&__pyx_n_s_newpdf,&__pyx_n_s_aschk,0};
    PyObject* values[8] = {0,0,0,0,0,0,0,0};
    values[7] = ((PyObject *)__pyx_float_5eneg_2);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_id1)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_id2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("weightxxQ", 0, 7, 8, 1); __PYX_ERR(0, 653, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_x1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("weightxxQ", 0, 7, 8, 2); __PYX_ERR(0, 653, __pyx_L3_error)
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_x2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("weightxxQ", 0, 7, 8, 3); __PYX_ERR(0, 653, __pyx_L3_error)
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_Q)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("weightxxQ", 0, 7, 8, 4); __PYX_ERR(0, 653, __pyx_L3_error)
        }
        case  5:
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_basepdf)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("weightxxQ", 0, 7, 8, 5); __PYX_ERR(0, 653, __pyx_L3_error)
        }
        case  6:
        if (likely((values[6] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_newpdf)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("weightxxQ", 0, 7, 8, 6); __PYX_ERR(0, 653, __pyx_L3_error)
        }
        case  7:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_aschk);
          if (value) { values[7] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "weightxxQ") < 0)) __PYX_ERR(0, 653, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_id1 = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_id1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 653, __pyx_L3_error)
    __pyx_v_id2 = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_id2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 653, __pyx_L3_error)
    __pyx_v_x1 = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_x1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 653, __pyx_L3_error)
    __pyx_v_x2 = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_x2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 653, __pyx_L3_error)
    __pyx_v_Q = __pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_Q == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 653, __pyx_L3_error)
    __pyx_v_basepdf = ((struct __pyx_obj_6lhapdf_PDF *)values[5]);
    __pyx_v_newpdf = ((struct __pyx_obj_6lhapdf_PDF *)values[6]);
    __pyx_v_aschk = values[7];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("weightxxQ", 0, 7, 8, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 653, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("lhapdf.weightxxQ", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_basepdf), __pyx_ptype_6lhapdf_PDF, 1, "basepdf", 0))) __PYX_ERR(0, 653, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_newpdf), __pyx_ptype_6lhapdf_PDF, 1, "newpdf", 0))) __PYX_ERR(0, 653, __pyx_L1_error)
  __pyx_r = __pyx_pf_6lhapdf_18weightxxQ(__pyx_self, __pyx_v_id1, __pyx_v_id2, __pyx_v_x1, __pyx_v_x2, __pyx_v_Q, __pyx_v_basepdf, __pyx_v_newpdf, __pyx_v_aschk);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6lhapdf_18weightxxQ(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_id1, int __pyx_v_id2, double __pyx_v_x1, double __pyx_v_x2, double __pyx_v_Q, struct __pyx_obj_6lhapdf_PDF *__pyx_v_basepdf, struct __pyx_obj_6lhapdf_PDF *__pyx_v_newpdf, PyObject *__pyx_v_aschk) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("weightxxQ", 0);

  /* "lhapdf.pyx":656
 *     """Reweight from basepdf to newpdf with flavour id and kinematics x and Q2."""
 *     from cython.operator import dereference
 *     return c.weightxxQ(id1, id2, x1, x2, Q, dereference(basepdf._ptr), dereference(newpdf._ptr), aschk)             # <<<<<<<<<<<<<<
 * 
 * def weightxxQ2(int id1, int id2, double x1, double x2, double Q2, PDF basepdf, PDF newpdf, aschk=5e-2):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_aschk); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 656, __pyx_L1_error)
  __pyx_t_2 = PyFloat_FromDouble(LHAPDF::weightxxQ(__pyx_v_id1, __pyx_v_id2, __pyx_v_x1, __pyx_v_x2, __pyx_v_Q, (*__pyx_v_basepdf->_ptr), (*__pyx_v_newpdf->_ptr), __pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 656, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "lhapdf.pyx":653
 *     return c.weightxQ2(id, x, Q2, dereference(basepdf._ptr), dereference(newpdf._ptr), aschk)
 * 
 * def weightxxQ(int id1, int id2, double x1, double x2, double Q, PDF basepdf, PDF newpdf, aschk=5e-2):             # <<<<<<<<<<<<<<
 *     """Reweight from basepdf to newpdf with flavour id and kinematics x and Q2."""
 *     from cython.operator import dereference
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("lhapdf.weightxxQ", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lhapdf.pyx":658
 *     return c.weightxxQ(id1, id2, x1, x2, Q, dereference(basepdf._ptr), dereference(newpdf._ptr), aschk)
 * 
 * def weightxxQ2(int id1, int id2, double x1, double x2, double Q2, PDF basepdf, PDF newpdf, aschk=5e-2):             # <<<<<<<<<<<<<<
 *     """Reweight from basepdf to newpdf with flavour id and kinematics x and Q2."""
 *     from cython.operator import dereference
 */

/* Python wrapper */
static PyObject *__pyx_pw_6lhapdf_21weightxxQ2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6lhapdf_20weightxxQ2[] = "weightxxQ2(int id1, int id2, double x1, double x2, double Q2, PDF basepdf, PDF newpdf, aschk=0.05)\nReweight from basepdf to newpdf with flavour id and kinematics x and Q2.";
static PyMethodDef __pyx_mdef_6lhapdf_21weightxxQ2 = {"weightxxQ2", (PyCFunction)__pyx_pw_6lhapdf_21weightxxQ2, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6lhapdf_20weightxxQ2};
static PyObject *__pyx_pw_6lhapdf_21weightxxQ2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_id1;
  int __pyx_v_id2;
  double __pyx_v_x1;
  double __pyx_v_x2;
  double __pyx_v_Q2;
  struct __pyx_obj_6lhapdf_PDF *__pyx_v_basepdf = 0;
  struct __pyx_obj_6lhapdf_PDF *__pyx_v_newpdf = 0;
  PyObject *__pyx_v_aschk = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("weightxxQ2 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_id1,&__pyx_n_s_id2,&__pyx_n_s_x1,&__pyx_n_s_x2,&__pyx_n_s_Q2,&__pyx_n_s_basepdf,&__pyx_n_s_newpdf,&__pyx_n_s_aschk,0};
    PyObject* values[8] = {0,0,0,0,0,0,0,0};
    values[7] = ((PyObject *)__pyx_float_5eneg_2);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_id1)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_id2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("weightxxQ2", 0, 7, 8, 1); __PYX_ERR(0, 658, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_x1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("weightxxQ2", 0, 7, 8, 2); __PYX_ERR(0, 658, __pyx_L3_error)
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_x2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("weightxxQ2", 0, 7, 8, 3); __PYX_ERR(0, 658, __pyx_L3_error)
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_Q2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("weightxxQ2", 0, 7, 8, 4); __PYX_ERR(0, 658, __pyx_L3_error)
        }
        case  5:
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_basepdf)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("weightxxQ2", 0, 7, 8, 5); __PYX_ERR(0, 658, __pyx_L3_error)
        }
        case  6:
        if (likely((values[6] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_newpdf)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("weightxxQ2", 0, 7, 8, 6); __PYX_ERR(0, 658, __pyx_L3_error)
        }
        case  7:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_aschk);
          if (value) { values[7] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "weightxxQ2") < 0)) __PYX_ERR(0, 658, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_id1 = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_id1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 658, __pyx_L3_error)
    __pyx_v_id2 = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_id2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 658, __pyx_L3_error)
    __pyx_v_x1 = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_x1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 658, __pyx_L3_error)
    __pyx_v_x2 = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_x2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 658, __pyx_L3_error)
    __pyx_v_Q2 = __pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_Q2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 658, __pyx_L3_error)
    __pyx_v_basepdf = ((struct __pyx_obj_6lhapdf_PDF *)values[5]);
    __pyx_v_newpdf = ((struct __pyx_obj_6lhapdf_PDF *)values[6]);
    __pyx_v_aschk = values[7];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("weightxxQ2", 0, 7, 8, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 658, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("lhapdf.weightxxQ2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_basepdf), __pyx_ptype_6lhapdf_PDF, 1, "basepdf", 0))) __PYX_ERR(0, 658, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_newpdf), __pyx_ptype_6lhapdf_PDF, 1, "newpdf", 0))) __PYX_ERR(0, 658, __pyx_L1_error)
  __pyx_r = __pyx_pf_6lhapdf_20weightxxQ2(__pyx_self, __pyx_v_id1, __pyx_v_id2, __pyx_v_x1, __pyx_v_x2, __pyx_v_Q2, __pyx_v_basepdf, __pyx_v_newpdf, __pyx_v_aschk);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6lhapdf_20weightxxQ2(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_id1, int __pyx_v_id2, double __pyx_v_x1, double __pyx_v_x2, double __pyx_v_Q2, struct __pyx_obj_6lhapdf_PDF *__pyx_v_basepdf, struct __pyx_obj_6lhapdf_PDF *__pyx_v_newpdf, PyObject *__pyx_v_aschk) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("weightxxQ2", 0);

  /* "lhapdf.pyx":661
 *     """Reweight from basepdf to newpdf with flavour id and kinematics x and Q2."""
 *     from cython.operator import dereference
 *     return c.weightxxQ2(id1, id2, x1, x2, Q2, dereference(basepdf._ptr), dereference(newpdf._ptr), aschk)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_aschk); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 661, __pyx_L1_error)
  __pyx_t_2 = PyFloat_FromDouble(LHAPDF::weightxxQ2(__pyx_v_id1, __pyx_v_id2, __pyx_v_x1, __pyx_v_x2, __pyx_v_Q2, (*__pyx_v_basepdf->_ptr), (*__pyx_v_newpdf->_ptr), __pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 661, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "lhapdf.pyx":658
 *     return c.weightxxQ(id1, id2, x1, x2, Q, dereference(basepdf._ptr), dereference(newpdf._ptr), aschk)
 * 
 * def weightxxQ2(int id1, int id2, double x1, double x2, double Q2, PDF basepdf, PDF newpdf, aschk=5e-2):             # <<<<<<<<<<<<<<
 *     """Reweight from basepdf to newpdf with flavour id and kinematics x and Q2."""
 *     from cython.operator import dereference
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("lhapdf.weightxxQ2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lhapdf.pyx":665
 * 
 * 
 * def version():             # <<<<<<<<<<<<<<
 *     "Return the LHAPDF library version."
 *     return c.version()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6lhapdf_23version(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6lhapdf_22version[] = "version()\nReturn the LHAPDF library version.";
static PyMethodDef __pyx_mdef_6lhapdf_23version = {"version", (PyCFunction)__pyx_pw_6lhapdf_23version, METH_NOARGS, __pyx_doc_6lhapdf_22version};
static PyObject *__pyx_pw_6lhapdf_23version(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("version (wrapper)", 0);
  __pyx_r = __pyx_pf_6lhapdf_22version(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6lhapdf_22version(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("version", 0);

  /* "lhapdf.pyx":667
 * def version():
 *     "Return the LHAPDF library version."
 *     return c.version()             # <<<<<<<<<<<<<<
 * 
 * __version__ = version()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_PyStr_string_to_py_std__in_string(LHAPDF::version()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 667, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "lhapdf.pyx":665
 * 
 * 
 * def version():             # <<<<<<<<<<<<<<
 *     "Return the LHAPDF library version."
 *     return c.version()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("lhapdf.version", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lhapdf.pyx":672
 * 
 * 
 * def verbosity():             # <<<<<<<<<<<<<<
 *     "Get the main verbosity level of the LHAPDF system: 0 = quiet, 2 = loud"
 *     return c.verbosity()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6lhapdf_25verbosity(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6lhapdf_24verbosity[] = "verbosity()\nGet the main verbosity level of the LHAPDF system: 0 = quiet, 2 = loud";
static PyMethodDef __pyx_mdef_6lhapdf_25verbosity = {"verbosity", (PyCFunction)__pyx_pw_6lhapdf_25verbosity, METH_NOARGS, __pyx_doc_6lhapdf_24verbosity};
static PyObject *__pyx_pw_6lhapdf_25verbosity(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("verbosity (wrapper)", 0);
  __pyx_r = __pyx_pf_6lhapdf_24verbosity(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6lhapdf_24verbosity(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("verbosity", 0);

  /* "lhapdf.pyx":674
 * def verbosity():
 *     "Get the main verbosity level of the LHAPDF system: 0 = quiet, 2 = loud"
 *     return c.verbosity()             # <<<<<<<<<<<<<<
 * 
 * def setVerbosity(vlevel):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(LHAPDF::verbosity()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 674, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "lhapdf.pyx":672
 * 
 * 
 * def verbosity():             # <<<<<<<<<<<<<<
 *     "Get the main verbosity level of the LHAPDF system: 0 = quiet, 2 = loud"
 *     return c.verbosity()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("lhapdf.verbosity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lhapdf.pyx":676
 *     return c.verbosity()
 * 
 * def setVerbosity(vlevel):             # <<<<<<<<<<<<<<
 *     "Set the main verbosity level of the LHAPDF system: 0 = quiet, 2 = loud"
 *     c.setVerbosity(vlevel)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6lhapdf_27setVerbosity(PyObject *__pyx_self, PyObject *__pyx_v_vlevel); /*proto*/
static char __pyx_doc_6lhapdf_26setVerbosity[] = "setVerbosity(vlevel)\nSet the main verbosity level of the LHAPDF system: 0 = quiet, 2 = loud";
static PyMethodDef __pyx_mdef_6lhapdf_27setVerbosity = {"setVerbosity", (PyCFunction)__pyx_pw_6lhapdf_27setVerbosity, METH_O, __pyx_doc_6lhapdf_26setVerbosity};
static PyObject *__pyx_pw_6lhapdf_27setVerbosity(PyObject *__pyx_self, PyObject *__pyx_v_vlevel) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setVerbosity (wrapper)", 0);
  __pyx_r = __pyx_pf_6lhapdf_26setVerbosity(__pyx_self, ((PyObject *)__pyx_v_vlevel));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6lhapdf_26setVerbosity(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_vlevel) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("setVerbosity", 0);

  /* "lhapdf.pyx":678
 * def setVerbosity(vlevel):
 *     "Set the main verbosity level of the LHAPDF system: 0 = quiet, 2 = loud"
 *     c.setVerbosity(vlevel)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_vlevel); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 678, __pyx_L1_error)
  LHAPDF::setVerbosity(__pyx_t_1);

  /* "lhapdf.pyx":676
 *     return c.verbosity()
 * 
 * def setVerbosity(vlevel):             # <<<<<<<<<<<<<<
 *     "Set the main verbosity level of the LHAPDF system: 0 = quiet, 2 = loud"
 *     c.setVerbosity(vlevel)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("lhapdf.setVerbosity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lhapdf.pyx":681
 * 
 * 
 * def availablePDFSets():             # <<<<<<<<<<<<<<
 *     "Get the names of all the available PDF sets on this system."
 *     return c.availablePDFSets()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6lhapdf_29availablePDFSets(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6lhapdf_28availablePDFSets[] = "availablePDFSets()\nGet the names of all the available PDF sets on this system.";
static PyMethodDef __pyx_mdef_6lhapdf_29availablePDFSets = {"availablePDFSets", (PyCFunction)__pyx_pw_6lhapdf_29availablePDFSets, METH_NOARGS, __pyx_doc_6lhapdf_28availablePDFSets};
static PyObject *__pyx_pw_6lhapdf_29availablePDFSets(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("availablePDFSets (wrapper)", 0);
  __pyx_r = __pyx_pf_6lhapdf_28availablePDFSets(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6lhapdf_28availablePDFSets(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("availablePDFSets", 0);

  /* "lhapdf.pyx":683
 * def availablePDFSets():
 *     "Get the names of all the available PDF sets on this system."
 *     return c.availablePDFSets()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_vector_to_py_std_3a__3a_string(LHAPDF::availablePDFSets()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 683, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "lhapdf.pyx":681
 * 
 * 
 * def availablePDFSets():             # <<<<<<<<<<<<<<
 *     "Get the names of all the available PDF sets on this system."
 *     return c.availablePDFSets()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("lhapdf.availablePDFSets", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lhapdf.pyx":686
 * 
 * 
 * def paths():             # <<<<<<<<<<<<<<
 *     "Return the list of current PDF data search paths."
 *     return c.paths()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6lhapdf_31paths(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6lhapdf_30paths[] = "paths()\nReturn the list of current PDF data search paths.";
static PyMethodDef __pyx_mdef_6lhapdf_31paths = {"paths", (PyCFunction)__pyx_pw_6lhapdf_31paths, METH_NOARGS, __pyx_doc_6lhapdf_30paths};
static PyObject *__pyx_pw_6lhapdf_31paths(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("paths (wrapper)", 0);
  __pyx_r = __pyx_pf_6lhapdf_30paths(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6lhapdf_30paths(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("paths", 0);

  /* "lhapdf.pyx":688
 * def paths():
 *     "Return the list of current PDF data search paths."
 *     return c.paths()             # <<<<<<<<<<<<<<
 * 
 * def setPaths(newpaths):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_vector_to_py_std_3a__3a_string(LHAPDF::paths()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 688, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "lhapdf.pyx":686
 * 
 * 
 * def paths():             # <<<<<<<<<<<<<<
 *     "Return the list of current PDF data search paths."
 *     return c.paths()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("lhapdf.paths", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lhapdf.pyx":690
 *     return c.paths()
 * 
 * def setPaths(newpaths):             # <<<<<<<<<<<<<<
 *     "Set the list of current PDF data search paths."
 *     c.setPaths([text_encode(path) for path in newpaths])
 */

/* Python wrapper */
static PyObject *__pyx_pw_6lhapdf_33setPaths(PyObject *__pyx_self, PyObject *__pyx_v_newpaths); /*proto*/
static char __pyx_doc_6lhapdf_32setPaths[] = "setPaths(newpaths)\nSet the list of current PDF data search paths.";
static PyMethodDef __pyx_mdef_6lhapdf_33setPaths = {"setPaths", (PyCFunction)__pyx_pw_6lhapdf_33setPaths, METH_O, __pyx_doc_6lhapdf_32setPaths};
static PyObject *__pyx_pw_6lhapdf_33setPaths(PyObject *__pyx_self, PyObject *__pyx_v_newpaths) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setPaths (wrapper)", 0);
  __pyx_r = __pyx_pf_6lhapdf_32setPaths(__pyx_self, ((PyObject *)__pyx_v_newpaths));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6lhapdf_32setPaths(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_newpaths) {
  PyObject *__pyx_v_path = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  std::vector<std::string>  __pyx_t_9;
  __Pyx_RefNannySetupContext("setPaths", 0);

  /* "lhapdf.pyx":692
 * def setPaths(newpaths):
 *     "Set the list of current PDF data search paths."
 *     c.setPaths([text_encode(path) for path in newpaths])             # <<<<<<<<<<<<<<
 * 
 * def pathsPrepend(newpath):
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 692, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_v_newpaths)) || PyTuple_CheckExact(__pyx_v_newpaths)) {
    __pyx_t_2 = __pyx_v_newpaths; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_newpaths); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 692, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 692, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 692, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 692, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 692, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 692, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      }
    } else {
      __pyx_t_5 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_5)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 692, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_5);
    }
    __Pyx_XDECREF_SET(__pyx_v_path, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_text_encode); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 692, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    if (!__pyx_t_7) {
      __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_path); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 692, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_6)) {
        PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_v_path};
        __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 692, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_5);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
        PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_v_path};
        __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 692, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_5);
      } else
      #endif
      {
        __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 692, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7); __pyx_t_7 = NULL;
        __Pyx_INCREF(__pyx_v_path);
        __Pyx_GIVEREF(__pyx_v_path);
        PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_v_path);
        __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_8, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 692, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(0, 692, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_9 = __pyx_convert_vector_from_py_std_3a__3a_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 692, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  LHAPDF::setPaths(__pyx_t_9);

  /* "lhapdf.pyx":690
 *     return c.paths()
 * 
 * def setPaths(newpaths):             # <<<<<<<<<<<<<<
 *     "Set the list of current PDF data search paths."
 *     c.setPaths([text_encode(path) for path in newpaths])
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("lhapdf.setPaths", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_path);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lhapdf.pyx":694
 *     c.setPaths([text_encode(path) for path in newpaths])
 * 
 * def pathsPrepend(newpath):             # <<<<<<<<<<<<<<
 *     "Prepend to the list of current PDF data search paths."
 *     c.pathsPrepend(text_encode(newpath))
 */

/* Python wrapper */
static PyObject *__pyx_pw_6lhapdf_35pathsPrepend(PyObject *__pyx_self, PyObject *__pyx_v_newpath); /*proto*/
static char __pyx_doc_6lhapdf_34pathsPrepend[] = "pathsPrepend(newpath)\nPrepend to the list of current PDF data search paths.";
static PyMethodDef __pyx_mdef_6lhapdf_35pathsPrepend = {"pathsPrepend", (PyCFunction)__pyx_pw_6lhapdf_35pathsPrepend, METH_O, __pyx_doc_6lhapdf_34pathsPrepend};
static PyObject *__pyx_pw_6lhapdf_35pathsPrepend(PyObject *__pyx_self, PyObject *__pyx_v_newpath) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pathsPrepend (wrapper)", 0);
  __pyx_r = __pyx_pf_6lhapdf_34pathsPrepend(__pyx_self, ((PyObject *)__pyx_v_newpath));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6lhapdf_34pathsPrepend(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_newpath) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  std::string __pyx_t_5;
  __Pyx_RefNannySetupContext("pathsPrepend", 0);

  /* "lhapdf.pyx":696
 * def pathsPrepend(newpath):
 *     "Prepend to the list of current PDF data search paths."
 *     c.pathsPrepend(text_encode(newpath))             # <<<<<<<<<<<<<<
 * 
 * def pathsAppend(newpath):
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_text_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 696, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_newpath); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 696, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_newpath};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 696, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_newpath};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 696, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 696, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __pyx_t_3 = NULL;
      __Pyx_INCREF(__pyx_v_newpath);
      __Pyx_GIVEREF(__pyx_v_newpath);
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_newpath);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 696, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 696, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  LHAPDF::pathsPrepend(__pyx_t_5);

  /* "lhapdf.pyx":694
 *     c.setPaths([text_encode(path) for path in newpaths])
 * 
 * def pathsPrepend(newpath):             # <<<<<<<<<<<<<<
 *     "Prepend to the list of current PDF data search paths."
 *     c.pathsPrepend(text_encode(newpath))
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("lhapdf.pathsPrepend", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lhapdf.pyx":698
 *     c.pathsPrepend(text_encode(newpath))
 * 
 * def pathsAppend(newpath):             # <<<<<<<<<<<<<<
 *     "Append to the list of current PDF data search paths."
 *     c.pathsAppend(text_encode(newpath))
 */

/* Python wrapper */
static PyObject *__pyx_pw_6lhapdf_37pathsAppend(PyObject *__pyx_self, PyObject *__pyx_v_newpath); /*proto*/
static char __pyx_doc_6lhapdf_36pathsAppend[] = "pathsAppend(newpath)\nAppend to the list of current PDF data search paths.";
static PyMethodDef __pyx_mdef_6lhapdf_37pathsAppend = {"pathsAppend", (PyCFunction)__pyx_pw_6lhapdf_37pathsAppend, METH_O, __pyx_doc_6lhapdf_36pathsAppend};
static PyObject *__pyx_pw_6lhapdf_37pathsAppend(PyObject *__pyx_self, PyObject *__pyx_v_newpath) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pathsAppend (wrapper)", 0);
  __pyx_r = __pyx_pf_6lhapdf_36pathsAppend(__pyx_self, ((PyObject *)__pyx_v_newpath));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6lhapdf_36pathsAppend(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_newpath) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  std::string __pyx_t_5;
  __Pyx_RefNannySetupContext("pathsAppend", 0);

  /* "lhapdf.pyx":700
 * def pathsAppend(newpath):
 *     "Append to the list of current PDF data search paths."
 *     c.pathsAppend(text_encode(newpath))             # <<<<<<<<<<<<<<
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_text_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 700, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_newpath); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 700, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_newpath};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 700, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_newpath};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 700, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 700, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __pyx_t_3 = NULL;
      __Pyx_INCREF(__pyx_v_newpath);
      __Pyx_GIVEREF(__pyx_v_newpath);
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_newpath);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 700, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 700, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  LHAPDF::pathsAppend(__pyx_t_5);

  /* "lhapdf.pyx":698
 *     c.pathsPrepend(text_encode(newpath))
 * 
 * def pathsAppend(newpath):             # <<<<<<<<<<<<<<
 *     "Append to the list of current PDF data search paths."
 *     c.pathsAppend(text_encode(newpath))
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("lhapdf.pathsAppend", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyObject_string_to_py_std__in_string", 0);

  /* "string.to_py":32
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyUnicode_FromStringAndSize(char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyObject_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyUnicode_string_to_py_std__in_string", 0);

  /* "string.to_py":38
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyStr_FromStringAndSize(char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyUnicode_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyUnicode_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyStr_string_to_py_std__in_string", 0);

  /* "string.to_py":44
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyBytes_FromStringAndSize(char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyStr_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyStr_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyBytes_string_to_py_std__in_string", 0);

  /* "string.to_py":50
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyByteArray_FromStringAndSize(char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyBytes_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyByteArray_string_to_py_std__in_string", 0);

  /* "string.to_py":56
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyByteArray_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyByteArray_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

static std::string __pyx_convert_string_from_py_std__in_string(PyObject *__pyx_v_o) {
  Py_ssize_t __pyx_v_length;
  char *__pyx_v_data;
  std::string __pyx_r;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  __Pyx_RefNannySetupContext("__pyx_convert_string_from_py_std__in_string", 0);

  /* "string.from_py":15
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)             # <<<<<<<<<<<<<<
 *     return string(data, length)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_AsStringAndSize(__pyx_v_o, (&__pyx_v_length)); if (unlikely(__pyx_t_1 == NULL)) __PYX_ERR(1, 15, __pyx_L1_error)
  __pyx_v_data = __pyx_t_1;

  /* "string.from_py":16
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 *     return string(data, length)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = std::string(__pyx_v_data, __pyx_v_length);
  goto __pyx_L0;

  /* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("string.from_py.__pyx_convert_string_from_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.from_py":49
 * 
 * @cname("__pyx_convert_vector_from_py_double")
 * cdef vector[X] __pyx_convert_vector_from_py_double(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

static std::vector<double>  __pyx_convert_vector_from_py_double(PyObject *__pyx_v_o) {
  std::vector<double>  __pyx_v_v;
  PyObject *__pyx_v_item = NULL;
  std::vector<double>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py_double", 0);

  /* "vector.from_py":51
 * cdef vector[X] __pyx_convert_vector_from_py_double(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(X_from_py(item))
 *     return v
 */
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 51, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 51, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 51, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 51, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 51, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 51, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 51, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "vector.from_py":52
 *     cdef vector[X] v
 *     for item in o:
 *         v.push_back(X_from_py(item))             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
    __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_v_item); if (unlikely(__pyx_t_5 == -1.0 && PyErr_Occurred())) __PYX_ERR(1, 52, __pyx_L1_error)
    __pyx_v_v.push_back(__pyx_t_5);

    /* "vector.from_py":51
 * cdef vector[X] __pyx_convert_vector_from_py_double(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(X_from_py(item))
 *     return v
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":53
 *     for item in o:
 *         v.push_back(X_from_py(item))
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "vector.from_py":49
 * 
 * @cname("__pyx_convert_vector_from_py_double")
 * cdef vector[X] __pyx_convert_vector_from_py_double(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py_double", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.from_py":50
 * 
 * @cname("__pyx_convert_vector_from_py_std_3a__3a_string")
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

static std::vector<std::string>  __pyx_convert_vector_from_py_std_3a__3a_string(PyObject *__pyx_v_o) {
  std::vector<std::string>  __pyx_v_v;
  PyObject *__pyx_v_item = NULL;
  std::vector<std::string>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  std::string __pyx_t_5;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py_std_3a__3a_string", 0);

  /* "vector.from_py":52
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_string(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(X_from_py(item))
 *     return v
 */
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 52, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 52, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 52, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 52, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 52, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 52, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 52, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "vector.from_py":53
 *     cdef vector[X] v
 *     for item in o:
 *         v.push_back(X_from_py(item))             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
    __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_v_item); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 53, __pyx_L1_error)
    __pyx_v_v.push_back(__pyx_t_5);

    /* "vector.from_py":52
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_string(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(X_from_py(item))
 *     return v
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":54
 *     for item in o:
 *         v.push_back(X_from_py(item))
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "vector.from_py":50
 * 
 * @cname("__pyx_convert_vector_from_py_std_3a__3a_string")
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py_std_3a__3a_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.to_py":67
 * 
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_string")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_string(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [X_to_py(v[i]) for i in range(v.size())]
 * 
 */

static PyObject *__pyx_convert_vector_to_py_std_3a__3a_string(const std::vector<std::string>  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_std_3a__3a_string", 0);

  /* "vector.to_py":68
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_string")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_string(vector[X]& v):
 *     return [X_to_py(v[i]) for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 68, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;
    __pyx_t_4 = __pyx_convert_PyObject_string_to_py_std__in_string((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 68, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_4))) __PYX_ERR(1, 68, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":67
 * 
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_string")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_string(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [X_to_py(v[i]) for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_std_3a__3a_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_6lhapdf_PDF __pyx_vtable_6lhapdf_PDF;

static PyObject *__pyx_tp_new_6lhapdf_PDF(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_6lhapdf_PDF *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6lhapdf_PDF *)o);
  p->__pyx_vtab = __pyx_vtabptr_6lhapdf_PDF;
  return o;
}

static void __pyx_tp_dealloc_6lhapdf_PDF(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_6lhapdf_3PDF_1__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_6lhapdf_3PDF_memberID(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6lhapdf_3PDF_8memberID_1__get__(o);
}

static PyObject *__pyx_getprop_6lhapdf_3PDF_lhapdfID(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6lhapdf_3PDF_8lhapdfID_1__get__(o);
}

static PyObject *__pyx_getprop_6lhapdf_3PDF_type(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6lhapdf_3PDF_4type_1__get__(o);
}

static PyObject *__pyx_getprop_6lhapdf_3PDF_description(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6lhapdf_3PDF_11description_1__get__(o);
}

static PyObject *__pyx_getprop_6lhapdf_3PDF_orderQCD(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6lhapdf_3PDF_8orderQCD_1__get__(o);
}

static PyObject *__pyx_getprop_6lhapdf_3PDF_xMin(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6lhapdf_3PDF_4xMin_1__get__(o);
}

static PyObject *__pyx_getprop_6lhapdf_3PDF_xMax(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6lhapdf_3PDF_4xMax_1__get__(o);
}

static PyObject *__pyx_getprop_6lhapdf_3PDF_q2Min(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6lhapdf_3PDF_5q2Min_1__get__(o);
}

static PyObject *__pyx_getprop_6lhapdf_3PDF_q2Max(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6lhapdf_3PDF_5q2Max_1__get__(o);
}

static PyMethodDef __pyx_methods_6lhapdf_PDF[] = {
  {"alphasQ", (PyCFunction)__pyx_pw_6lhapdf_3PDF_3alphasQ, METH_O, __pyx_doc_6lhapdf_3PDF_2alphasQ},
  {"alphasQ2", (PyCFunction)__pyx_pw_6lhapdf_3PDF_5alphasQ2, METH_O, __pyx_doc_6lhapdf_3PDF_4alphasQ2},
  {"xfxQ", (PyCFunction)__pyx_pw_6lhapdf_3PDF_7xfxQ, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6lhapdf_3PDF_6xfxQ},
  {"xfxQ2", (PyCFunction)__pyx_pw_6lhapdf_3PDF_9xfxQ2, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6lhapdf_3PDF_8xfxQ2},
  {"inRangeQ", (PyCFunction)__pyx_pw_6lhapdf_3PDF_11inRangeQ, METH_O, __pyx_doc_6lhapdf_3PDF_10inRangeQ},
  {"inRangeQ2", (PyCFunction)__pyx_pw_6lhapdf_3PDF_13inRangeQ2, METH_O, __pyx_doc_6lhapdf_3PDF_12inRangeQ2},
  {"inRangeX", (PyCFunction)__pyx_pw_6lhapdf_3PDF_15inRangeX, METH_O, __pyx_doc_6lhapdf_3PDF_14inRangeX},
  {"inRangeXQ", (PyCFunction)__pyx_pw_6lhapdf_3PDF_17inRangeXQ, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6lhapdf_3PDF_16inRangeXQ},
  {"inRangeXQ2", (PyCFunction)__pyx_pw_6lhapdf_3PDF_19inRangeXQ2, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6lhapdf_3PDF_18inRangeXQ2},
  {"flavors", (PyCFunction)__pyx_pw_6lhapdf_3PDF_21flavors, METH_NOARGS, __pyx_doc_6lhapdf_3PDF_20flavors},
  {"hasFlavor", (PyCFunction)__pyx_pw_6lhapdf_3PDF_23hasFlavor, METH_O, __pyx_doc_6lhapdf_3PDF_22hasFlavor},
  {"quarkMass", (PyCFunction)__pyx_pw_6lhapdf_3PDF_25quarkMass, METH_O, __pyx_doc_6lhapdf_3PDF_24quarkMass},
  {"quarkThreshold", (PyCFunction)__pyx_pw_6lhapdf_3PDF_27quarkThreshold, METH_O, __pyx_doc_6lhapdf_3PDF_26quarkThreshold},
  {"set", (PyCFunction)__pyx_pw_6lhapdf_3PDF_29set, METH_NOARGS, __pyx_doc_6lhapdf_3PDF_28set},
  {"info", (PyCFunction)__pyx_pw_6lhapdf_3PDF_31info, METH_NOARGS, __pyx_doc_6lhapdf_3PDF_30info},
  {"_print", (PyCFunction)__pyx_pw_6lhapdf_3PDF_33_print, METH_NOARGS, __pyx_doc_6lhapdf_3PDF_32_print},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6lhapdf_PDF[] = {
  {(char *)"memberID", __pyx_getprop_6lhapdf_3PDF_memberID, 0, (char *)"The PDF set member number of this PDF.", 0},
  {(char *)"lhapdfID", __pyx_getprop_6lhapdf_3PDF_lhapdfID, 0, (char *)"The LHAPDF ID number of this PDF member.", 0},
  {(char *)"type", __pyx_getprop_6lhapdf_3PDF_type, 0, (char *)"The type of PDF member, e.g. central, error.", 0},
  {(char *)"description", __pyx_getprop_6lhapdf_3PDF_description, 0, (char *)"Description of this PDF member.", 0},
  {(char *)"orderQCD", __pyx_getprop_6lhapdf_3PDF_orderQCD, 0, (char *)"Max number of loops involved in this PDF's evolution.", 0},
  {(char *)"xMin", __pyx_getprop_6lhapdf_3PDF_xMin, 0, (char *)"Minimum valid value of x to be used with this PDF", 0},
  {(char *)"xMax", __pyx_getprop_6lhapdf_3PDF_xMax, 0, (char *)"Maximum valid value of x to be used with this PDF", 0},
  {(char *)"q2Min", __pyx_getprop_6lhapdf_3PDF_q2Min, 0, (char *)"Minimum valid value of x to be used with this PDF", 0},
  {(char *)"q2Max", __pyx_getprop_6lhapdf_3PDF_q2Max, 0, (char *)"Maximum valid value of x to be used with this PDF", 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6lhapdf_PDF = {
  PyVarObject_HEAD_INIT(0, 0)
  "lhapdf.PDF", /*tp_name*/
  sizeof(struct __pyx_obj_6lhapdf_PDF), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6lhapdf_PDF, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "    A parton density function for in general several parton flavours,\n    i.e. one member of a PDF set.\n    ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6lhapdf_PDF, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6lhapdf_PDF, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6lhapdf_PDF, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_6lhapdf_Info __pyx_vtable_6lhapdf_Info;

static PyObject *__pyx_tp_new_6lhapdf_Info(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_6lhapdf_Info *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6lhapdf_Info *)o);
  p->__pyx_vtab = __pyx_vtabptr_6lhapdf_Info;
  return o;
}

static void __pyx_tp_dealloc_6lhapdf_Info(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_6lhapdf_Info[] = {
  {"has_key", (PyCFunction)__pyx_pw_6lhapdf_4Info_1has_key, METH_O, __pyx_doc_6lhapdf_4Info_has_key},
  {"has_key_local", (PyCFunction)__pyx_pw_6lhapdf_4Info_3has_key_local, METH_O, __pyx_doc_6lhapdf_4Info_2has_key_local},
  {"get_entry", (PyCFunction)__pyx_pw_6lhapdf_4Info_5get_entry, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6lhapdf_4Info_4get_entry},
  {"set_entry", (PyCFunction)__pyx_pw_6lhapdf_4Info_7set_entry, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6lhapdf_4Info_6set_entry},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6lhapdf_Info = {
  PyVarObject_HEAD_INIT(0, 0)
  "lhapdf.Info", /*tp_name*/
  sizeof(struct __pyx_obj_6lhapdf_Info), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6lhapdf_Info, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "    Class that handles the parsing of PDF set metadata in the .info file.\n    ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6lhapdf_Info, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6lhapdf_Info, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_6lhapdf_PDFSet __pyx_vtable_6lhapdf_PDFSet;

static PyObject *__pyx_tp_new_6lhapdf_PDFSet(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_6lhapdf_PDFSet *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6lhapdf_PDFSet *)o);
  p->__pyx_vtab = __pyx_vtabptr_6lhapdf_PDFSet;
  return o;
}

static void __pyx_tp_dealloc_6lhapdf_PDFSet(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_6lhapdf_6PDFSet_1__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_6lhapdf_6PDFSet_size(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6lhapdf_6PDFSet_4size_1__get__(o);
}

static PyObject *__pyx_getprop_6lhapdf_6PDFSet_name(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6lhapdf_6PDFSet_4name_1__get__(o);
}

static PyObject *__pyx_getprop_6lhapdf_6PDFSet_description(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6lhapdf_6PDFSet_11description_1__get__(o);
}

static PyObject *__pyx_getprop_6lhapdf_6PDFSet_lhapdfID(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6lhapdf_6PDFSet_8lhapdfID_1__get__(o);
}

static PyObject *__pyx_getprop_6lhapdf_6PDFSet_dataversion(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6lhapdf_6PDFSet_11dataversion_1__get__(o);
}

static PyObject *__pyx_getprop_6lhapdf_6PDFSet_errorType(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6lhapdf_6PDFSet_9errorType_1__get__(o);
}

static PyObject *__pyx_getprop_6lhapdf_6PDFSet_errorConfLevel(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6lhapdf_6PDFSet_14errorConfLevel_1__get__(o);
}

static PyMethodDef __pyx_methods_6lhapdf_PDFSet[] = {
  {"mkPDF", (PyCFunction)__pyx_pw_6lhapdf_6PDFSet_5mkPDF, METH_O, __pyx_doc_6lhapdf_6PDFSet_4mkPDF},
  {"mkPDFs", (PyCFunction)__pyx_pw_6lhapdf_6PDFSet_7mkPDFs, METH_NOARGS, __pyx_doc_6lhapdf_6PDFSet_6mkPDFs},
  {"has_key", (PyCFunction)__pyx_pw_6lhapdf_6PDFSet_9has_key, METH_O, __pyx_doc_6lhapdf_6PDFSet_8has_key},
  {"has_key_local", (PyCFunction)__pyx_pw_6lhapdf_6PDFSet_11has_key_local, METH_O, __pyx_doc_6lhapdf_6PDFSet_10has_key_local},
  {"get_entry", (PyCFunction)__pyx_pw_6lhapdf_6PDFSet_13get_entry, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6lhapdf_6PDFSet_12get_entry},
  {"_print", (PyCFunction)__pyx_pw_6lhapdf_6PDFSet_15_print, METH_NOARGS, __pyx_doc_6lhapdf_6PDFSet_14_print},
  {"uncertainty", (PyCFunction)__pyx_pw_6lhapdf_6PDFSet_17uncertainty, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6lhapdf_6PDFSet_16uncertainty},
  {"correlation", (PyCFunction)__pyx_pw_6lhapdf_6PDFSet_19correlation, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6lhapdf_6PDFSet_18correlation},
  {"randomValueFromHessian", (PyCFunction)__pyx_pw_6lhapdf_6PDFSet_21randomValueFromHessian, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6lhapdf_6PDFSet_20randomValueFromHessian},
  {"_checkPdfType", (PyCFunction)__pyx_pw_6lhapdf_6PDFSet_23_checkPdfType, METH_O, __pyx_doc_6lhapdf_6PDFSet_22_checkPdfType},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6lhapdf_PDFSet[] = {
  {(char *)"size", __pyx_getprop_6lhapdf_6PDFSet_size, 0, (char *)"The total number of members in this set.", 0},
  {(char *)"name", __pyx_getprop_6lhapdf_6PDFSet_name, 0, (char *)"Name of this PDF's containing set.", 0},
  {(char *)"description", __pyx_getprop_6lhapdf_6PDFSet_description, 0, (char *)"Description of this PDF's set.", 0},
  {(char *)"lhapdfID", __pyx_getprop_6lhapdf_6PDFSet_lhapdfID, 0, (char *)"First LHAPDF global index in this PDF set.", 0},
  {(char *)"dataversion", __pyx_getprop_6lhapdf_6PDFSet_dataversion, 0, (char *)"Version of this PDF set's data files.", 0},
  {(char *)"errorType", __pyx_getprop_6lhapdf_6PDFSet_errorType, 0, (char *)"Type of error treatment in this PDF set.", 0},
  {(char *)"errorConfLevel", __pyx_getprop_6lhapdf_6PDFSet_errorConfLevel, 0, (char *)"Confidence level of error treatment in percent, if one is defined for this set.", 0},
  {0, 0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_PDFSet = {
  __pyx_pw_6lhapdf_6PDFSet_3__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_PDFSet = {
  __pyx_pw_6lhapdf_6PDFSet_3__len__, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_6lhapdf_PDFSet = {
  PyVarObject_HEAD_INIT(0, 0)
  "lhapdf.PDFSet", /*tp_name*/
  sizeof(struct __pyx_obj_6lhapdf_PDFSet), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6lhapdf_PDFSet, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_PDFSet, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_PDFSet, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "    A collection of PDFs with related fits, most typically a central PDF and a\n    set of extra ones representing different aspects of systematic errors in the\n    fit.\n    ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6lhapdf_PDFSet, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6lhapdf_PDFSet, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6lhapdf_PDFSet, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_6lhapdf_PDFInfo __pyx_vtable_6lhapdf_PDFInfo;

static PyObject *__pyx_tp_new_6lhapdf_PDFInfo(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_6lhapdf_PDFInfo *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6lhapdf_PDFInfo *)o);
  p->__pyx_vtab = __pyx_vtabptr_6lhapdf_PDFInfo;
  return o;
}

static void __pyx_tp_dealloc_6lhapdf_PDFInfo(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_6lhapdf_PDFInfo[] = {
  {"has_key", (PyCFunction)__pyx_pw_6lhapdf_7PDFInfo_1has_key, METH_O, __pyx_doc_6lhapdf_7PDFInfo_has_key},
  {"has_key_local", (PyCFunction)__pyx_pw_6lhapdf_7PDFInfo_3has_key_local, METH_O, __pyx_doc_6lhapdf_7PDFInfo_2has_key_local},
  {"get_entry", (PyCFunction)__pyx_pw_6lhapdf_7PDFInfo_5get_entry, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6lhapdf_7PDFInfo_4get_entry},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6lhapdf_PDFInfo = {
  PyVarObject_HEAD_INIT(0, 0)
  "lhapdf.PDFInfo", /*tp_name*/
  sizeof(struct __pyx_obj_6lhapdf_PDFInfo), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6lhapdf_PDFInfo, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "    A class handling the metadata that defines a given PDF.\n    ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6lhapdf_PDFInfo, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6lhapdf_PDFInfo, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_6lhapdf_AlphaS __pyx_vtable_6lhapdf_AlphaS;

static PyObject *__pyx_tp_new_6lhapdf_AlphaS(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_6lhapdf_AlphaS *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6lhapdf_AlphaS *)o);
  p->__pyx_vtab = __pyx_vtabptr_6lhapdf_AlphaS;
  return o;
}

static void __pyx_tp_dealloc_6lhapdf_AlphaS(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_6lhapdf_6AlphaS_1__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_6lhapdf_6AlphaS_type(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6lhapdf_6AlphaS_4type_1__get__(o);
}

static PyMethodDef __pyx_methods_6lhapdf_AlphaS[] = {
  {"alphasQ", (PyCFunction)__pyx_pw_6lhapdf_6AlphaS_3alphasQ, METH_O, __pyx_doc_6lhapdf_6AlphaS_2alphasQ},
  {"alphasQ2", (PyCFunction)__pyx_pw_6lhapdf_6AlphaS_5alphasQ2, METH_O, __pyx_doc_6lhapdf_6AlphaS_4alphasQ2},
  {"numFlavorsQ", (PyCFunction)__pyx_pw_6lhapdf_6AlphaS_7numFlavorsQ, METH_O, __pyx_doc_6lhapdf_6AlphaS_6numFlavorsQ},
  {"numFlavorsQ2", (PyCFunction)__pyx_pw_6lhapdf_6AlphaS_9numFlavorsQ2, METH_O, __pyx_doc_6lhapdf_6AlphaS_8numFlavorsQ2},
  {"quarkMass", (PyCFunction)__pyx_pw_6lhapdf_6AlphaS_11quarkMass, METH_O, __pyx_doc_6lhapdf_6AlphaS_10quarkMass},
  {"setQuarkMass", (PyCFunction)__pyx_pw_6lhapdf_6AlphaS_13setQuarkMass, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6lhapdf_6AlphaS_12setQuarkMass},
  {"quarkThreshold", (PyCFunction)__pyx_pw_6lhapdf_6AlphaS_15quarkThreshold, METH_O, __pyx_doc_6lhapdf_6AlphaS_14quarkThreshold},
  {"setQuarkThreshold", (PyCFunction)__pyx_pw_6lhapdf_6AlphaS_17setQuarkThreshold, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6lhapdf_6AlphaS_16setQuarkThreshold},
  {"orderQCD", (PyCFunction)__pyx_pw_6lhapdf_6AlphaS_19orderQCD, METH_NOARGS, __pyx_doc_6lhapdf_6AlphaS_18orderQCD},
  {"setOrderQCD", (PyCFunction)__pyx_pw_6lhapdf_6AlphaS_21setOrderQCD, METH_O, __pyx_doc_6lhapdf_6AlphaS_20setOrderQCD},
  {"setMZ", (PyCFunction)__pyx_pw_6lhapdf_6AlphaS_23setMZ, METH_O, __pyx_doc_6lhapdf_6AlphaS_22setMZ},
  {"setAlphaSMZ", (PyCFunction)__pyx_pw_6lhapdf_6AlphaS_25setAlphaSMZ, METH_O, __pyx_doc_6lhapdf_6AlphaS_24setAlphaSMZ},
  {"setLambda", (PyCFunction)__pyx_pw_6lhapdf_6AlphaS_27setLambda, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6lhapdf_6AlphaS_26setLambda},
  {"setFlavorScheme", (PyCFunction)__pyx_pw_6lhapdf_6AlphaS_29setFlavorScheme, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6lhapdf_6AlphaS_28setFlavorScheme},
  {"flavorScheme", (PyCFunction)__pyx_pw_6lhapdf_6AlphaS_31flavorScheme, METH_NOARGS, __pyx_doc_6lhapdf_6AlphaS_30flavorScheme},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6lhapdf_AlphaS[] = {
  {(char *)"type", __pyx_getprop_6lhapdf_6AlphaS_type, 0, (char *)"Get the method of alpha_s calculation as a string", 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6lhapdf_AlphaS = {
  PyVarObject_HEAD_INIT(0, 0)
  "lhapdf.AlphaS", /*tp_name*/
  sizeof(struct __pyx_obj_6lhapdf_AlphaS), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6lhapdf_AlphaS, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "     Interface to alpha_s calculations using various schemes.\n     ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6lhapdf_AlphaS, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6lhapdf_AlphaS, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6lhapdf_AlphaS, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
  #if PY_VERSION_HEX < 0x03020000
    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },
  #else
    PyModuleDef_HEAD_INIT,
  #endif
    "lhapdf",
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_s_A_simple_struct_containing_comp, __pyx_k_A_simple_struct_containing_comp, sizeof(__pyx_k_A_simple_struct_containing_comp), 0, 0, 1, 0},
  {&__pyx_n_s_FIXED, __pyx_k_FIXED, sizeof(__pyx_k_FIXED), 0, 0, 1, 1},
  {&__pyx_n_s_ImportError, __pyx_k_ImportError, sizeof(__pyx_k_ImportError), 0, 0, 1, 1},
  {&__pyx_n_s_PDFUncertainty, __pyx_k_PDFUncertainty, sizeof(__pyx_k_PDFUncertainty), 0, 0, 1, 1},
  {&__pyx_n_s_PDFUncertainty___init, __pyx_k_PDFUncertainty___init, sizeof(__pyx_k_PDFUncertainty___init), 0, 0, 1, 1},
  {&__pyx_n_s_Q, __pyx_k_Q, sizeof(__pyx_k_Q), 0, 0, 1, 1},
  {&__pyx_n_s_Q2, __pyx_k_Q2, sizeof(__pyx_k_Q2), 0, 0, 1, 1},
  {&__pyx_kp_s_Requires_text_input, __pyx_k_Requires_text_input, sizeof(__pyx_k_Requires_text_input), 0, 0, 1, 0},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_kp_s_Unknown_call_signature, __pyx_k_Unknown_call_signature, sizeof(__pyx_k_Unknown_call_signature), 0, 0, 1, 0},
  {&__pyx_n_s_VARIABLE, __pyx_k_VARIABLE, sizeof(__pyx_k_VARIABLE), 0, 0, 1, 1},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_kp_s_Wrong_number_of_arguments_given, __pyx_k_Wrong_number_of_arguments_given, sizeof(__pyx_k_Wrong_number_of_arguments_given), 0, 0, 1, 0},
  {&__pyx_kp_s_Wrong_number_of_arguments_given_2, __pyx_k_Wrong_number_of_arguments_given_2, sizeof(__pyx_k_Wrong_number_of_arguments_given_2), 0, 0, 1, 0},
  {&__pyx_kp_s_You_can_only_set_the_flavor_sche, __pyx_k_You_can_only_set_the_flavor_sche, sizeof(__pyx_k_You_can_only_set_the_flavor_sche), 0, 0, 1, 0},
  {&__pyx_n_s_alternative, __pyx_k_alternative, sizeof(__pyx_k_alternative), 0, 0, 1, 1},
  {&__pyx_n_s_arg0_string, __pyx_k_arg0_string, sizeof(__pyx_k_arg0_string), 0, 0, 1, 1},
  {&__pyx_n_s_args, __pyx_k_args, sizeof(__pyx_k_args), 0, 0, 1, 1},
  {&__pyx_n_s_as_type, __pyx_k_as_type, sizeof(__pyx_k_as_type), 0, 0, 1, 1},
  {&__pyx_n_s_aschk, __pyx_k_aschk, sizeof(__pyx_k_aschk), 0, 0, 1, 1},
  {&__pyx_n_s_availablePDFSets, __pyx_k_availablePDFSets, sizeof(__pyx_k_availablePDFSets), 0, 0, 1, 1},
  {&__pyx_n_s_basepdf, __pyx_k_basepdf, sizeof(__pyx_k_basepdf), 0, 0, 1, 1},
  {&__pyx_n_s_central, __pyx_k_central, sizeof(__pyx_k_central), 0, 0, 1, 1},
  {&__pyx_n_s_cl, __pyx_k_cl, sizeof(__pyx_k_cl), 0, 0, 1, 1},
  {&__pyx_n_s_doc, __pyx_k_doc, sizeof(__pyx_k_doc), 0, 0, 1, 1},
  {&__pyx_n_s_encode, __pyx_k_encode, sizeof(__pyx_k_encode), 0, 0, 1, 1},
  {&__pyx_n_s_end, __pyx_k_end, sizeof(__pyx_k_end), 0, 0, 1, 1},
  {&__pyx_n_s_err_par, __pyx_k_err_par, sizeof(__pyx_k_err_par), 0, 0, 1, 1},
  {&__pyx_n_s_errminus, __pyx_k_errminus, sizeof(__pyx_k_errminus), 0, 0, 1, 1},
  {&__pyx_n_s_errminus_pdf, __pyx_k_errminus_pdf, sizeof(__pyx_k_errminus_pdf), 0, 0, 1, 1},
  {&__pyx_n_s_errplus, __pyx_k_errplus, sizeof(__pyx_k_errplus), 0, 0, 1, 1},
  {&__pyx_n_s_errplus_pdf, __pyx_k_errplus_pdf, sizeof(__pyx_k_errplus_pdf), 0, 0, 1, 1},
  {&__pyx_n_s_errsymm, __pyx_k_errsymm, sizeof(__pyx_k_errsymm), 0, 0, 1, 1},
  {&__pyx_n_s_errsymm_pdf, __pyx_k_errsymm_pdf, sizeof(__pyx_k_errsymm_pdf), 0, 0, 1, 1},
  {&__pyx_n_s_fallback, __pyx_k_fallback, sizeof(__pyx_k_fallback), 0, 0, 1, 1},
  {&__pyx_n_s_file, __pyx_k_file, sizeof(__pyx_k_file), 0, 0, 1, 1},
  {&__pyx_n_s_flavors, __pyx_k_flavors, sizeof(__pyx_k_flavors), 0, 0, 1, 1},
  {&__pyx_n_s_getConfig, __pyx_k_getConfig, sizeof(__pyx_k_getConfig), 0, 0, 1, 1},
  {&__pyx_n_s_getPDFSet, __pyx_k_getPDFSet, sizeof(__pyx_k_getPDFSet), 0, 0, 1, 1},
  {&__pyx_kp_s_home_andy_proj_hep_lhapdf6_wrap, __pyx_k_home_andy_proj_hep_lhapdf6_wrap, sizeof(__pyx_k_home_andy_proj_hep_lhapdf6_wrap), 0, 0, 1, 0},
  {&__pyx_n_s_id, __pyx_k_id, sizeof(__pyx_k_id), 0, 0, 1, 1},
  {&__pyx_n_s_id1, __pyx_k_id1, sizeof(__pyx_k_id1), 0, 0, 1, 1},
  {&__pyx_n_s_id2, __pyx_k_id2, sizeof(__pyx_k_id2), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_init, __pyx_k_init, sizeof(__pyx_k_init), 0, 0, 1, 1},
  {&__pyx_n_s_itertools, __pyx_k_itertools, sizeof(__pyx_k_itertools), 0, 0, 1, 1},
  {&__pyx_n_s_izip, __pyx_k_izip, sizeof(__pyx_k_izip), 0, 0, 1, 1},
  {&__pyx_n_s_key, __pyx_k_key, sizeof(__pyx_k_key), 0, 0, 1, 1},
  {&__pyx_n_s_lhapdf, __pyx_k_lhapdf, sizeof(__pyx_k_lhapdf), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_metaclass, __pyx_k_metaclass, sizeof(__pyx_k_metaclass), 0, 0, 1, 1},
  {&__pyx_n_s_mkAlphaS, __pyx_k_mkAlphaS, sizeof(__pyx_k_mkAlphaS), 0, 0, 1, 1},
  {&__pyx_n_s_mkBareAlphaS, __pyx_k_mkBareAlphaS, sizeof(__pyx_k_mkBareAlphaS), 0, 0, 1, 1},
  {&__pyx_n_s_mkPDF, __pyx_k_mkPDF, sizeof(__pyx_k_mkPDF), 0, 0, 1, 1},
  {&__pyx_n_s_mkPDFs, __pyx_k_mkPDFs, sizeof(__pyx_k_mkPDFs), 0, 0, 1, 1},
  {&__pyx_n_s_module, __pyx_k_module, sizeof(__pyx_k_module), 0, 0, 1, 1},
  {&__pyx_n_s_newpath, __pyx_k_newpath, sizeof(__pyx_k_newpath), 0, 0, 1, 1},
  {&__pyx_n_s_newpaths, __pyx_k_newpaths, sizeof(__pyx_k_newpaths), 0, 0, 1, 1},
  {&__pyx_n_s_newpdf, __pyx_k_newpdf, sizeof(__pyx_k_newpdf), 0, 0, 1, 1},
  {&__pyx_n_s_nf, __pyx_k_nf, sizeof(__pyx_k_nf), 0, 0, 1, 1},
  {&__pyx_n_s_obj, __pyx_k_obj, sizeof(__pyx_k_obj), 0, 0, 1, 1},
  {&__pyx_n_s_objs, __pyx_k_objs, sizeof(__pyx_k_objs), 0, 0, 1, 1},
  {&__pyx_n_s_path, __pyx_k_path, sizeof(__pyx_k_path), 0, 0, 1, 1},
  {&__pyx_n_s_paths, __pyx_k_paths, sizeof(__pyx_k_paths), 0, 0, 1, 1},
  {&__pyx_n_s_pathsAppend, __pyx_k_pathsAppend, sizeof(__pyx_k_pathsAppend), 0, 0, 1, 1},
  {&__pyx_n_s_pathsPrepend, __pyx_k_pathsPrepend, sizeof(__pyx_k_pathsPrepend), 0, 0, 1, 1},
  {&__pyx_n_s_prepare, __pyx_k_prepare, sizeof(__pyx_k_prepare), 0, 0, 1, 1},
  {&__pyx_n_s_print, __pyx_k_print, sizeof(__pyx_k_print), 0, 0, 1, 1},
  {&__pyx_n_s_ptr, __pyx_k_ptr, sizeof(__pyx_k_ptr), 0, 0, 1, 1},
  {&__pyx_n_s_ptrs, __pyx_k_ptrs, sizeof(__pyx_k_ptrs), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_q, __pyx_k_q, sizeof(__pyx_k_q), 0, 0, 1, 1},
  {&__pyx_n_s_q2, __pyx_k_q2, sizeof(__pyx_k_q2), 0, 0, 1, 1},
  {&__pyx_n_s_qualname, __pyx_k_qualname, sizeof(__pyx_k_qualname), 0, 0, 1, 1},
  {&__pyx_n_s_randoms, __pyx_k_randoms, sizeof(__pyx_k_randoms), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_scale, __pyx_k_scale, sizeof(__pyx_k_scale), 0, 0, 1, 1},
  {&__pyx_n_s_scheme, __pyx_k_scheme, sizeof(__pyx_k_scheme), 0, 0, 1, 1},
  {&__pyx_n_s_self, __pyx_k_self, sizeof(__pyx_k_self), 0, 0, 1, 1},
  {&__pyx_n_s_setPaths, __pyx_k_setPaths, sizeof(__pyx_k_setPaths), 0, 0, 1, 1},
  {&__pyx_n_s_setVerbosity, __pyx_k_setVerbosity, sizeof(__pyx_k_setVerbosity), 0, 0, 1, 1},
  {&__pyx_n_s_setname, __pyx_k_setname, sizeof(__pyx_k_setname), 0, 0, 1, 1},
  {&__pyx_n_s_symmetrise, __pyx_k_symmetrise, sizeof(__pyx_k_symmetrise), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_text, __pyx_k_text, sizeof(__pyx_k_text), 0, 0, 1, 1},
  {&__pyx_n_s_text_encode, __pyx_k_text_encode, sizeof(__pyx_k_text_encode), 0, 0, 1, 1},
  {&__pyx_n_s_utf8, __pyx_k_utf8, sizeof(__pyx_k_utf8), 0, 0, 1, 1},
  {&__pyx_n_s_val, __pyx_k_val, sizeof(__pyx_k_val), 0, 0, 1, 1},
  {&__pyx_n_s_vals, __pyx_k_vals, sizeof(__pyx_k_vals), 0, 0, 1, 1},
  {&__pyx_n_s_valsA, __pyx_k_valsA, sizeof(__pyx_k_valsA), 0, 0, 1, 1},
  {&__pyx_n_s_valsB, __pyx_k_valsB, sizeof(__pyx_k_valsB), 0, 0, 1, 1},
  {&__pyx_n_s_value, __pyx_k_value, sizeof(__pyx_k_value), 0, 0, 1, 1},
  {&__pyx_n_s_verbosity, __pyx_k_verbosity, sizeof(__pyx_k_verbosity), 0, 0, 1, 1},
  {&__pyx_n_s_version, __pyx_k_version, sizeof(__pyx_k_version), 0, 0, 1, 1},
  {&__pyx_n_s_version_2, __pyx_k_version_2, sizeof(__pyx_k_version_2), 0, 0, 1, 1},
  {&__pyx_n_s_vlevel, __pyx_k_vlevel, sizeof(__pyx_k_vlevel), 0, 0, 1, 1},
  {&__pyx_n_s_weightxQ, __pyx_k_weightxQ, sizeof(__pyx_k_weightxQ), 0, 0, 1, 1},
  {&__pyx_n_s_weightxQ2, __pyx_k_weightxQ2, sizeof(__pyx_k_weightxQ2), 0, 0, 1, 1},
  {&__pyx_n_s_weightxxQ, __pyx_k_weightxxQ, sizeof(__pyx_k_weightxxQ), 0, 0, 1, 1},
  {&__pyx_n_s_weightxxQ2, __pyx_k_weightxxQ2, sizeof(__pyx_k_weightxxQ2), 0, 0, 1, 1},
  {&__pyx_n_s_x, __pyx_k_x, sizeof(__pyx_k_x), 0, 0, 1, 1},
  {&__pyx_n_s_x1, __pyx_k_x1, sizeof(__pyx_k_x1), 0, 0, 1, 1},
  {&__pyx_n_s_x2, __pyx_k_x2, sizeof(__pyx_k_x2), 0, 0, 1, 1},
  {&__pyx_n_s_xfxQ, __pyx_k_xfxQ, sizeof(__pyx_k_xfxQ), 0, 0, 1, 1},
  {&__pyx_n_s_xfxQ2, __pyx_k_xfxQ2, sizeof(__pyx_k_xfxQ2), 0, 0, 1, 1},
  {&__pyx_n_s_xrange, __pyx_k_xrange, sizeof(__pyx_k_xrange), 0, 0, 1, 1},
  {&__pyx_n_s_zip, __pyx_k_zip, sizeof(__pyx_k_zip), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_ImportError = __Pyx_GetBuiltinName(__pyx_n_s_ImportError); if (!__pyx_builtin_ImportError) __PYX_ERR(0, 9, __pyx_L1_error)
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(0, 22, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(0, 123, __pyx_L1_error)
  #if PY_MAJOR_VERSION >= 3
  __pyx_builtin_xrange = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_xrange) __PYX_ERR(0, 202, __pyx_L1_error)
  #else
  __pyx_builtin_xrange = __Pyx_GetBuiltinName(__pyx_n_s_xrange); if (!__pyx_builtin_xrange) __PYX_ERR(0, 202, __pyx_L1_error)
  #endif
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(1, 68, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "lhapdf.pyx":18
 * def text_encode(text):
 *     if isinstance(text, unicode):
 *         return text.encode('utf8')             # <<<<<<<<<<<<<<
 *     elif isinstance(text, bytes):
 *         return text
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_n_s_utf8); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 18, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "lhapdf.pyx":22
 *         return text
 *     else:
 *         raise ValueError("Requires text input")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_s_Requires_text_input); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(0, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "lhapdf.pyx":619
 *         return mkPDF_setmem(arg0_string, args[1])
 *     else:
 *         raise Exception("Unknown call signature")             # <<<<<<<<<<<<<<
 * 
 * def mkAlphaS(*args):
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_s_Unknown_call_signature); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(0, 619, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "lhapdf.pyx":636
 *         return mkAlphaS_setmem(arg0_string, args[1])
 *     else:
 *         raise Exception("Unknown call signature")             # <<<<<<<<<<<<<<
 * 
 * def mkBareAlphaS(as_type):
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_s_Unknown_call_signature); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(0, 636, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "lhapdf.pyx":16
 *     FIXED, VARIABLE
 * 
 * def text_encode(text):             # <<<<<<<<<<<<<<
 *     if isinstance(text, unicode):
 *         return text.encode('utf8')
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_n_s_text); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);
  __pyx_codeobj__6 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__5, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_andy_proj_hep_lhapdf6_wrap, __pyx_n_s_text_encode, 16, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__6)) __PYX_ERR(0, 16, __pyx_L1_error)

  /* "lhapdf.pyx":280
 *     PDF+parameter sets are errplus_pdf, errminus_pdf, errsymm_pdf and err_par.
 *     """
 *     def __init__(self, central=0.0, errplus=0.0, errminus=0.0, errsymm=0.0, scale=0.0, errplus_pdf=0.0, errminus_pdf=0.0, errsymm_pdf=0.0, err_par=0.0):             # <<<<<<<<<<<<<<
 *         self.central  = central
 *         self.errplus  = errplus
 */
  __pyx_tuple__7 = PyTuple_Pack(10, __pyx_n_s_self, __pyx_n_s_central, __pyx_n_s_errplus, __pyx_n_s_errminus, __pyx_n_s_errsymm, __pyx_n_s_scale, __pyx_n_s_errplus_pdf, __pyx_n_s_errminus_pdf, __pyx_n_s_errsymm_pdf, __pyx_n_s_err_par); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(0, 280, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);
  __pyx_codeobj__8 = (PyObject*)__Pyx_PyCode_New(10, 0, 10, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__7, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_andy_proj_hep_lhapdf6_wrap, __pyx_n_s_init, 280, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__8)) __PYX_ERR(0, 280, __pyx_L1_error)
  __pyx_tuple__9 = PyTuple_Pack(9, ((PyObject*)__pyx_float_0_0), ((PyObject*)__pyx_float_0_0), ((PyObject*)__pyx_float_0_0), ((PyObject*)__pyx_float_0_0), ((PyObject*)__pyx_float_0_0), ((PyObject*)__pyx_float_0_0), ((PyObject*)__pyx_float_0_0), ((PyObject*)__pyx_float_0_0), ((PyObject*)__pyx_float_0_0)); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(0, 280, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "lhapdf.pyx":536
 * 
 * 
 * def getConfig():             # <<<<<<<<<<<<<<
 *     """Factory function to get the global config object."""
 *     cdef c.Info* ptr = &c.getConfig()
 */
  __pyx_tuple__10 = PyTuple_Pack(2, __pyx_n_s_ptr, __pyx_n_s_obj); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(0, 536, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);
  __pyx_codeobj__11 = (PyObject*)__Pyx_PyCode_New(0, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__10, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_andy_proj_hep_lhapdf6_wrap, __pyx_n_s_getConfig, 536, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__11)) __PYX_ERR(0, 536, __pyx_L1_error)

  /* "lhapdf.pyx":543
 *     return obj
 * 
 * def getPDFSet(setname):             # <<<<<<<<<<<<<<
 *     """Factory function to get the specified PDF set."""
 *     cdef c.PDFSet* ptr = &c.getPDFSet(text_encode(setname))
 */
  __pyx_tuple__12 = PyTuple_Pack(3, __pyx_n_s_setname, __pyx_n_s_ptr, __pyx_n_s_obj); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(0, 543, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);
  __pyx_codeobj__13 = (PyObject*)__Pyx_PyCode_New(1, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__12, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_andy_proj_hep_lhapdf6_wrap, __pyx_n_s_getPDFSet, 543, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__13)) __PYX_ERR(0, 543, __pyx_L1_error)

  /* "lhapdf.pyx":550
 *     return obj
 * 
 * def mkPDFs(setname):             # <<<<<<<<<<<<<<
 *     """Factory function to make all the PDF objects in the specified set."""
 *     cdef vector[c.PDF*] ptrs = c.mkPDFs(text_encode(setname))
 */
  __pyx_tuple__14 = PyTuple_Pack(5, __pyx_n_s_setname, __pyx_n_s_ptrs, __pyx_n_s_obj, __pyx_n_s_objs, __pyx_n_s_ptr); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(0, 550, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);
  __pyx_codeobj__15 = (PyObject*)__Pyx_PyCode_New(1, 0, 5, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__14, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_andy_proj_hep_lhapdf6_wrap, __pyx_n_s_mkPDFs, 550, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__15)) __PYX_ERR(0, 550, __pyx_L1_error)

  /* "lhapdf.pyx":604
 *     return obj
 * 
 * def mkPDF(*args):             # <<<<<<<<<<<<<<
 *     """Factory function to make a PDF object from the set name and member number
 *     (2 args), the unique LHAPDF ID number for that member (1 int arg), or the
 */
  __pyx_tuple__16 = PyTuple_Pack(2, __pyx_n_s_args, __pyx_n_s_arg0_string); if (unlikely(!__pyx_tuple__16)) __PYX_ERR(0, 604, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);
  __pyx_codeobj__17 = (PyObject*)__Pyx_PyCode_New(0, 0, 2, 0, CO_VARARGS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__16, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_andy_proj_hep_lhapdf6_wrap, __pyx_n_s_mkPDF, 604, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__17)) __PYX_ERR(0, 604, __pyx_L1_error)

  /* "lhapdf.pyx":621
 *         raise Exception("Unknown call signature")
 * 
 * def mkAlphaS(*args):             # <<<<<<<<<<<<<<
 *     """Factory function to make a AlphaS object from the set name and member number
 *     (2 args), the unique LHAPDF ID number for that member (1 int arg), or the
 */
  __pyx_tuple__18 = PyTuple_Pack(2, __pyx_n_s_args, __pyx_n_s_arg0_string); if (unlikely(!__pyx_tuple__18)) __PYX_ERR(0, 621, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);
  __pyx_codeobj__19 = (PyObject*)__Pyx_PyCode_New(0, 0, 2, 0, CO_VARARGS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__18, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_andy_proj_hep_lhapdf6_wrap, __pyx_n_s_mkAlphaS, 621, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__19)) __PYX_ERR(0, 621, __pyx_L1_error)

  /* "lhapdf.pyx":638
 *         raise Exception("Unknown call signature")
 * 
 * def mkBareAlphaS(as_type):             # <<<<<<<<<<<<<<
 *     "Factory function to make a bare AlphaS object."
 *     return mkBareAlphaS_(as_type)
 */
  __pyx_tuple__20 = PyTuple_Pack(1, __pyx_n_s_as_type); if (unlikely(!__pyx_tuple__20)) __PYX_ERR(0, 638, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__20);
  __Pyx_GIVEREF(__pyx_tuple__20);
  __pyx_codeobj__21 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__20, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_andy_proj_hep_lhapdf6_wrap, __pyx_n_s_mkBareAlphaS, 638, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__21)) __PYX_ERR(0, 638, __pyx_L1_error)

  /* "lhapdf.pyx":643
 * 
 * 
 * def weightxQ(int id, double x, double Q, PDF basepdf, PDF newpdf, aschk=5e-2):             # <<<<<<<<<<<<<<
 *     """Reweight from basepdf to newpdf with flavour id and kinematics x and Q2."""
 *     from cython.operator import dereference
 */
  __pyx_tuple__22 = PyTuple_Pack(6, __pyx_n_s_id, __pyx_n_s_x, __pyx_n_s_Q, __pyx_n_s_basepdf, __pyx_n_s_newpdf, __pyx_n_s_aschk); if (unlikely(!__pyx_tuple__22)) __PYX_ERR(0, 643, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__22);
  __Pyx_GIVEREF(__pyx_tuple__22);
  __pyx_codeobj__23 = (PyObject*)__Pyx_PyCode_New(6, 0, 6, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__22, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_andy_proj_hep_lhapdf6_wrap, __pyx_n_s_weightxQ, 643, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__23)) __PYX_ERR(0, 643, __pyx_L1_error)

  /* "lhapdf.pyx":648
 *     return c.weightxQ(id, x, Q, dereference(basepdf._ptr), dereference(newpdf._ptr), aschk)
 * 
 * def weightxQ2(int id, double x, double Q2, PDF basepdf, PDF newpdf, aschk=5e-2):             # <<<<<<<<<<<<<<
 *     """Reweight from basepdf to newpdf with flavour id and kinematics x and Q2."""
 *     from cython.operator import dereference
 */
  __pyx_tuple__24 = PyTuple_Pack(6, __pyx_n_s_id, __pyx_n_s_x, __pyx_n_s_Q2, __pyx_n_s_basepdf, __pyx_n_s_newpdf, __pyx_n_s_aschk); if (unlikely(!__pyx_tuple__24)) __PYX_ERR(0, 648, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__24);
  __Pyx_GIVEREF(__pyx_tuple__24);
  __pyx_codeobj__25 = (PyObject*)__Pyx_PyCode_New(6, 0, 6, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__24, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_andy_proj_hep_lhapdf6_wrap, __pyx_n_s_weightxQ2, 648, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__25)) __PYX_ERR(0, 648, __pyx_L1_error)

  /* "lhapdf.pyx":653
 *     return c.weightxQ2(id, x, Q2, dereference(basepdf._ptr), dereference(newpdf._ptr), aschk)
 * 
 * def weightxxQ(int id1, int id2, double x1, double x2, double Q, PDF basepdf, PDF newpdf, aschk=5e-2):             # <<<<<<<<<<<<<<
 *     """Reweight from basepdf to newpdf with flavour id and kinematics x and Q2."""
 *     from cython.operator import dereference
 */
  __pyx_tuple__26 = PyTuple_Pack(8, __pyx_n_s_id1, __pyx_n_s_id2, __pyx_n_s_x1, __pyx_n_s_x2, __pyx_n_s_Q, __pyx_n_s_basepdf, __pyx_n_s_newpdf, __pyx_n_s_aschk); if (unlikely(!__pyx_tuple__26)) __PYX_ERR(0, 653, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__26);
  __Pyx_GIVEREF(__pyx_tuple__26);
  __pyx_codeobj__27 = (PyObject*)__Pyx_PyCode_New(8, 0, 8, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__26, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_andy_proj_hep_lhapdf6_wrap, __pyx_n_s_weightxxQ, 653, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__27)) __PYX_ERR(0, 653, __pyx_L1_error)

  /* "lhapdf.pyx":658
 *     return c.weightxxQ(id1, id2, x1, x2, Q, dereference(basepdf._ptr), dereference(newpdf._ptr), aschk)
 * 
 * def weightxxQ2(int id1, int id2, double x1, double x2, double Q2, PDF basepdf, PDF newpdf, aschk=5e-2):             # <<<<<<<<<<<<<<
 *     """Reweight from basepdf to newpdf with flavour id and kinematics x and Q2."""
 *     from cython.operator import dereference
 */
  __pyx_tuple__28 = PyTuple_Pack(8, __pyx_n_s_id1, __pyx_n_s_id2, __pyx_n_s_x1, __pyx_n_s_x2, __pyx_n_s_Q2, __pyx_n_s_basepdf, __pyx_n_s_newpdf, __pyx_n_s_aschk); if (unlikely(!__pyx_tuple__28)) __PYX_ERR(0, 658, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__28);
  __Pyx_GIVEREF(__pyx_tuple__28);
  __pyx_codeobj__29 = (PyObject*)__Pyx_PyCode_New(8, 0, 8, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__28, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_andy_proj_hep_lhapdf6_wrap, __pyx_n_s_weightxxQ2, 658, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__29)) __PYX_ERR(0, 658, __pyx_L1_error)

  /* "lhapdf.pyx":665
 * 
 * 
 * def version():             # <<<<<<<<<<<<<<
 *     "Return the LHAPDF library version."
 *     return c.version()
 */
  __pyx_codeobj__30 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_andy_proj_hep_lhapdf6_wrap, __pyx_n_s_version, 665, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__30)) __PYX_ERR(0, 665, __pyx_L1_error)

  /* "lhapdf.pyx":672
 * 
 * 
 * def verbosity():             # <<<<<<<<<<<<<<
 *     "Get the main verbosity level of the LHAPDF system: 0 = quiet, 2 = loud"
 *     return c.verbosity()
 */
  __pyx_codeobj__31 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_andy_proj_hep_lhapdf6_wrap, __pyx_n_s_verbosity, 672, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__31)) __PYX_ERR(0, 672, __pyx_L1_error)

  /* "lhapdf.pyx":676
 *     return c.verbosity()
 * 
 * def setVerbosity(vlevel):             # <<<<<<<<<<<<<<
 *     "Set the main verbosity level of the LHAPDF system: 0 = quiet, 2 = loud"
 *     c.setVerbosity(vlevel)
 */
  __pyx_tuple__32 = PyTuple_Pack(1, __pyx_n_s_vlevel); if (unlikely(!__pyx_tuple__32)) __PYX_ERR(0, 676, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__32);
  __Pyx_GIVEREF(__pyx_tuple__32);
  __pyx_codeobj__33 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__32, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_andy_proj_hep_lhapdf6_wrap, __pyx_n_s_setVerbosity, 676, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__33)) __PYX_ERR(0, 676, __pyx_L1_error)

  /* "lhapdf.pyx":681
 * 
 * 
 * def availablePDFSets():             # <<<<<<<<<<<<<<
 *     "Get the names of all the available PDF sets on this system."
 *     return c.availablePDFSets()
 */
  __pyx_codeobj__34 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_andy_proj_hep_lhapdf6_wrap, __pyx_n_s_availablePDFSets, 681, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__34)) __PYX_ERR(0, 681, __pyx_L1_error)

  /* "lhapdf.pyx":686
 * 
 * 
 * def paths():             # <<<<<<<<<<<<<<
 *     "Return the list of current PDF data search paths."
 *     return c.paths()
 */
  __pyx_codeobj__35 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_andy_proj_hep_lhapdf6_wrap, __pyx_n_s_paths, 686, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__35)) __PYX_ERR(0, 686, __pyx_L1_error)

  /* "lhapdf.pyx":690
 *     return c.paths()
 * 
 * def setPaths(newpaths):             # <<<<<<<<<<<<<<
 *     "Set the list of current PDF data search paths."
 *     c.setPaths([text_encode(path) for path in newpaths])
 */
  __pyx_tuple__36 = PyTuple_Pack(2, __pyx_n_s_newpaths, __pyx_n_s_path); if (unlikely(!__pyx_tuple__36)) __PYX_ERR(0, 690, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__36);
  __Pyx_GIVEREF(__pyx_tuple__36);
  __pyx_codeobj__37 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__36, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_andy_proj_hep_lhapdf6_wrap, __pyx_n_s_setPaths, 690, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__37)) __PYX_ERR(0, 690, __pyx_L1_error)

  /* "lhapdf.pyx":694
 *     c.setPaths([text_encode(path) for path in newpaths])
 * 
 * def pathsPrepend(newpath):             # <<<<<<<<<<<<<<
 *     "Prepend to the list of current PDF data search paths."
 *     c.pathsPrepend(text_encode(newpath))
 */
  __pyx_tuple__38 = PyTuple_Pack(1, __pyx_n_s_newpath); if (unlikely(!__pyx_tuple__38)) __PYX_ERR(0, 694, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__38);
  __Pyx_GIVEREF(__pyx_tuple__38);
  __pyx_codeobj__39 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__38, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_andy_proj_hep_lhapdf6_wrap, __pyx_n_s_pathsPrepend, 694, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__39)) __PYX_ERR(0, 694, __pyx_L1_error)

  /* "lhapdf.pyx":698
 *     c.pathsPrepend(text_encode(newpath))
 * 
 * def pathsAppend(newpath):             # <<<<<<<<<<<<<<
 *     "Append to the list of current PDF data search paths."
 *     c.pathsAppend(text_encode(newpath))
 */
  __pyx_tuple__40 = PyTuple_Pack(1, __pyx_n_s_newpath); if (unlikely(!__pyx_tuple__40)) __PYX_ERR(0, 698, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__40);
  __Pyx_GIVEREF(__pyx_tuple__40);
  __pyx_codeobj__41 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__40, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_andy_proj_hep_lhapdf6_wrap, __pyx_n_s_pathsAppend, 698, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__41)) __PYX_ERR(0, 698, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_float_0_0 = PyFloat_FromDouble(0.0); if (unlikely(!__pyx_float_0_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_5eneg_2 = PyFloat_FromDouble(5e-2); if (unlikely(!__pyx_float_5eneg_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_68_268949 = PyFloat_FromDouble(68.268949); if (unlikely(!__pyx_float_68_268949)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initlhapdf(void); /*proto*/
PyMODINIT_FUNC initlhapdf(void)
#else
PyMODINIT_FUNC PyInit_lhapdf(void); /*proto*/
PyMODINIT_FUNC PyInit_lhapdf(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_lhapdf(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("lhapdf", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_lhapdf) {
    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "lhapdf")) {
      if (unlikely(PyDict_SetItemString(modules, "lhapdf", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  __pyx_vtabptr_6lhapdf_PDF = &__pyx_vtable_6lhapdf_PDF;
  __pyx_vtable_6lhapdf_PDF.set_ptr = (PyObject *(*)(struct __pyx_obj_6lhapdf_PDF *, LHAPDF::PDF *))__pyx_f_6lhapdf_3PDF_set_ptr;
  __pyx_vtable_6lhapdf_PDF._set = (PyObject *(*)(struct __pyx_obj_6lhapdf_PDF *))__pyx_f_6lhapdf_3PDF__set;
  __pyx_vtable_6lhapdf_PDF._info = (PyObject *(*)(struct __pyx_obj_6lhapdf_PDF *))__pyx_f_6lhapdf_3PDF__info;
  if (PyType_Ready(&__pyx_type_6lhapdf_PDF) < 0) __PYX_ERR(0, 26, __pyx_L1_error)
  __pyx_type_6lhapdf_PDF.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_6lhapdf_PDF.tp_dict, __pyx_vtabptr_6lhapdf_PDF) < 0) __PYX_ERR(0, 26, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "PDF", (PyObject *)&__pyx_type_6lhapdf_PDF) < 0) __PYX_ERR(0, 26, __pyx_L1_error)
  __pyx_ptype_6lhapdf_PDF = &__pyx_type_6lhapdf_PDF;
  __pyx_vtabptr_6lhapdf_Info = &__pyx_vtable_6lhapdf_Info;
  __pyx_vtable_6lhapdf_Info.set_ptr = (PyObject *(*)(struct __pyx_obj_6lhapdf_Info *, LHAPDF::Info *))__pyx_f_6lhapdf_4Info_set_ptr;
  if (PyType_Ready(&__pyx_type_6lhapdf_Info) < 0) __PYX_ERR(0, 239, __pyx_L1_error)
  __pyx_type_6lhapdf_Info.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_6lhapdf_Info.tp_dict, __pyx_vtabptr_6lhapdf_Info) < 0) __PYX_ERR(0, 239, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "Info", (PyObject *)&__pyx_type_6lhapdf_Info) < 0) __PYX_ERR(0, 239, __pyx_L1_error)
  __pyx_ptype_6lhapdf_Info = &__pyx_type_6lhapdf_Info;
  __pyx_vtabptr_6lhapdf_PDFSet = &__pyx_vtable_6lhapdf_PDFSet;
  __pyx_vtable_6lhapdf_PDFSet.set_ptr = (PyObject *(*)(struct __pyx_obj_6lhapdf_PDFSet *, LHAPDF::PDFSet *))__pyx_f_6lhapdf_6PDFSet_set_ptr;
  if (PyType_Ready(&__pyx_type_6lhapdf_PDFSet) < 0) __PYX_ERR(0, 292, __pyx_L1_error)
  __pyx_type_6lhapdf_PDFSet.tp_print = 0;
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_6lhapdf_PDFSet, "__len__"); if (unlikely(!wrapper)) __PYX_ERR(0, 292, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_6lhapdf_6PDFSet_2__len__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_6lhapdf_6PDFSet_2__len__.doc = __pyx_doc_6lhapdf_6PDFSet_2__len__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_6lhapdf_6PDFSet_2__len__;
    }
  }
  #endif
  if (__Pyx_SetVtable(__pyx_type_6lhapdf_PDFSet.tp_dict, __pyx_vtabptr_6lhapdf_PDFSet) < 0) __PYX_ERR(0, 292, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "PDFSet", (PyObject *)&__pyx_type_6lhapdf_PDFSet) < 0) __PYX_ERR(0, 292, __pyx_L1_error)
  __pyx_ptype_6lhapdf_PDFSet = &__pyx_type_6lhapdf_PDFSet;
  __pyx_vtabptr_6lhapdf_PDFInfo = &__pyx_vtable_6lhapdf_PDFInfo;
  __pyx_vtable_6lhapdf_PDFInfo.set_ptr = (PyObject *(*)(struct __pyx_obj_6lhapdf_PDFInfo *, LHAPDF::PDFInfo *))__pyx_f_6lhapdf_7PDFInfo_set_ptr;
  if (PyType_Ready(&__pyx_type_6lhapdf_PDFInfo) < 0) __PYX_ERR(0, 415, __pyx_L1_error)
  __pyx_type_6lhapdf_PDFInfo.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_6lhapdf_PDFInfo.tp_dict, __pyx_vtabptr_6lhapdf_PDFInfo) < 0) __PYX_ERR(0, 415, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "PDFInfo", (PyObject *)&__pyx_type_6lhapdf_PDFInfo) < 0) __PYX_ERR(0, 415, __pyx_L1_error)
  __pyx_ptype_6lhapdf_PDFInfo = &__pyx_type_6lhapdf_PDFInfo;
  __pyx_vtabptr_6lhapdf_AlphaS = &__pyx_vtable_6lhapdf_AlphaS;
  __pyx_vtable_6lhapdf_AlphaS.set_ptr = (PyObject *(*)(struct __pyx_obj_6lhapdf_AlphaS *, LHAPDF::AlphaS *))__pyx_f_6lhapdf_6AlphaS_set_ptr;
  if (PyType_Ready(&__pyx_type_6lhapdf_AlphaS) < 0) __PYX_ERR(0, 447, __pyx_L1_error)
  __pyx_type_6lhapdf_AlphaS.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_6lhapdf_AlphaS.tp_dict, __pyx_vtabptr_6lhapdf_AlphaS) < 0) __PYX_ERR(0, 447, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "AlphaS", (PyObject *)&__pyx_type_6lhapdf_AlphaS) < 0) __PYX_ERR(0, 447, __pyx_L1_error)
  __pyx_ptype_6lhapdf_AlphaS = &__pyx_type_6lhapdf_AlphaS;
  /*--- Type import code ---*/
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "lhapdf.pyx":7
 * from libcpp.string cimport string
 * from libcpp.vector cimport vector
 * try:             # <<<<<<<<<<<<<<
 *     from itertools import izip as zip
 * except ImportError: # python 3.x version
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "lhapdf.pyx":8
 * from libcpp.vector cimport vector
 * try:
 *     from itertools import izip as zip             # <<<<<<<<<<<<<<
 * except ImportError: # python 3.x version
 *     pass
 */
      __pyx_t_4 = PyList_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 8, __pyx_L2_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_INCREF(__pyx_n_s_izip);
      __Pyx_GIVEREF(__pyx_n_s_izip);
      PyList_SET_ITEM(__pyx_t_4, 0, __pyx_n_s_izip);
      __pyx_t_5 = __Pyx_Import(__pyx_n_s_itertools, __pyx_t_4, -1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 8, __pyx_L2_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_ImportFrom(__pyx_t_5, __pyx_n_s_izip); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 8, __pyx_L2_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (PyDict_SetItem(__pyx_d, __pyx_n_s_zip, __pyx_t_4) < 0) __PYX_ERR(0, 8, __pyx_L2_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "lhapdf.pyx":7
 * from libcpp.string cimport string
 * from libcpp.vector cimport vector
 * try:             # <<<<<<<<<<<<<<
 *     from itertools import izip as zip
 * except ImportError: # python 3.x version
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L9_try_end;
    __pyx_L2_error:;
    __Pyx_PyThreadState_assign
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "lhapdf.pyx":9
 * try:
 *     from itertools import izip as zip
 * except ImportError: # python 3.x version             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
    __pyx_t_6 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ImportError);
    if (__pyx_t_6) {
      __Pyx_ErrRestore(0,0,0);
      goto __pyx_L3_exception_handled;
    }
    goto __pyx_L4_except_error;
    __pyx_L4_except_error:;

    /* "lhapdf.pyx":7
 * from libcpp.string cimport string
 * from libcpp.vector cimport vector
 * try:             # <<<<<<<<<<<<<<
 *     from itertools import izip as zip
 * except ImportError: # python 3.x version
 */
    __Pyx_PyThreadState_assign
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L3_exception_handled:;
    __Pyx_PyThreadState_assign
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    __pyx_L9_try_end:;
  }

  /* "lhapdf.pyx":16
 *     FIXED, VARIABLE
 * 
 * def text_encode(text):             # <<<<<<<<<<<<<<
 *     if isinstance(text, unicode):
 *         return text.encode('utf8')
 */
  __pyx_t_5 = PyCFunction_NewEx(&__pyx_mdef_6lhapdf_1text_encode, NULL, __pyx_n_s_lhapdf); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_text_encode, __pyx_t_5) < 0) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "lhapdf.pyx":273
 * 
 * 
 * class PDFUncertainty:             # <<<<<<<<<<<<<<
 *     """\
 *     A simple struct containing components of a value with uncertainties calculated
 */
  __pyx_t_5 = __Pyx_Py3MetaclassPrepare((PyObject *) NULL, __pyx_empty_tuple, __pyx_n_s_PDFUncertainty, __pyx_n_s_PDFUncertainty, (PyObject *) NULL, __pyx_n_s_lhapdf, __pyx_kp_s_A_simple_struct_containing_comp); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 273, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);

  /* "lhapdf.pyx":280
 *     PDF+parameter sets are errplus_pdf, errminus_pdf, errsymm_pdf and err_par.
 *     """
 *     def __init__(self, central=0.0, errplus=0.0, errminus=0.0, errsymm=0.0, scale=0.0, errplus_pdf=0.0, errminus_pdf=0.0, errsymm_pdf=0.0, err_par=0.0):             # <<<<<<<<<<<<<<
 *         self.central  = central
 *         self.errplus  = errplus
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6lhapdf_14PDFUncertainty_1__init__, 0, __pyx_n_s_PDFUncertainty___init, NULL, __pyx_n_s_lhapdf, __pyx_d, ((PyObject *)__pyx_codeobj__8)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 280, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_4, __pyx_tuple__9);
  if (PyObject_SetItem(__pyx_t_5, __pyx_n_s_init, __pyx_t_4) < 0) __PYX_ERR(0, 280, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "lhapdf.pyx":273
 * 
 * 
 * class PDFUncertainty:             # <<<<<<<<<<<<<<
 *     """\
 *     A simple struct containing components of a value with uncertainties calculated
 */
  __pyx_t_4 = __Pyx_Py3ClassCreate(((PyObject*)&__Pyx_DefaultClassType), __pyx_n_s_PDFUncertainty, __pyx_empty_tuple, __pyx_t_5, NULL, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 273, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PDFUncertainty, __pyx_t_4) < 0) __PYX_ERR(0, 273, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "lhapdf.pyx":536
 * 
 * 
 * def getConfig():             # <<<<<<<<<<<<<<
 *     """Factory function to get the global config object."""
 *     cdef c.Info* ptr = &c.getConfig()
 */
  __pyx_t_5 = PyCFunction_NewEx(&__pyx_mdef_6lhapdf_3getConfig, NULL, __pyx_n_s_lhapdf); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 536, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_getConfig, __pyx_t_5) < 0) __PYX_ERR(0, 536, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "lhapdf.pyx":543
 *     return obj
 * 
 * def getPDFSet(setname):             # <<<<<<<<<<<<<<
 *     """Factory function to get the specified PDF set."""
 *     cdef c.PDFSet* ptr = &c.getPDFSet(text_encode(setname))
 */
  __pyx_t_5 = PyCFunction_NewEx(&__pyx_mdef_6lhapdf_5getPDFSet, NULL, __pyx_n_s_lhapdf); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 543, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_getPDFSet, __pyx_t_5) < 0) __PYX_ERR(0, 543, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "lhapdf.pyx":550
 *     return obj
 * 
 * def mkPDFs(setname):             # <<<<<<<<<<<<<<
 *     """Factory function to make all the PDF objects in the specified set."""
 *     cdef vector[c.PDF*] ptrs = c.mkPDFs(text_encode(setname))
 */
  __pyx_t_5 = PyCFunction_NewEx(&__pyx_mdef_6lhapdf_7mkPDFs, NULL, __pyx_n_s_lhapdf); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 550, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_mkPDFs, __pyx_t_5) < 0) __PYX_ERR(0, 550, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "lhapdf.pyx":604
 *     return obj
 * 
 * def mkPDF(*args):             # <<<<<<<<<<<<<<
 *     """Factory function to make a PDF object from the set name and member number
 *     (2 args), the unique LHAPDF ID number for that member (1 int arg), or the
 */
  __pyx_t_5 = PyCFunction_NewEx(&__pyx_mdef_6lhapdf_9mkPDF, NULL, __pyx_n_s_lhapdf); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 604, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_mkPDF, __pyx_t_5) < 0) __PYX_ERR(0, 604, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "lhapdf.pyx":621
 *         raise Exception("Unknown call signature")
 * 
 * def mkAlphaS(*args):             # <<<<<<<<<<<<<<
 *     """Factory function to make a AlphaS object from the set name and member number
 *     (2 args), the unique LHAPDF ID number for that member (1 int arg), or the
 */
  __pyx_t_5 = PyCFunction_NewEx(&__pyx_mdef_6lhapdf_11mkAlphaS, NULL, __pyx_n_s_lhapdf); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 621, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_mkAlphaS, __pyx_t_5) < 0) __PYX_ERR(0, 621, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "lhapdf.pyx":638
 *         raise Exception("Unknown call signature")
 * 
 * def mkBareAlphaS(as_type):             # <<<<<<<<<<<<<<
 *     "Factory function to make a bare AlphaS object."
 *     return mkBareAlphaS_(as_type)
 */
  __pyx_t_5 = PyCFunction_NewEx(&__pyx_mdef_6lhapdf_13mkBareAlphaS, NULL, __pyx_n_s_lhapdf); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 638, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_mkBareAlphaS, __pyx_t_5) < 0) __PYX_ERR(0, 638, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "lhapdf.pyx":643
 * 
 * 
 * def weightxQ(int id, double x, double Q, PDF basepdf, PDF newpdf, aschk=5e-2):             # <<<<<<<<<<<<<<
 *     """Reweight from basepdf to newpdf with flavour id and kinematics x and Q2."""
 *     from cython.operator import dereference
 */
  __pyx_t_5 = PyCFunction_NewEx(&__pyx_mdef_6lhapdf_15weightxQ, NULL, __pyx_n_s_lhapdf); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 643, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_weightxQ, __pyx_t_5) < 0) __PYX_ERR(0, 643, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "lhapdf.pyx":648
 *     return c.weightxQ(id, x, Q, dereference(basepdf._ptr), dereference(newpdf._ptr), aschk)
 * 
 * def weightxQ2(int id, double x, double Q2, PDF basepdf, PDF newpdf, aschk=5e-2):             # <<<<<<<<<<<<<<
 *     """Reweight from basepdf to newpdf with flavour id and kinematics x and Q2."""
 *     from cython.operator import dereference
 */
  __pyx_t_5 = PyCFunction_NewEx(&__pyx_mdef_6lhapdf_17weightxQ2, NULL, __pyx_n_s_lhapdf); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 648, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_weightxQ2, __pyx_t_5) < 0) __PYX_ERR(0, 648, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "lhapdf.pyx":653
 *     return c.weightxQ2(id, x, Q2, dereference(basepdf._ptr), dereference(newpdf._ptr), aschk)
 * 
 * def weightxxQ(int id1, int id2, double x1, double x2, double Q, PDF basepdf, PDF newpdf, aschk=5e-2):             # <<<<<<<<<<<<<<
 *     """Reweight from basepdf to newpdf with flavour id and kinematics x and Q2."""
 *     from cython.operator import dereference
 */
  __pyx_t_5 = PyCFunction_NewEx(&__pyx_mdef_6lhapdf_19weightxxQ, NULL, __pyx_n_s_lhapdf); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 653, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_weightxxQ, __pyx_t_5) < 0) __PYX_ERR(0, 653, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "lhapdf.pyx":658
 *     return c.weightxxQ(id1, id2, x1, x2, Q, dereference(basepdf._ptr), dereference(newpdf._ptr), aschk)
 * 
 * def weightxxQ2(int id1, int id2, double x1, double x2, double Q2, PDF basepdf, PDF newpdf, aschk=5e-2):             # <<<<<<<<<<<<<<
 *     """Reweight from basepdf to newpdf with flavour id and kinematics x and Q2."""
 *     from cython.operator import dereference
 */
  __pyx_t_5 = PyCFunction_NewEx(&__pyx_mdef_6lhapdf_21weightxxQ2, NULL, __pyx_n_s_lhapdf); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 658, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_weightxxQ2, __pyx_t_5) < 0) __PYX_ERR(0, 658, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "lhapdf.pyx":665
 * 
 * 
 * def version():             # <<<<<<<<<<<<<<
 *     "Return the LHAPDF library version."
 *     return c.version()
 */
  __pyx_t_5 = PyCFunction_NewEx(&__pyx_mdef_6lhapdf_23version, NULL, __pyx_n_s_lhapdf); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 665, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_version, __pyx_t_5) < 0) __PYX_ERR(0, 665, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "lhapdf.pyx":669
 *     return c.version()
 * 
 * __version__ = version()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_version); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 669, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (__pyx_t_7) {
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 669, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  } else {
    __pyx_t_5 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 669, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_version_2, __pyx_t_5) < 0) __PYX_ERR(0, 669, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "lhapdf.pyx":672
 * 
 * 
 * def verbosity():             # <<<<<<<<<<<<<<
 *     "Get the main verbosity level of the LHAPDF system: 0 = quiet, 2 = loud"
 *     return c.verbosity()
 */
  __pyx_t_5 = PyCFunction_NewEx(&__pyx_mdef_6lhapdf_25verbosity, NULL, __pyx_n_s_lhapdf); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 672, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_verbosity, __pyx_t_5) < 0) __PYX_ERR(0, 672, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "lhapdf.pyx":676
 *     return c.verbosity()
 * 
 * def setVerbosity(vlevel):             # <<<<<<<<<<<<<<
 *     "Set the main verbosity level of the LHAPDF system: 0 = quiet, 2 = loud"
 *     c.setVerbosity(vlevel)
 */
  __pyx_t_5 = PyCFunction_NewEx(&__pyx_mdef_6lhapdf_27setVerbosity, NULL, __pyx_n_s_lhapdf); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 676, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setVerbosity, __pyx_t_5) < 0) __PYX_ERR(0, 676, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "lhapdf.pyx":681
 * 
 * 
 * def availablePDFSets():             # <<<<<<<<<<<<<<
 *     "Get the names of all the available PDF sets on this system."
 *     return c.availablePDFSets()
 */
  __pyx_t_5 = PyCFunction_NewEx(&__pyx_mdef_6lhapdf_29availablePDFSets, NULL, __pyx_n_s_lhapdf); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 681, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_availablePDFSets, __pyx_t_5) < 0) __PYX_ERR(0, 681, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "lhapdf.pyx":686
 * 
 * 
 * def paths():             # <<<<<<<<<<<<<<
 *     "Return the list of current PDF data search paths."
 *     return c.paths()
 */
  __pyx_t_5 = PyCFunction_NewEx(&__pyx_mdef_6lhapdf_31paths, NULL, __pyx_n_s_lhapdf); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 686, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_paths, __pyx_t_5) < 0) __PYX_ERR(0, 686, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "lhapdf.pyx":690
 *     return c.paths()
 * 
 * def setPaths(newpaths):             # <<<<<<<<<<<<<<
 *     "Set the list of current PDF data search paths."
 *     c.setPaths([text_encode(path) for path in newpaths])
 */
  __pyx_t_5 = PyCFunction_NewEx(&__pyx_mdef_6lhapdf_33setPaths, NULL, __pyx_n_s_lhapdf); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 690, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setPaths, __pyx_t_5) < 0) __PYX_ERR(0, 690, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "lhapdf.pyx":694
 *     c.setPaths([text_encode(path) for path in newpaths])
 * 
 * def pathsPrepend(newpath):             # <<<<<<<<<<<<<<
 *     "Prepend to the list of current PDF data search paths."
 *     c.pathsPrepend(text_encode(newpath))
 */
  __pyx_t_5 = PyCFunction_NewEx(&__pyx_mdef_6lhapdf_35pathsPrepend, NULL, __pyx_n_s_lhapdf); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 694, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pathsPrepend, __pyx_t_5) < 0) __PYX_ERR(0, 694, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "lhapdf.pyx":698
 *     c.pathsPrepend(text_encode(newpath))
 * 
 * def pathsAppend(newpath):             # <<<<<<<<<<<<<<
 *     "Append to the list of current PDF data search paths."
 *     c.pathsAppend(text_encode(newpath))
 */
  __pyx_t_5 = PyCFunction_NewEx(&__pyx_mdef_6lhapdf_37pathsAppend, NULL, __pyx_n_s_lhapdf); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 698, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pathsAppend, __pyx_t_5) < 0) __PYX_ERR(0, 698, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "lhapdf.pyx":1
 * #cython: embedsignature=True, c_string_type=str, c_string_encoding=utf8             # <<<<<<<<<<<<<<
 * 
 * cimport clhapdf as c
 */
  __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_5) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "vector.to_py":67
 * 
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_string")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_string(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [X_to_py(v[i]) for i in range(v.size())]
 * 
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init lhapdf", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init lhapdf");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
#if PY_VERSION_HEX >= 0x03030000
    if (cause) {
#else
    if (cause && cause != Py_None) {
#endif
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = PyThreadState_GET();
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* KeywordStringCheck */
  static CYTHON_INLINE int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* RaiseTooManyValuesToUnpack */
  static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
  static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* PyFunctionFastCall */
  #if CYTHON_FAST_PYCALL
#include "frameobject.h"
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = PyThreadState_GET();
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = f->f_localsplus;
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif  // CPython < 3.6
#endif  // CYTHON_FAST_PYCALL

/* PyCFunctionFastCall */
  #if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    return (*((__Pyx_PyCFunctionFast)meth)) (self, args, nargs, NULL);
}
#endif  // CYTHON_FAST_PYCCALL

/* GetModuleGlobalName */
  static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name) {
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
    result = PyDict_GetItem(__pyx_d, name);
    if (likely(result)) {
        Py_INCREF(result);
    } else {
#else
    result = PyObject_GetItem(__pyx_d, name);
    if (!result) {
        PyErr_Clear();
#endif
        result = __Pyx_GetBuiltinName(name);
    }
    return result;
}

/* IterFinish */
    static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_FAST_THREAD_STATE
    PyThreadState *tstate = PyThreadState_GET();
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(exc_type == PyExc_StopIteration) || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

/* UnpackItemEndCheck */
    static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

/* SaveResetException */
    #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* PyErrExceptionMatches */
    #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    return PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* GetException */
    #if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb) {
#endif
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* PyObjectCallMethO */
      #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
      #if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (PyCFunction_GET_FLAGS(func) & METH_FASTCALL) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* PyObjectCallNoArg */
        #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* RaiseArgTupleInvalid */
          static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* RaiseDoubleKeywords */
          static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
          static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* ExtTypeTest */
          static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(PyObject_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

/* BytesEquals */
          static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
          static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* PyIntBinop */
          #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED int inplace) {
    if (op1 == op2) {
        Py_RETURN_TRUE;
    }
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
        if (a == b) {
            Py_RETURN_TRUE;
        } else {
            Py_RETURN_FALSE;
        }
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a;
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                #if PyLong_SHIFT < 30 && PyLong_SHIFT != 15
                default: return PyLong_Type.tp_richcompare(op1, op2, Py_EQ);
                #else
                default: Py_RETURN_FALSE;
                #endif
            }
        }
            if (a == b) {
                Py_RETURN_TRUE;
            } else {
                Py_RETURN_FALSE;
            }
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            if ((double)a == (double)b) {
                Py_RETURN_TRUE;
            } else {
                Py_RETURN_FALSE;
            }
    }
    return PyObject_RichCompare(op1, op2, Py_EQ);
}
#endif

/* GetItemInt */
          static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (wraparound & unlikely(i < 0)) i += PyList_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (wraparound & unlikely(i < 0)) i += PyTuple_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely((n >= 0) & (n < PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely((n >= 0) & (n < PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* ArgTypeTest */
          static void __Pyx_RaiseArgumentTypeInvalid(const char* name, PyObject *obj, PyTypeObject *type) {
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
}
static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (none_allowed && obj == Py_None) return 1;
    else if (exact) {
        if (likely(Py_TYPE(obj) == type)) return 1;
        #if PY_MAJOR_VERSION == 2
        else if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(PyObject_TypeCheck(obj, type))) return 1;
    }
    __Pyx_RaiseArgumentTypeInvalid(name, obj, type);
    return 0;
}

/* SetVTable */
          static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* Import */
          static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_VERSION_HEX < 0x03030000
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                #if PY_VERSION_HEX < 0x03030000
                PyObject *py_level = PyInt_FromLong(1);
                if (!py_level)
                    goto bad;
                module = PyObject_CallFunctionObjArgs(py_import,
                    name, global_dict, empty_dict, list, py_level, NULL);
                Py_DECREF(py_level);
                #else
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                #endif
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_VERSION_HEX < 0x03030000
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_VERSION_HEX < 0x03030000
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* ImportFrom */
          static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* FetchCommonType */
          static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* fake_module;
    PyTypeObject* cached_type = NULL;
    fake_module = PyImport_AddModule((char*) "_cython_" CYTHON_ABI);
    if (!fake_module) return NULL;
    Py_INCREF(fake_module);
    cached_type = (PyTypeObject*) PyObject_GetAttrString(fake_module, type->tp_name);
    if (cached_type) {
        if (!PyType_Check((PyObject*)cached_type)) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s is not a type object",
                type->tp_name);
            goto bad;
        }
        if (cached_type->tp_basicsize != type->tp_basicsize) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s has the wrong size, try recompiling",
                type->tp_name);
            goto bad;
        }
    } else {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
        PyErr_Clear();
        if (PyType_Ready(type) < 0) goto bad;
        if (PyObject_SetAttrString(fake_module, type->tp_name, (PyObject*) type) < 0)
            goto bad;
        Py_INCREF(type);
        cached_type = type;
    }
done:
    Py_DECREF(fake_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}

/* CythonFunction */
          static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *closure)
{
    if (unlikely(op->func_doc == NULL)) {
        if (op->func.m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(op->func.m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(op->func.m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp = op->func_doc;
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    op->func_doc = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op)
{
    if (unlikely(op->func_name == NULL)) {
#if PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(op->func.m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(op->func.m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = op->func_name;
    Py_INCREF(value);
    op->func_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op)
{
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = op->func_qualname;
    Py_INCREF(value);
    op->func_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_self(__pyx_CyFunctionObject *m, CYTHON_UNUSED void *closure)
{
    PyObject *self;
    self = m->func_closure;
    if (self == NULL)
        self = Py_None;
    Py_INCREF(self);
    return self;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op)
{
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    tmp = op->func_dict;
    Py_INCREF(value);
    op->func_dict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op)
{
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(CYTHON_UNUSED __pyx_CyFunctionObject *op)
{
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    int result = 0;
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    #else
    op->defaults_tuple = PySequence_ITEM(res, 0);
    if (unlikely(!op->defaults_tuple)) result = -1;
    else {
        op->defaults_kwdict = PySequence_ITEM(res, 1);
        if (unlikely(!op->defaults_kwdict)) result = -1;
    }
    #endif
    Py_DECREF(res);
    return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyTuple_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_tuple;
    op->defaults_tuple = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op) {
    PyObject* result = op->defaults_tuple;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_kwdict;
    op->defaults_kwdict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op) {
    PyObject* result = op->defaults_kwdict;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value || value == Py_None) {
        value = NULL;
    } else if (!PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    tmp = op->func_annotations;
    op->func_annotations = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op) {
    PyObject* result = op->func_annotations;
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "__self__", (getter)__Pyx_CyFunction_get_self, 0, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {
    {(char *) "__module__", T_OBJECT, offsetof(__pyx_CyFunctionObject, func.m_module), PY_WRITE_RESTRICTED, 0},
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, CYTHON_UNUSED PyObject *args)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(m->func.m_ml->ml_name);
#else
    return PyString_FromString(m->func.m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if PY_VERSION_HEX < 0x030500A0
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func.m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_New(PyTypeObject *type, PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    __pyx_CyFunctionObject *op = PyObject_GC_New(__pyx_CyFunctionObject, type);
    if (op == NULL)
        return NULL;
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
    op->func.m_ml = ml;
    op->func.m_self = (PyObject *) op;
    Py_XINCREF(closure);
    op->func_closure = closure;
    Py_XINCREF(module);
    op->func.m_module = module;
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
    op->func_classobj = NULL;
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    PyObject_GC_Track(op);
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
    Py_CLEAR(m->func.m_module);
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
    Py_CLEAR(m->func_classobj);
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyObject_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    PyObject_GC_Del(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
    Py_VISIT(m->func.m_module);
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
    Py_VISIT(m->func_classobj);
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject *__Pyx_CyFunction_descr_get(PyObject *func, PyObject *obj, PyObject *type)
{
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    if (m->flags & __Pyx_CYFUNCTION_STATICMETHOD) {
        Py_INCREF(func);
        return func;
    }
    if (m->flags & __Pyx_CYFUNCTION_CLASSMETHOD) {
        if (type == NULL)
            type = (PyObject *)(Py_TYPE(obj));
        return __Pyx_PyMethod_New(func, type, (PyObject *)(Py_TYPE(type)));
    }
    if (obj == Py_None)
        obj = NULL;
    return __Pyx_PyMethod_New(func, obj, type);
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
static PyObject * __Pyx_CyFunction_CallMethod(PyObject *func, PyObject *self, PyObject *arg, PyObject *kw) {
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = f->m_ml->ml_meth;
    Py_ssize_t size;
    switch (f->m_ml->ml_flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {
    case METH_VARARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0))
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 0))
                return (*meth)(self, NULL);
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 1)) {
                PyObject *result, *arg0 = PySequence_ITEM(arg, 0);
                if (unlikely(!arg0)) return NULL;
                result = (*meth)(self, arg0);
                Py_DECREF(arg0);
                return result;
            }
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags in "
                        "__Pyx_CyFunction_Call. METH_OLDARGS is no "
                        "longer supported!");
        return NULL;
    }
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
    return NULL;
}
static CYTHON_INLINE PyObject *__Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    return __Pyx_CyFunction_CallMethod(func, ((PyCFunctionObject*)func)->m_self, arg, kw);
}
static PyObject *__Pyx_CyFunction_CallAsMethod(PyObject *func, PyObject *args, PyObject *kw) {
    PyObject *result;
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *) func;
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        Py_ssize_t argc;
        PyObject *new_args;
        PyObject *self;
        argc = PyTuple_GET_SIZE(args);
        new_args = PyTuple_GetSlice(args, 1, argc);
        if (unlikely(!new_args))
            return NULL;
        self = PyTuple_GetItem(args, 0);
        if (unlikely(!self)) {
            Py_DECREF(new_args);
            return NULL;
        }
        result = __Pyx_CyFunction_CallMethod(func, self, new_args, kw);
        Py_DECREF(new_args);
    } else {
        result = __Pyx_CyFunction_Call(func, args, kw);
    }
    return result;
}
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    (destructor) __Pyx_CyFunction_dealloc,
    0,
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    (reprfunc) __Pyx_CyFunction_repr,
    0,
    0,
    0,
    0,
    __Pyx_CyFunction_CallAsMethod,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC,
    0,
    (traverseproc) __Pyx_CyFunction_traverse,
    (inquiry) __Pyx_CyFunction_clear,
    0,
#if PY_VERSION_HEX < 0x030500A0
    offsetof(__pyx_CyFunctionObject, func_weakreflist),
#else
    offsetof(PyCFunctionObject, m_weakreflist),
#endif
    0,
    0,
    __pyx_CyFunction_methods,
    __pyx_CyFunction_members,
    __pyx_CyFunction_getsets,
    0,
    0,
    __Pyx_CyFunction_descr_get,
    0,
    offsetof(__pyx_CyFunctionObject, func_dict),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
};
static int __pyx_CyFunction_init(void) {
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
    if (__pyx_CyFunctionType == NULL) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyObject_Malloc(size);
    if (!m->defaults)
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

/* CalculateMetaclass */
              static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases) {
    Py_ssize_t i, nbases = PyTuple_GET_SIZE(bases);
    for (i=0; i < nbases; i++) {
        PyTypeObject *tmptype;
        PyObject *tmp = PyTuple_GET_ITEM(bases, i);
        tmptype = Py_TYPE(tmp);
#if PY_MAJOR_VERSION < 3
        if (tmptype == &PyClass_Type)
            continue;
#endif
        if (!metaclass) {
            metaclass = tmptype;
            continue;
        }
        if (PyType_IsSubtype(metaclass, tmptype))
            continue;
        if (PyType_IsSubtype(tmptype, metaclass)) {
            metaclass = tmptype;
            continue;
        }
        PyErr_SetString(PyExc_TypeError,
                        "metaclass conflict: "
                        "the metaclass of a derived class "
                        "must be a (non-strict) subclass "
                        "of the metaclasses of all its bases");
        return NULL;
    }
    if (!metaclass) {
#if PY_MAJOR_VERSION < 3
        metaclass = &PyClass_Type;
#else
        metaclass = &PyType_Type;
#endif
    }
    Py_INCREF((PyObject*) metaclass);
    return (PyObject*) metaclass;
}

/* Py3ClassCreate */
              static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name,
                                           PyObject *qualname, PyObject *mkw, PyObject *modname, PyObject *doc) {
    PyObject *ns;
    if (metaclass) {
        PyObject *prep = __Pyx_PyObject_GetAttrStr(metaclass, __pyx_n_s_prepare);
        if (prep) {
            PyObject *pargs = PyTuple_Pack(2, name, bases);
            if (unlikely(!pargs)) {
                Py_DECREF(prep);
                return NULL;
            }
            ns = PyObject_Call(prep, pargs, mkw);
            Py_DECREF(prep);
            Py_DECREF(pargs);
        } else {
            if (unlikely(!PyErr_ExceptionMatches(PyExc_AttributeError)))
                return NULL;
            PyErr_Clear();
            ns = PyDict_New();
        }
    } else {
        ns = PyDict_New();
    }
    if (unlikely(!ns))
        return NULL;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_module, modname) < 0)) goto bad;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_qualname, qualname) < 0)) goto bad;
    if (unlikely(doc && PyObject_SetItem(ns, __pyx_n_s_doc, doc) < 0)) goto bad;
    return ns;
bad:
    Py_DECREF(ns);
    return NULL;
}
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases,
                                      PyObject *dict, PyObject *mkw,
                                      int calculate_metaclass, int allow_py2_metaclass) {
    PyObject *result, *margs;
    PyObject *owned_metaclass = NULL;
    if (allow_py2_metaclass) {
        owned_metaclass = PyObject_GetItem(dict, __pyx_n_s_metaclass);
        if (owned_metaclass) {
            metaclass = owned_metaclass;
        } else if (likely(PyErr_ExceptionMatches(PyExc_KeyError))) {
            PyErr_Clear();
        } else {
            return NULL;
        }
    }
    if (calculate_metaclass && (!metaclass || PyType_Check(metaclass))) {
        metaclass = __Pyx_CalculateMetaclass((PyTypeObject*) metaclass, bases);
        Py_XDECREF(owned_metaclass);
        if (unlikely(!metaclass))
            return NULL;
        owned_metaclass = metaclass;
    }
    margs = PyTuple_Pack(3, name, bases, dict);
    if (unlikely(!margs)) {
        result = NULL;
    } else {
        result = PyObject_Call(metaclass, margs, mkw);
        Py_DECREF(margs);
    }
    Py_XDECREF(owned_metaclass);
    return result;
}

/* CodeObjectCache */
              static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
              #include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        __pyx_d,      /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntFromPyVerify */
              #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
              static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* Print */
              #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static PyObject *__Pyx_GetStdout(void) {
    PyObject *f = PySys_GetObject((char *)"stdout");
    if (!f) {
        PyErr_SetString(PyExc_RuntimeError, "lost sys.stdout");
    }
    return f;
}
static int __Pyx_Print(PyObject* f, PyObject *arg_tuple, int newline) {
    int i;
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    Py_INCREF(f);
    for (i=0; i < PyTuple_GET_SIZE(arg_tuple); i++) {
        PyObject* v;
        if (PyFile_SoftSpace(f, 1)) {
            if (PyFile_WriteString(" ", f) < 0)
                goto error;
        }
        v = PyTuple_GET_ITEM(arg_tuple, i);
        if (PyFile_WriteObject(v, f, Py_PRINT_RAW) < 0)
            goto error;
        if (PyString_Check(v)) {
            char *s = PyString_AsString(v);
            Py_ssize_t len = PyString_Size(v);
            if (len > 0) {
                switch (s[len-1]) {
                    case ' ': break;
                    case '\f': case '\r': case '\n': case '\t': case '\v':
                        PyFile_SoftSpace(f, 0);
                        break;
                    default:  break;
                }
            }
        }
    }
    if (newline) {
        if (PyFile_WriteString("\n", f) < 0)
            goto error;
        PyFile_SoftSpace(f, 0);
    }
    Py_DECREF(f);
    return 0;
error:
    Py_DECREF(f);
    return -1;
}
#else
static int __Pyx_Print(PyObject* stream, PyObject *arg_tuple, int newline) {
    PyObject* kwargs = 0;
    PyObject* result = 0;
    PyObject* end_string;
    if (unlikely(!__pyx_print)) {
        __pyx_print = PyObject_GetAttr(__pyx_b, __pyx_n_s_print);
        if (!__pyx_print)
            return -1;
    }
    if (stream) {
        kwargs = PyDict_New();
        if (unlikely(!kwargs))
            return -1;
        if (unlikely(PyDict_SetItem(kwargs, __pyx_n_s_file, stream) < 0))
            goto bad;
        if (!newline) {
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                goto bad;
            if (PyDict_SetItem(kwargs, __pyx_n_s_end, end_string) < 0) {
                Py_DECREF(end_string);
                goto bad;
            }
            Py_DECREF(end_string);
        }
    } else if (!newline) {
        if (unlikely(!__pyx_print_kwargs)) {
            __pyx_print_kwargs = PyDict_New();
            if (unlikely(!__pyx_print_kwargs))
                return -1;
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                return -1;
            if (PyDict_SetItem(__pyx_print_kwargs, __pyx_n_s_end, end_string) < 0) {
                Py_DECREF(end_string);
                return -1;
            }
            Py_DECREF(end_string);
        }
        kwargs = __pyx_print_kwargs;
    }
    result = PyObject_Call(__pyx_print, arg_tuple, kwargs);
    if (unlikely(kwargs) && (kwargs != __pyx_print_kwargs))
        Py_DECREF(kwargs);
    if (!result)
        return -1;
    Py_DECREF(result);
    return 0;
bad:
    if (kwargs != __pyx_print_kwargs)
        Py_XDECREF(kwargs);
    return -1;
}
#endif

/* CIntToPy */
              static CYTHON_INLINE PyObject* __Pyx_PyInt_From_LHAPDF_3a__3a_AlphaS_3a__3a_FlavorScheme(LHAPDF::AlphaS::FlavorScheme value) {
    const LHAPDF::AlphaS::FlavorScheme neg_one = (LHAPDF::AlphaS::FlavorScheme) -1, const_zero = (LHAPDF::AlphaS::FlavorScheme) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(LHAPDF::AlphaS::FlavorScheme) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(LHAPDF::AlphaS::FlavorScheme) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(LHAPDF::AlphaS::FlavorScheme) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(LHAPDF::AlphaS::FlavorScheme) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(LHAPDF::AlphaS::FlavorScheme) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(LHAPDF::AlphaS::FlavorScheme),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
              static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
              static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
              static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
    const size_t neg_one = (size_t) -1, const_zero = (size_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(size_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(size_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 2 * PyLong_SHIFT) {
                            return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 3 * PyLong_SHIFT) {
                            return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 4 * PyLong_SHIFT) {
                            return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (size_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(size_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(size_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(size_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(size_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            size_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

/* PrintOne */
              #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static int __Pyx_PrintOne(PyObject* f, PyObject *o) {
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    Py_INCREF(f);
    if (PyFile_SoftSpace(f, 0)) {
        if (PyFile_WriteString(" ", f) < 0)
            goto error;
    }
    if (PyFile_WriteObject(o, f, Py_PRINT_RAW) < 0)
        goto error;
    if (PyFile_WriteString("\n", f) < 0)
        goto error;
    Py_DECREF(f);
    return 0;
error:
    Py_DECREF(f);
    return -1;
    /* the line below is just to avoid C compiler
     * warnings about unused functions */
    return __Pyx_Print(f, NULL, 0);
}
#else
static int __Pyx_PrintOne(PyObject* stream, PyObject *o) {
    int res;
    PyObject* arg_tuple = PyTuple_Pack(1, o);
    if (unlikely(!arg_tuple))
        return -1;
    res = __Pyx_Print(stream, arg_tuple, 1);
    Py_DECREF(arg_tuple);
    return res;
}
#endif

/* CIntFromPy */
              static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CheckBinaryVersion */
              static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* InitStrings */
              static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if CYTHON_COMPILING_IN_CPYTHON && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
#if PY_VERSION_HEX < 0x03030000
        char* defenc_c;
        PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
        if (!defenc) return NULL;
        defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        {
            char* end = defenc_c + PyBytes_GET_SIZE(defenc);
            char* c;
            for (c = defenc_c; c < end; c++) {
                if ((unsigned char) (*c) >= 128) {
                    PyUnicode_AsASCIIString(o);
                    return NULL;
                }
            }
        }
#endif
        *length = PyBytes_GET_SIZE(defenc);
        return defenc_c;
#else
        if (__Pyx_PyUnicode_READY(o) == -1) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        if (PyUnicode_IS_ASCII(o)) {
            *length = PyUnicode_GET_LENGTH(o);
            return PyUnicode_AsUTF8(o);
        } else {
            PyUnicode_AsASCIIString(o);
            return NULL;
        }
#else
        return PyUnicode_AsUTF8AndSize(o, length);
#endif
#endif
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
  #else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
  #endif
#else
  res = PyNumber_Int(x);
#endif
  if (res) {
#if PY_MAJOR_VERSION < 3
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%.4s__ returned non-%.4s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(x);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
